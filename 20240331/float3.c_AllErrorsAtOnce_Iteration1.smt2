(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-30T23:57:13+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id float3.c_AllErrorsAtOnce_Iteration1)
(declare-fun ~convertINTToDOUBLE (Int) Real)
(declare-fun ~someBinaryArithmeticDOUBLEoperation (Real Real) Real)
(declare-fun ~someBinaryDOUBLEComparisonOperation (Real Real) Bool)
(declare-fun |c_old(~d~0)| () Real)
(declare-fun |c_old(~d~0)_primed| () Real)
(declare-fun c_~d~0 () Real)
(declare-fun c_~d~0_primed () Real)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~nondet4| () Int)
(declare-fun |c_main_#t~nondet4_primed| () Int)
(declare-fun c_main_~x~0 () Int)
(declare-fun c_main_~x~0_primed () Int)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res_primed| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret5| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret5_primed| () Int)
(declare-fun |c___assert_fail_#in~0.base| () Int)
(declare-fun |c___assert_fail_#in~0.base_primed| () Int)
(declare-fun |c___assert_fail_#in~0.offset| () Int)
(declare-fun |c___assert_fail_#in~0.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~1.base| () Int)
(declare-fun |c___assert_fail_#in~1.base_primed| () Int)
(declare-fun |c___assert_fail_#in~1.offset| () Int)
(declare-fun |c___assert_fail_#in~1.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~2| () Int)
(declare-fun |c___assert_fail_#in~2_primed| () Int)
(declare-fun |c___assert_fail_#in~3.base| () Int)
(declare-fun |c___assert_fail_#in~3.base_primed| () Int)
(declare-fun |c___assert_fail_#in~3.offset| () Int)
(declare-fun |c___assert_fail_#in~3.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun c_aux_v_~someBinaryDOUBLEComparisonOperation_2 () Bool)
(declare-fun c_aux_v_~someBinaryDOUBLEComparisonOperation_4 () Bool)
(declare-fun c_aux_v_main_~x~0_3 () Int)
(declare-fun c_aux_v_main_~x~0_4 () Int)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret5_3| () Int)
(echo "starting trace check")
(push 1)
(declare-fun ~d~0_-1 () Real)
(declare-fun |old(~d~0)_-1| () Real)
(declare-fun |old(~d~0)_0| () Real)
(declare-fun ~d~0_0 () Real)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun ~d~0_1 () Real)
(declare-fun |old(~d~0)_3| () Real)
(declare-fun ~d~0_3 () Real)
(declare-fun |main_#t~nondet4_4| () Int)
(declare-fun v_main_~x~0_5_fresh_1 () Int)
(declare-fun |main_#t~nondet4_5| () Int)
(declare-fun v_main_~x~0_6_fresh_1 () Int)
(declare-fun |old(~d~0)_6| () Real)
(declare-fun ~d~0_6 () Real)
(declare-fun ~d~0_7 () Real)
(declare-fun ~d~0_9 () Real)
(declare-fun v_~someBinaryDOUBLEComparisonOperation_5_fresh_1 () Bool)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (= ~d~0_0 |old(~d~0)_0|) :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! (= ~d~0_-1 |old(~d~0)_0|) :named ssa_0_OldVarAssigCall))
(assert (! (and (= ~d~0_1 0.0) (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= 9 (select |#length_-1| 2)) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! (= ~d~0_3 |old(~d~0)_3|) :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! (= ~d~0_1 |old(~d~0)_3|) :named ssa_3_OldVarAssigCall))
(assert (! (and (<= |main_#t~nondet4_4| 2147483647) (= v_main_~x~0_5_fresh_1 2) (<= 0 (+ |main_#t~nondet4_4| 2147483648))) :named ssa_4))
(assert (! (and (= v_main_~x~0_6_fresh_1 4) (not (= |main_#t~nondet4_4| 0))) :named ssa_5))
(assert (! (= ~d~0_6 |old(~d~0)_6|) :named ssa_6_GlobVarAssigCall))
(assert (! true :named ssa_6_LocVarAssigCall))
(assert (! (= ~d~0_3 |old(~d~0)_6|) :named ssa_6_OldVarAssigCall))
(assert (! (= ~d~0_7 1.0) :named ssa_7))
(assert (! true :named ssa_8_return))
(assert (! true :named ssa_9))
(assert (! (not v_~someBinaryDOUBLEComparisonOperation_5_fresh_1) :named ssa_10))
(assert (! true :named ssa_11))
(check-sat)
(echo "Trace is feasible, we will do another trace check, this time with branch encoders.")
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun ~d~0_-1 () Real)
(declare-fun |old(~d~0)_-1| () Real)
(declare-fun |old(~d~0)_0| () Real)
(declare-fun ~d~0_0 () Real)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun ~d~0_1 () Real)
(declare-fun |old(~d~0)_3| () Real)
(declare-fun ~d~0_3 () Real)
(declare-fun |main_#t~nondet4_4| () Int)
(declare-fun v_main_~x~0_3_fresh_1 () Int)
(declare-fun |main_#t~nondet4_5| () Int)
(declare-fun v_main_~x~0_4_fresh_1 () Int)
(declare-fun |old(~d~0)_6| () Real)
(declare-fun ~d~0_6 () Real)
(declare-fun ~d~0_7 () Real)
(declare-fun ~d~0_9 () Real)
(declare-fun v_~someBinaryDOUBLEComparisonOperation_4_fresh_1 () Bool)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (= ~d~0_0 |old(~d~0)_0|) :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! (= ~d~0_-1 |old(~d~0)_0|) :named ssa_0_OldVarAssigCall))
(assert (! (and (= 2 (select |#length_-1| 1)) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#valid_-1| 1) 1) (= ~d~0_1 0.0) (< 0 |#StackHeapBarrier_-1|) (= (select |#valid_-1| 3) 1) (= 48 (select (select |#memory_int#0_-1| 1) 0)) (= 9 (select |#length_-1| 2)) (= (select |#valid_-1| 0) 0) (= (select |#valid_-1| 2) 1) (= 12 (select |#length_-1| 3))) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! (= ~d~0_3 |old(~d~0)_3|) :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! (= ~d~0_1 |old(~d~0)_3|) :named ssa_3_OldVarAssigCall))
(assert (! (and (<= |main_#t~nondet4_4| 2147483647) (= v_main_~x~0_3_fresh_1 2) (<= 0 (+ |main_#t~nondet4_4| 2147483648))) :named ssa_4))
(assert (! (and (= v_main_~x~0_4_fresh_1 4) (not (= |main_#t~nondet4_4| 0))) :named ssa_5))
(assert (! (= ~d~0_6 |old(~d~0)_6|) :named ssa_6_GlobVarAssigCall))
(assert (! true :named ssa_6_LocVarAssigCall))
(assert (! (= ~d~0_3 |old(~d~0)_6|) :named ssa_6_OldVarAssigCall))
(assert (! (= ~d~0_7 1.0) :named ssa_7))
(assert (! true :named ssa_8_return))
(assert (! true :named ssa_9))
(assert (! (not v_~someBinaryDOUBLEComparisonOperation_4_fresh_1) :named ssa_10))
(assert (! true :named ssa_11))
(check-sat)
(get-value (|main_#t~nondet4_4|))
(get-value (|main_#t~nondet4_5|))
(get-value (|#StackHeapBarrier_-1|))
(get-value (~d~0_-1))
(get-value (~d~0_0))
(get-value (~d~0_1))
(get-value (~d~0_3))
(get-value (~d~0_6))
(get-value (~d~0_7))
(get-value (~d~0_9))
(get-value (|old(~d~0)_-1|))
(get-value (|old(~d~0)_0|))
(get-value (|old(~d~0)_3|))
(get-value (|old(~d~0)_6|))
(echo "finished trace check")
(pop 1)
(exit)
