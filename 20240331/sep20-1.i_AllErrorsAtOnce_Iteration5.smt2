(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-31T00:15:39+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id sep20-1.i_AllErrorsAtOnce_Iteration5)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#1)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#1)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#1| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#1_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_reach_error_#t~nondet0.base| () Int)
(declare-fun |c_reach_error_#t~nondet0.base_primed| () Int)
(declare-fun |c_reach_error_#t~nondet0.offset| () Int)
(declare-fun |c_reach_error_#t~nondet0.offset_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c_read~int#1_#ptr.base| () Int)
(declare-fun |c_read~int#1_#ptr.base_primed| () Int)
(declare-fun |c_read~int#1_#ptr.offset| () Int)
(declare-fun |c_read~int#1_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#1_#sizeOfReadType| () Int)
(declare-fun |c_read~int#1_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#1_#value| () Int)
(declare-fun |c_read~int#1_#value_primed| () Int)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~nondet5| () Int)
(declare-fun |c_main_#t~nondet5_primed| () Int)
(declare-fun |c_main_#t~post6| () Int)
(declare-fun |c_main_#t~post6_primed| () Int)
(declare-fun c_main_~i~1 () Int)
(declare-fun c_main_~i~1_primed () Int)
(declare-fun |c_main_#t~ret7| () Int)
(declare-fun |c_main_#t~ret7_primed| () Int)
(declare-fun |c_main_#t~mem8| () Int)
(declare-fun |c_main_#t~mem8_primed| () Int)
(declare-fun |c_main_#t~mem9| () Int)
(declare-fun |c_main_#t~mem9_primed| () Int)
(declare-fun |c_main_#t~ret10| () Int)
(declare-fun |c_main_#t~ret10_primed| () Int)
(declare-fun |c_main_#t~mem11| () Int)
(declare-fun |c_main_#t~mem11_primed| () Int)
(declare-fun |c_main_#t~mem12| () Int)
(declare-fun |c_main_#t~mem12_primed| () Int)
(declare-fun |c_main_#t~post13| () Int)
(declare-fun |c_main_#t~post13_primed| () Int)
(declare-fun c_main_~i~2 () Int)
(declare-fun c_main_~i~2_primed () Int)
(declare-fun |c_main_#t~ret14| () Int)
(declare-fun |c_main_#t~ret14_primed| () Int)
(declare-fun |c_main_~#x~0.base| () Int)
(declare-fun |c_main_~#x~0.base_primed| () Int)
(declare-fun |c_main_~#x~0.offset| () Int)
(declare-fun |c_main_~#x~0.offset_primed| () Int)
(declare-fun c_main_~temp~0 () Int)
(declare-fun c_main_~temp~0_primed () Int)
(declare-fun c_main_~ret~1 () Int)
(declare-fun c_main_~ret~1_primed () Int)
(declare-fun c_main_~ret2~0 () Int)
(declare-fun c_main_~ret2~0_primed () Int)
(declare-fun c_main_~ret5~0 () Int)
(declare-fun c_main_~ret5~0_primed () Int)
(declare-fun |c_#Ultimate.allocOnStack_~size| () Int)
(declare-fun |c_#Ultimate.allocOnStack_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocOnStack_#res.base| () Int)
(declare-fun |c_#Ultimate.allocOnStack_#res.base_primed| () Int)
(declare-fun |c_#Ultimate.allocOnStack_#res.offset| () Int)
(declare-fun |c_#Ultimate.allocOnStack_#res.offset_primed| () Int)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_write~int#1_#value| () Int)
(declare-fun |c_write~int#1_#value_primed| () Int)
(declare-fun |c_write~int#1_#ptr.base| () Int)
(declare-fun |c_write~int#1_#ptr.base_primed| () Int)
(declare-fun |c_write~int#1_#ptr.offset| () Int)
(declare-fun |c_write~int#1_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#1_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#1_#sizeOfWrittenType_primed| () Int)
(declare-fun |c___assert_#in~__assertion.base| () Int)
(declare-fun |c___assert_#in~__assertion.base_primed| () Int)
(declare-fun |c___assert_#in~__assertion.offset| () Int)
(declare-fun |c___assert_#in~__assertion.offset_primed| () Int)
(declare-fun |c___assert_#in~__file.base| () Int)
(declare-fun |c___assert_#in~__file.base_primed| () Int)
(declare-fun |c___assert_#in~__file.offset| () Int)
(declare-fun |c___assert_#in~__file.offset_primed| () Int)
(declare-fun |c___assert_#in~__line| () Int)
(declare-fun |c___assert_#in~__line_primed| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res_primed| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret15| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret15_primed| () Int)
(declare-fun |c_write~init~int#1_#value| () Int)
(declare-fun |c_write~init~int#1_#value_primed| () Int)
(declare-fun |c_write~init~int#1_#ptr.base| () Int)
(declare-fun |c_write~init~int#1_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#1_#ptr.offset| () Int)
(declare-fun |c_write~init~int#1_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#1_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#1_#sizeOfWrittenType_primed| () Int)
(declare-fun |c___assert_fail_#in~__assertion.base| () Int)
(declare-fun |c___assert_fail_#in~__assertion.base_primed| () Int)
(declare-fun |c___assert_fail_#in~__assertion.offset| () Int)
(declare-fun |c___assert_fail_#in~__assertion.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~__file.base| () Int)
(declare-fun |c___assert_fail_#in~__file.base_primed| () Int)
(declare-fun |c___assert_fail_#in~__file.offset| () Int)
(declare-fun |c___assert_fail_#in~__file.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~__line| () Int)
(declare-fun |c___assert_fail_#in~__line_primed| () Int)
(declare-fun |c___assert_fail_#in~__function.base| () Int)
(declare-fun |c___assert_fail_#in~__function.base_primed| () Int)
(declare-fun |c___assert_fail_#in~__function.offset| () Int)
(declare-fun |c___assert_fail_#in~__function.offset_primed| () Int)
(declare-fun |c___assert_perror_fail_#in~__errnum| () Int)
(declare-fun |c___assert_perror_fail_#in~__errnum_primed| () Int)
(declare-fun |c___assert_perror_fail_#in~__file.base| () Int)
(declare-fun |c___assert_perror_fail_#in~__file.base_primed| () Int)
(declare-fun |c___assert_perror_fail_#in~__file.offset| () Int)
(declare-fun |c___assert_perror_fail_#in~__file.offset_primed| () Int)
(declare-fun |c___assert_perror_fail_#in~__line| () Int)
(declare-fun |c___assert_perror_fail_#in~__line_primed| () Int)
(declare-fun |c___assert_perror_fail_#in~__function.base| () Int)
(declare-fun |c___assert_perror_fail_#in~__function.base_primed| () Int)
(declare-fun |c___assert_perror_fail_#in~__function.offset| () Int)
(declare-fun |c___assert_perror_fail_#in~__function.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_sep_#in~x.base| () Int)
(declare-fun |c_sep_#in~x.base_primed| () Int)
(declare-fun |c_sep_#in~x.offset| () Int)
(declare-fun |c_sep_#in~x.offset_primed| () Int)
(declare-fun |c_sep_#res| () Int)
(declare-fun |c_sep_#res_primed| () Int)
(declare-fun |c_sep_#t~mem1| () Int)
(declare-fun |c_sep_#t~mem1_primed| () Int)
(declare-fun |c_sep_#t~post2| () Int)
(declare-fun |c_sep_#t~post2_primed| () Int)
(declare-fun |c_sep_#t~post3| () Int)
(declare-fun |c_sep_#t~post3_primed| () Int)
(declare-fun |c_sep_#t~post4| () Int)
(declare-fun |c_sep_#t~post4_primed| () Int)
(declare-fun c_sep_~i~0 () Int)
(declare-fun c_sep_~i~0_primed () Int)
(declare-fun c_sep_~x.base () Int)
(declare-fun c_sep_~x.base_primed () Int)
(declare-fun c_sep_~x.offset () Int)
(declare-fun c_sep_~x.offset_primed () Int)
(declare-fun c_sep_~ret~0 () Int)
(declare-fun c_sep_~ret~0_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun |c_aux_v_main_#t~nondet5_3| () Int)
(declare-fun c_aux_v_main_~temp~0_5 () Int)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret15_3| () Int)
(declare-fun |c_aux_v_sep_#t~post2_2| () Int)
(declare-fun |c_aux_v_sep_#t~post3_2| () Int)
(declare-fun |c_aux_v_main_#t~nondet5_5| () Int)
(declare-fun |c_aux_v_main_#t~nondet5_7| () Int)
(declare-fun c_aux_v_ArrVal_1 () Int)
(declare-fun c_aux_v_ArrVal_2 () Int)
(declare-fun c_aux_v_main_~temp~0_6 () Int)
(declare-fun c_aux_v_ArrVal_4 () Int)
(declare-fun c_aux_v_ArrVal_3 () Int)
(declare-fun c_aux_v_ArrVal_5 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_6 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_7 () Int)
(declare-fun c_aux_v_ArrVal_8 () Int)
(declare-fun c_aux_v_ArrVal_9 () Int)
(declare-fun c_aux_v_main_~temp~0_7 () Int)
(declare-fun c_aux_v_ArrVal_11 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_10 () Int)
(declare-fun c_aux_v_ArrVal_12 () Int)
(declare-fun c_aux_v_ArrVal_14 () Int)
(declare-fun c_aux_v_ArrVal_13 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_15 () Int)
(declare-fun c_aux_v_ArrVal_16 () Int)
(declare-fun c_aux_v_ArrVal_17 () Int)
(declare-fun |c_aux_v_main_#t~nondet5_8| () Int)
(declare-fun c_aux_v_ArrVal_18 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_19 () Int)
(declare-fun c_aux_v_ArrVal_20 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_21 () Int)
(declare-fun c_aux_v_main_~temp~0_8 () Int)
(declare-fun c_aux_v_ArrVal_22 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_23 () Int)
(declare-fun c_aux_v_ArrVal_24 () Int)
(declare-fun c_aux_v_ArrVal_25 () Int)
(declare-fun |c_aux_v_main_#t~nondet5_9| () Int)
(declare-fun c_aux_v_ArrVal_27 () Int)
(declare-fun c_aux_v_ArrVal_26 () (Array Int Int))
(declare-fun |c_aux_v_main_#t~nondet5_10| () Int)
(declare-fun c_aux_v_ArrVal_29 () Int)
(declare-fun c_aux_v_ArrVal_28 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_31 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_32 () Int)
(declare-fun c_aux_v_main_~temp~0_9 () Int)
(declare-fun c_aux_v_ArrVal_30 () Int)
(declare-fun c_aux_v_ArrVal_33 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_34 () Int)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#memory_int#1_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#0)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-1| () (Array Int Int))
(declare-fun |old(#length)_-1| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |old(#valid)_3| () (Array Int Int))
(declare-fun |old(#length)_3| () (Array Int Int))
(declare-fun |old(#memory_int#1)_3| () (Array Int (Array Int Int)))
(declare-fun |#valid_3| () (Array Int Int))
(declare-fun |#length_3| () (Array Int Int))
(declare-fun |#memory_int#1_3| () (Array Int (Array Int Int)))
(declare-fun |main_~#x~0.offset_4| () Int)
(declare-fun main_~ret5~0_4 () Int)
(declare-fun main_~temp~0_4 () Int)
(declare-fun |#valid_4| () (Array Int Int))
(declare-fun main_~i~1_4 () Int)
(declare-fun |#length_4| () (Array Int Int))
(declare-fun main_~ret~1_4 () Int)
(declare-fun main_~ret2~0_4 () Int)
(declare-fun |main_~#x~0.base_4| () Int)
(declare-fun v_ArrVal_35_fresh_1 () Int)
(declare-fun v_ArrVal_36_fresh_1 () Int)
(declare-fun |main_#t~nondet5_5| () Int)
(declare-fun main_~i~1_5 () Int)
(declare-fun |#memory_int#1_5| () (Array Int (Array Int Int)))
(declare-fun |main_#t~post6_5| () Int)
(declare-fun v_ArrVal_38_fresh_1 () Int)
(declare-fun v_ArrVal_37_fresh_1 () (Array Int Int))
(declare-fun |v_main_#t~nondet5_11_fresh_1| () Int)
(declare-fun |main_#t~nondet5_6| () Int)
(declare-fun main_~i~1_6 () Int)
(declare-fun |#memory_int#1_6| () (Array Int (Array Int Int)))
(declare-fun |main_#t~post6_6| () Int)
(declare-fun v_ArrVal_39_fresh_1 () (Array Int Int))
(declare-fun v_ArrVal_40_fresh_1 () Int)
(declare-fun |v_main_#t~nondet5_12_fresh_1| () Int)
(declare-fun main_~i~1_7 () Int)
(declare-fun main_~i~1_8 () Int)
(declare-fun |main_~#x~0.offset_9| () Int)
(declare-fun |sep_#in~x.offset_9| () Int)
(declare-fun |sep_#in~x.base_9| () Int)
(declare-fun |main_~#x~0.base_9| () Int)
(declare-fun sep_~i~0_10 () Int)
(declare-fun sep_~x.offset_10 () Int)
(declare-fun sep_~x.base_10 () Int)
(declare-fun sep_~ret~0_10 () Int)
(declare-fun |sep_#t~mem1_11| () Int)
(declare-fun |sep_#t~mem1_12| () Int)
(declare-fun sep_~ret~0_12 () Int)
(declare-fun |v_sep_#t~post2_3_fresh_1| () Int)
(declare-fun sep_~i~0_13 () Int)
(declare-fun |sep_#t~post4_13| () Int)
(declare-fun sep_~i~0_14 () Int)
(declare-fun sep_~i~0_15 () Int)
(declare-fun |sep_#res_15| () Int)
(declare-fun sep_~ret~0_15 () Int)
(declare-fun |main_#t~ret7_16| () Int)
(declare-fun |sep_#res_16| () Int)
(declare-fun |main_#t~ret7_17| () Int)
(declare-fun |main_#t~mem8_17| () Int)
(declare-fun |#memory_int#1_17| () (Array Int (Array Int Int)))
(declare-fun main_~ret~1_17 () Int)
(declare-fun |main_#t~mem9_17| () Int)
(declare-fun v_main_~temp~0_10_fresh_1 () Int)
(declare-fun v_ArrVal_43_fresh_1 () (Array Int Int))
(declare-fun v_ArrVal_42_fresh_1 () Int)
(declare-fun v_ArrVal_41_fresh_1 () Int)
(declare-fun |main_~#x~0.offset_18| () Int)
(declare-fun |sep_#in~x.offset_18| () Int)
(declare-fun |sep_#in~x.base_18| () Int)
(declare-fun |main_~#x~0.base_18| () Int)
(declare-fun sep_~i~0_19 () Int)
(declare-fun sep_~x.offset_19 () Int)
(declare-fun sep_~x.base_19 () Int)
(declare-fun sep_~ret~0_19 () Int)
(declare-fun |sep_#t~mem1_20| () Int)
(declare-fun |sep_#t~mem1_21| () Int)
(declare-fun sep_~ret~0_21 () Int)
(declare-fun |v_sep_#t~post2_4_fresh_1| () Int)
(declare-fun sep_~i~0_22 () Int)
(declare-fun |sep_#t~post4_22| () Int)
(declare-fun sep_~i~0_23 () Int)
(declare-fun sep_~i~0_24 () Int)
(declare-fun |sep_#res_24| () Int)
(declare-fun sep_~ret~0_24 () Int)
(declare-fun |sep_#res_25| () Int)
(declare-fun |main_#t~ret10_25| () Int)
(declare-fun main_~temp~0_26 () Int)
(declare-fun |main_#t~mem11_26| () Int)
(declare-fun |main_#t~ret10_26| () Int)
(declare-fun main_~i~2_26 () Int)
(declare-fun main_~ret2~0_26 () Int)
(declare-fun main_~i~2_27 () Int)
(declare-fun main_~temp~0_28 () Int)
(declare-fun main_~i~2_28 () Int)
(declare-fun |#memory_int#1_28| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_44_fresh_1 () (Array Int Int))
(declare-fun v_ArrVal_45_fresh_1 () Int)
(declare-fun |main_~#x~0.offset_29| () Int)
(declare-fun |sep_#in~x.offset_29| () Int)
(declare-fun |sep_#in~x.base_29| () Int)
(declare-fun |main_~#x~0.base_29| () Int)
(declare-fun sep_~i~0_30 () Int)
(declare-fun sep_~x.offset_30 () Int)
(declare-fun sep_~x.base_30 () Int)
(declare-fun sep_~ret~0_30 () Int)
(declare-fun |sep_#t~mem1_31| () Int)
(declare-fun |sep_#t~mem1_32| () Int)
(declare-fun sep_~ret~0_32 () Int)
(declare-fun |v_sep_#t~post2_5_fresh_1| () Int)
(declare-fun sep_~i~0_33 () Int)
(declare-fun |sep_#t~post4_33| () Int)
(declare-fun sep_~i~0_34 () Int)
(declare-fun sep_~i~0_35 () Int)
(declare-fun |sep_#res_35| () Int)
(declare-fun sep_~ret~0_35 () Int)
(declare-fun |main_#t~ret14_36| () Int)
(declare-fun |sep_#res_36| () Int)
(declare-fun main_~ret5~0_37 () Int)
(declare-fun |main_#t~ret14_37| () Int)
(declare-fun main_~ret5~0_38 () Int)
(declare-fun main_~ret~1_38 () Int)
(declare-fun main_~ret2~0_38 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! true :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! true :named ssa_0_OldVarAssigCall))
(assert (! (and (= (select |#valid_-1| 1) 1) (= (select |#valid_-1| 2) 1) (< 0 |#StackHeapBarrier_-1|) (= (select |#valid_-1| 0) 0) (= (select |#length_-1| 1) 2) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 2) 10) (= (select (select |#memory_int#0_-1| 1) 0) 48)) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! (and (= |old(#valid)_3| |#valid_3|) (= |#length_3| |old(#length)_3|) (= |old(#memory_int#1)_3| |#memory_int#1_3|)) :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! (and (= |old(#length)_3| |#length_-1|) (= |#valid_-1| |old(#valid)_3|) (= |old(#memory_int#1)_3| |#memory_int#1_-1|)) :named ssa_3_OldVarAssigCall))
(assert (! (and (= main_~i~1_4 0) (= |main_~#x~0.offset_4| 0) (= v_ArrVal_35_fresh_1 80) (= (select |#valid_3| |main_~#x~0.base_4|) 0) (< |#StackHeapBarrier_-1| |main_~#x~0.base_4|) (= v_ArrVal_36_fresh_1 1) (not (= |main_~#x~0.base_4| 0)) (= (store |#length_3| |main_~#x~0.base_4| v_ArrVal_35_fresh_1) |#length_4|) (= |#valid_4| (store |#valid_3| |main_~#x~0.base_4| v_ArrVal_36_fresh_1))) :named ssa_4))
(assert (! (and (= (store (select |#memory_int#1_3| |main_~#x~0.base_4|) (+ (* main_~i~1_4 4) |main_~#x~0.offset_4|) |v_main_#t~nondet5_11_fresh_1|) v_ArrVal_37_fresh_1) (<= 0 (+ |v_main_#t~nondet5_11_fresh_1| 2147483648)) (< main_~i~1_4 20) (= |#memory_int#1_5| (store |#memory_int#1_3| |main_~#x~0.base_4| v_ArrVal_37_fresh_1)) (<= |v_main_#t~nondet5_11_fresh_1| 2147483647) (= |v_main_#t~nondet5_11_fresh_1| v_ArrVal_38_fresh_1) (= main_~i~1_5 (+ main_~i~1_4 1))) :named ssa_5))
(assert (! (and (= |v_main_#t~nondet5_12_fresh_1| v_ArrVal_40_fresh_1) (< main_~i~1_5 20) (= (store (select |#memory_int#1_5| |main_~#x~0.base_4|) (+ (* main_~i~1_5 4) |main_~#x~0.offset_4|) |v_main_#t~nondet5_12_fresh_1|) v_ArrVal_39_fresh_1) (<= 0 (+ |v_main_#t~nondet5_12_fresh_1| 2147483648)) (= (store |#memory_int#1_5| |main_~#x~0.base_4| v_ArrVal_39_fresh_1) |#memory_int#1_6|) (<= |v_main_#t~nondet5_12_fresh_1| 2147483647) (= main_~i~1_6 (+ main_~i~1_5 1))) :named ssa_6))
(assert (! (<= 20 main_~i~1_6) :named ssa_7))
(assert (! true :named ssa_8))
(assert (! true :named ssa_9_GlobVarAssigCall))
(assert (! (and (= |main_~#x~0.offset_4| |sep_#in~x.offset_9|) (= |sep_#in~x.base_9| |main_~#x~0.base_4|)) :named ssa_9_LocVarAssigCall))
(assert (! true :named ssa_9_OldVarAssigCall))
(assert (! (and (= sep_~ret~0_10 0) (= sep_~i~0_10 0) (= |sep_#in~x.base_9| sep_~x.base_10) (= |sep_#in~x.offset_9| sep_~x.offset_10)) :named ssa_10))
(assert (! (and (< sep_~i~0_10 20) (= (select (select |#memory_int#1_6| sep_~x.base_10) (+ sep_~x.offset_10 (* sep_~i~0_10 4))) |sep_#t~mem1_11|)) :named ssa_11))
(assert (! (and (= sep_~ret~0_10 |v_sep_#t~post2_3_fresh_1|) (= (ite (and (< |sep_#t~mem1_11| 0) (not (= (mod |sep_#t~mem1_11| 2) 0))) (+ (mod |sep_#t~mem1_11| 2) (- 2)) (mod |sep_#t~mem1_11| 2)) 0) (= sep_~ret~0_12 (+ |v_sep_#t~post2_3_fresh_1| 1))) :named ssa_12))
(assert (! (= (+ sep_~i~0_10 1) sep_~i~0_13) :named ssa_13))
(assert (! (<= 20 sep_~i~0_13) :named ssa_14))
(assert (! (= (ite (<= (mod sep_~ret~0_12 4294967296) 2147483647) (mod sep_~ret~0_12 4294967296) (+ (- 4294967296) (mod sep_~ret~0_12 4294967296))) |sep_#res_15|) :named ssa_15))
(assert (! (= |sep_#res_15| |main_#t~ret7_16|) :named ssa_16_return))
(assert (! (and (= v_main_~temp~0_10_fresh_1 v_ArrVal_42_fresh_1) (<= |main_#t~ret7_16| 2147483647) (= |#memory_int#1_17| (store |#memory_int#1_6| |main_~#x~0.base_4| v_ArrVal_43_fresh_1)) (= |main_#t~ret7_16| main_~ret~1_17) (<= 0 (+ |main_#t~ret7_16| 2147483648)) (= v_ArrVal_43_fresh_1 (store (store (select |#memory_int#1_6| |main_~#x~0.base_4|) |main_~#x~0.offset_4| v_ArrVal_41_fresh_1) (+ |main_~#x~0.offset_4| 4) v_ArrVal_42_fresh_1)) (= (select (select |#memory_int#1_6| |main_~#x~0.base_4|) (+ |main_~#x~0.offset_4| 4)) v_ArrVal_41_fresh_1) (= v_main_~temp~0_10_fresh_1 (select (select |#memory_int#1_6| |main_~#x~0.base_4|) |main_~#x~0.offset_4|))) :named ssa_17))
(assert (! true :named ssa_18_GlobVarAssigCall))
(assert (! (and (= |sep_#in~x.base_18| |main_~#x~0.base_4|) (= |main_~#x~0.offset_4| |sep_#in~x.offset_18|)) :named ssa_18_LocVarAssigCall))
(assert (! true :named ssa_18_OldVarAssigCall))
(assert (! (and (= sep_~ret~0_19 0) (= sep_~i~0_19 0) (= |sep_#in~x.base_18| sep_~x.base_19) (= |sep_#in~x.offset_18| sep_~x.offset_19)) :named ssa_19))
(assert (! (and (< sep_~i~0_19 20) (= (select (select |#memory_int#1_17| sep_~x.base_19) (+ sep_~x.offset_19 (* sep_~i~0_19 4))) |sep_#t~mem1_20|)) :named ssa_20))
(assert (! (and (= (ite (and (< |sep_#t~mem1_20| 0) (not (= (mod |sep_#t~mem1_20| 2) 0))) (+ (mod |sep_#t~mem1_20| 2) (- 2)) (mod |sep_#t~mem1_20| 2)) 0) (= sep_~ret~0_19 |v_sep_#t~post2_4_fresh_1|) (= (+ |v_sep_#t~post2_4_fresh_1| 1) sep_~ret~0_21)) :named ssa_21))
(assert (! (= (+ sep_~i~0_19 1) sep_~i~0_22) :named ssa_22))
(assert (! (<= 20 sep_~i~0_22) :named ssa_23))
(assert (! (= (ite (<= (mod sep_~ret~0_21 4294967296) 2147483647) (mod sep_~ret~0_21 4294967296) (+ (- 4294967296) (mod sep_~ret~0_21 4294967296))) |sep_#res_24|) :named ssa_24))
(assert (! (= |sep_#res_24| |main_#t~ret10_25|) :named ssa_25_return))
(assert (! (and (<= |main_#t~ret10_25| 2147483647) (= main_~ret2~0_26 |main_#t~ret10_25|) (= main_~i~2_26 0) (<= 0 (+ |main_#t~ret10_25| 2147483648)) (= main_~temp~0_26 (select (select |#memory_int#1_17| |main_~#x~0.base_4|) |main_~#x~0.offset_4|))) :named ssa_26))
(assert (! (<= 19 main_~i~2_26) :named ssa_27))
(assert (! (and (= (store |#memory_int#1_17| |main_~#x~0.base_4| v_ArrVal_44_fresh_1) |#memory_int#1_28|) (= (store (select |#memory_int#1_17| |main_~#x~0.base_4|) (+ 76 |main_~#x~0.offset_4|) main_~temp~0_26) v_ArrVal_44_fresh_1) (= main_~temp~0_26 v_ArrVal_45_fresh_1)) :named ssa_28))
(assert (! true :named ssa_29_GlobVarAssigCall))
(assert (! (and (= |main_~#x~0.offset_4| |sep_#in~x.offset_29|) (= |sep_#in~x.base_29| |main_~#x~0.base_4|)) :named ssa_29_LocVarAssigCall))
(assert (! true :named ssa_29_OldVarAssigCall))
(assert (! (and (= sep_~ret~0_30 0) (= sep_~i~0_30 0) (= |sep_#in~x.base_29| sep_~x.base_30) (= |sep_#in~x.offset_29| sep_~x.offset_30)) :named ssa_30))
(assert (! (and (< sep_~i~0_30 20) (= (select (select |#memory_int#1_28| sep_~x.base_30) (+ sep_~x.offset_30 (* sep_~i~0_30 4))) |sep_#t~mem1_31|)) :named ssa_31))
(assert (! (and (= sep_~ret~0_30 |v_sep_#t~post2_5_fresh_1|) (= (ite (and (< |sep_#t~mem1_31| 0) (not (= (mod |sep_#t~mem1_31| 2) 0))) (+ (mod |sep_#t~mem1_31| 2) (- 2)) (mod |sep_#t~mem1_31| 2)) 0) (= (+ |v_sep_#t~post2_5_fresh_1| 1) sep_~ret~0_32)) :named ssa_32))
(assert (! (= (+ sep_~i~0_30 1) sep_~i~0_33) :named ssa_33))
(assert (! (<= 20 sep_~i~0_33) :named ssa_34))
(assert (! (= (ite (<= (mod sep_~ret~0_32 4294967296) 2147483647) (mod sep_~ret~0_32 4294967296) (+ (- 4294967296) (mod sep_~ret~0_32 4294967296))) |sep_#res_35|) :named ssa_35))
(assert (! (= |sep_#res_35| |main_#t~ret14_36|) :named ssa_36_return))
(assert (! (and (= main_~ret5~0_37 |main_#t~ret14_36|) (<= |main_#t~ret14_36| 2147483647) (<= 0 (+ |main_#t~ret14_36| 2147483648))) :named ssa_37))
(assert (! (or (not (= main_~ret5~0_37 main_~ret~1_17)) (not (= main_~ret2~0_26 main_~ret~1_17))) :named ssa_38))
(assert (! true :named ssa_39))
(check-sat)
(get-interpolants (and ssa_0_LocVarAssigCall ssa_precond ssa_0_GlobVarAssigCall ssa_0_OldVarAssigCall ssa_2_return ssa_1) (and ssa_3_OldVarAssigCall ssa_3_LocVarAssigCall ssa_3_GlobVarAssigCall) ssa_4 ssa_5 ssa_6 ssa_7 ssa_8 (and ssa_13 ssa_10 ssa_14 ssa_12 ssa_11 ssa_15 ssa_16_return ssa_9_LocVarAssigCall ssa_9_OldVarAssigCall ssa_9_GlobVarAssigCall) ssa_17 (and ssa_25_return ssa_20 ssa_18_LocVarAssigCall ssa_19 ssa_18_GlobVarAssigCall ssa_22 ssa_21 ssa_23 ssa_18_OldVarAssigCall ssa_24) ssa_26 ssa_27 ssa_28 (and ssa_29_OldVarAssigCall ssa_31 ssa_34 ssa_29_GlobVarAssigCall ssa_32 ssa_29_LocVarAssigCall ssa_30 ssa_36_return ssa_33 ssa_35) ssa_37 ssa_38 (and ssa_39 ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-2| () (Array Int (Array Int Int)))
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#0)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (= (select |#valid_-2| 1) 1) (= (select |#valid_-2| 2) 1) (< 0 |#StackHeapBarrier_-1|) (= (select |#valid_-2| 0) 0) (= (select |#length_-2| 1) 2) (= (select (select |#memory_int#0_-2| 1) 1) 0) (= (select |#length_-2| 2) 10) (= (select (select |#memory_int#0_-2| 1) 0) 48)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! true :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |main_~#x~0.offset_-2| () Int)
(declare-fun |main_~#x~0.base_-2| () Int)
(declare-fun |main_~#x~0.offset_-1| () Int)
(declare-fun |sep_#in~x.offset_-1| () Int)
(declare-fun |sep_#in~x.base_-1| () Int)
(declare-fun |main_~#x~0.base_-1| () Int)
(declare-fun sep_~i~0_0 () Int)
(declare-fun sep_~x.offset_0 () Int)
(declare-fun sep_~x.base_0 () Int)
(declare-fun sep_~ret~0_0 () Int)
(declare-fun |sep_#t~mem1_1| () Int)
(declare-fun |sep_#t~mem1_2| () Int)
(declare-fun sep_~ret~0_2 () Int)
(declare-fun |v_sep_#t~post2_6_fresh_1| () Int)
(declare-fun sep_~i~0_3 () Int)
(declare-fun |sep_#t~post4_3| () Int)
(declare-fun sep_~i~0_4 () Int)
(declare-fun sep_~i~0_5 () Int)
(declare-fun |sep_#res_5| () Int)
(declare-fun sep_~ret~0_5 () Int)
(declare-fun |main_#t~ret7_6| () Int)
(declare-fun |sep_#res_6| () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= sep_~ret~0_0 0) (= sep_~i~0_0 0) (= |sep_#in~x.base_-1| sep_~x.base_0) (= |sep_#in~x.offset_-1| sep_~x.offset_0)) :named ssa_0))
(assert (! (and (< sep_~i~0_0 20) (= (select (select |#memory_int#1_-2| sep_~x.base_0) (+ sep_~x.offset_0 (* sep_~i~0_0 4))) |sep_#t~mem1_1|)) :named ssa_1))
(assert (! (and (= (+ |v_sep_#t~post2_6_fresh_1| 1) sep_~ret~0_2) (= (ite (and (< |sep_#t~mem1_1| 0) (not (= (mod |sep_#t~mem1_1| 2) 0))) (+ (mod |sep_#t~mem1_1| 2) (- 2)) (mod |sep_#t~mem1_1| 2)) 0) (= sep_~ret~0_0 |v_sep_#t~post2_6_fresh_1|)) :named ssa_2))
(assert (! (= (+ sep_~i~0_0 1) sep_~i~0_3) :named ssa_3))
(assert (! (<= 20 sep_~i~0_3) :named ssa_4))
(assert (! (= (ite (<= (mod sep_~ret~0_2 4294967296) 2147483647) (mod sep_~ret~0_2 4294967296) (+ (- 4294967296) (mod sep_~ret~0_2 4294967296))) |sep_#res_5|) :named ssa_5))
(assert (! (= |sep_#res_5| |main_#t~ret7_6|) :named ssa_6_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (and (= |main_~#x~0.offset_-2| |sep_#in~x.offset_-1|) (= |sep_#in~x.base_-1| |main_~#x~0.base_-2|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 ssa_3 ssa_4 ssa_5 (and ssa_-2_PendingContext ssa_6_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |main_~#x~0.offset_-2| () Int)
(declare-fun |main_~#x~0.base_-2| () Int)
(declare-fun |main_~#x~0.offset_-1| () Int)
(declare-fun |sep_#in~x.offset_-1| () Int)
(declare-fun |sep_#in~x.base_-1| () Int)
(declare-fun |main_~#x~0.base_-1| () Int)
(declare-fun sep_~i~0_0 () Int)
(declare-fun sep_~x.offset_0 () Int)
(declare-fun sep_~x.base_0 () Int)
(declare-fun sep_~ret~0_0 () Int)
(declare-fun |sep_#t~mem1_1| () Int)
(declare-fun |sep_#t~mem1_2| () Int)
(declare-fun sep_~ret~0_2 () Int)
(declare-fun |v_sep_#t~post2_7_fresh_1| () Int)
(declare-fun sep_~i~0_3 () Int)
(declare-fun |sep_#t~post4_3| () Int)
(declare-fun sep_~i~0_4 () Int)
(declare-fun sep_~i~0_5 () Int)
(declare-fun |sep_#res_5| () Int)
(declare-fun sep_~ret~0_5 () Int)
(declare-fun |sep_#res_6| () Int)
(declare-fun |main_#t~ret10_6| () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= sep_~ret~0_0 0) (= sep_~i~0_0 0) (= |sep_#in~x.base_-1| sep_~x.base_0) (= |sep_#in~x.offset_-1| sep_~x.offset_0)) :named ssa_0))
(assert (! (and (< sep_~i~0_0 20) (= (select (select |#memory_int#1_-2| sep_~x.base_0) (+ sep_~x.offset_0 (* sep_~i~0_0 4))) |sep_#t~mem1_1|)) :named ssa_1))
(assert (! (and (= (ite (and (< |sep_#t~mem1_1| 0) (not (= (mod |sep_#t~mem1_1| 2) 0))) (+ (mod |sep_#t~mem1_1| 2) (- 2)) (mod |sep_#t~mem1_1| 2)) 0) (= sep_~ret~0_0 |v_sep_#t~post2_7_fresh_1|) (= (+ |v_sep_#t~post2_7_fresh_1| 1) sep_~ret~0_2)) :named ssa_2))
(assert (! (= (+ sep_~i~0_0 1) sep_~i~0_3) :named ssa_3))
(assert (! (<= 20 sep_~i~0_3) :named ssa_4))
(assert (! (= (ite (<= (mod sep_~ret~0_2 4294967296) 2147483647) (mod sep_~ret~0_2 4294967296) (+ (- 4294967296) (mod sep_~ret~0_2 4294967296))) |sep_#res_5|) :named ssa_5))
(assert (! (= |sep_#res_5| |main_#t~ret10_6|) :named ssa_6_return))
(assert (! false :named ssa_-2_PendingContext))
(assert (! (and (= |sep_#in~x.base_-1| |main_~#x~0.base_-2|) (= |main_~#x~0.offset_-2| |sep_#in~x.offset_-1|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 ssa_3 ssa_4 ssa_5 (and ssa_-2_PendingContext ssa_6_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |main_~#x~0.offset_-2| () Int)
(declare-fun |main_~#x~0.base_-2| () Int)
(declare-fun |main_~#x~0.offset_-1| () Int)
(declare-fun |sep_#in~x.offset_-1| () Int)
(declare-fun |sep_#in~x.base_-1| () Int)
(declare-fun |main_~#x~0.base_-1| () Int)
(declare-fun sep_~i~0_0 () Int)
(declare-fun sep_~x.offset_0 () Int)
(declare-fun sep_~x.base_0 () Int)
(declare-fun sep_~ret~0_0 () Int)
(declare-fun |sep_#t~mem1_1| () Int)
(declare-fun |sep_#t~mem1_2| () Int)
(declare-fun sep_~ret~0_2 () Int)
(declare-fun |v_sep_#t~post2_8_fresh_1| () Int)
(declare-fun sep_~i~0_3 () Int)
(declare-fun |sep_#t~post4_3| () Int)
(declare-fun sep_~i~0_4 () Int)
(declare-fun sep_~i~0_5 () Int)
(declare-fun |sep_#res_5| () Int)
(declare-fun sep_~ret~0_5 () Int)
(declare-fun |main_#t~ret14_6| () Int)
(declare-fun |sep_#res_6| () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= sep_~ret~0_0 0) (= sep_~i~0_0 0) (= |sep_#in~x.base_-1| sep_~x.base_0) (= |sep_#in~x.offset_-1| sep_~x.offset_0)) :named ssa_0))
(assert (! (and (< sep_~i~0_0 20) (= (select (select |#memory_int#1_-2| sep_~x.base_0) (+ sep_~x.offset_0 (* sep_~i~0_0 4))) |sep_#t~mem1_1|)) :named ssa_1))
(assert (! (and (= (ite (and (< |sep_#t~mem1_1| 0) (not (= (mod |sep_#t~mem1_1| 2) 0))) (+ (mod |sep_#t~mem1_1| 2) (- 2)) (mod |sep_#t~mem1_1| 2)) 0) (= sep_~ret~0_2 (+ |v_sep_#t~post2_8_fresh_1| 1)) (= sep_~ret~0_0 |v_sep_#t~post2_8_fresh_1|)) :named ssa_2))
(assert (! (= (+ sep_~i~0_0 1) sep_~i~0_3) :named ssa_3))
(assert (! (<= 20 sep_~i~0_3) :named ssa_4))
(assert (! (= (ite (<= (mod sep_~ret~0_2 4294967296) 2147483647) (mod sep_~ret~0_2 4294967296) (+ (- 4294967296) (mod sep_~ret~0_2 4294967296))) |sep_#res_5|) :named ssa_5))
(assert (! (= |sep_#res_5| |main_#t~ret14_6|) :named ssa_6_return))
(assert (! false :named ssa_-2_PendingContext))
(assert (! (and (= |main_~#x~0.offset_-2| |sep_#in~x.offset_-1|) (= |sep_#in~x.base_-1| |main_~#x~0.base_-2|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 ssa_3 ssa_4 ssa_5 (and ssa_-2_PendingContext ssa_6_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(exit)
