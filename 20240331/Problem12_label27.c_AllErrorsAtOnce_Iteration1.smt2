(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-30T23:56:28+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id Problem12_label27.c_AllErrorsAtOnce_Iteration1)
(declare-fun |c_old(~inputC~0)| () Int)
(declare-fun |c_old(~inputC~0)_primed| () Int)
(declare-fun c_~inputC~0 () Int)
(declare-fun c_~inputC~0_primed () Int)
(declare-fun |c_old(~inputF~0)| () Int)
(declare-fun |c_old(~inputF~0)_primed| () Int)
(declare-fun c_~inputF~0 () Int)
(declare-fun c_~inputF~0_primed () Int)
(declare-fun |c_old(~inputA~0)| () Int)
(declare-fun |c_old(~inputA~0)_primed| () Int)
(declare-fun c_~inputA~0 () Int)
(declare-fun c_~inputA~0_primed () Int)
(declare-fun |c_old(~inputB~0)| () Int)
(declare-fun |c_old(~inputB~0)_primed| () Int)
(declare-fun c_~inputB~0 () Int)
(declare-fun c_~inputB~0_primed () Int)
(declare-fun |c_old(~inputD~0)| () Int)
(declare-fun |c_old(~inputD~0)_primed| () Int)
(declare-fun c_~inputD~0 () Int)
(declare-fun c_~inputD~0_primed () Int)
(declare-fun |c_old(~inputE~0)| () Int)
(declare-fun |c_old(~inputE~0)_primed| () Int)
(declare-fun c_~inputE~0 () Int)
(declare-fun c_~inputE~0_primed () Int)
(declare-fun |c_old(~a17~0)| () Int)
(declare-fun |c_old(~a17~0)_primed| () Int)
(declare-fun c_~a17~0 () Int)
(declare-fun c_~a17~0_primed () Int)
(declare-fun |c_old(~a5~0)| () Int)
(declare-fun |c_old(~a5~0)_primed| () Int)
(declare-fun c_~a5~0 () Int)
(declare-fun c_~a5~0_primed () Int)
(declare-fun |c_old(~a24~0)| () Int)
(declare-fun |c_old(~a24~0)_primed| () Int)
(declare-fun c_~a24~0 () Int)
(declare-fun c_~a24~0_primed () Int)
(declare-fun |c_old(~a2~0)| () Int)
(declare-fun |c_old(~a2~0)_primed| () Int)
(declare-fun c_~a2~0 () Int)
(declare-fun c_~a2~0_primed () Int)
(declare-fun |c_old(~a7~0)| () Int)
(declare-fun |c_old(~a7~0)_primed| () Int)
(declare-fun c_~a7~0 () Int)
(declare-fun c_~a7~0_primed () Int)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~nondet12| () Int)
(declare-fun |c_main_#t~nondet12_primed| () Int)
(declare-fun |c_main_#t~ret13| () Int)
(declare-fun |c_main_#t~ret13_primed| () Int)
(declare-fun c_main_~input~0 () Int)
(declare-fun c_main_~input~0_primed () Int)
(declare-fun c_main_~output~0 () Int)
(declare-fun c_main_~output~0_primed () Int)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_exit_#in~8| () Int)
(declare-fun |c_exit_#in~8_primed| () Int)
(declare-fun |c_calculate_output4_#in~input| () Int)
(declare-fun |c_calculate_output4_#in~input_primed| () Int)
(declare-fun |c_calculate_output4_#res| () Int)
(declare-fun |c_calculate_output4_#res_primed| () Int)
(declare-fun c_calculate_output4_~input () Int)
(declare-fun c_calculate_output4_~input_primed () Int)
(declare-fun |c_calculate_output3_#in~input| () Int)
(declare-fun |c_calculate_output3_#in~input_primed| () Int)
(declare-fun |c_calculate_output3_#res| () Int)
(declare-fun |c_calculate_output3_#res_primed| () Int)
(declare-fun |c_calculate_output3_#t~ret11| () Int)
(declare-fun |c_calculate_output3_#t~ret11_primed| () Int)
(declare-fun c_calculate_output3_~input () Int)
(declare-fun c_calculate_output3_~input_primed () Int)
(declare-fun |c___VERIFIER_nondet_int_#res| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res_primed| () Int)
(declare-fun |c_calculate_output2_#in~input| () Int)
(declare-fun |c_calculate_output2_#in~input_primed| () Int)
(declare-fun |c_calculate_output2_#res| () Int)
(declare-fun |c_calculate_output2_#res_primed| () Int)
(declare-fun |c_calculate_output2_#t~ret10| () Int)
(declare-fun |c_calculate_output2_#t~ret10_primed| () Int)
(declare-fun c_calculate_output2_~input () Int)
(declare-fun c_calculate_output2_~input_primed () Int)
(declare-fun |c_calculate_output_#in~input| () Int)
(declare-fun |c_calculate_output_#in~input_primed| () Int)
(declare-fun |c_calculate_output_#res| () Int)
(declare-fun |c_calculate_output_#res_primed| () Int)
(declare-fun |c_calculate_output_#t~ret9| () Int)
(declare-fun |c_calculate_output_#t~ret9_primed| () Int)
(declare-fun c_calculate_output_~input () Int)
(declare-fun c_calculate_output_~input_primed () Int)
(declare-fun |c_ULTIMATE.start_#t~ret14| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret14_primed| () Int)
(declare-fun |c___assert_fail_#in~4.base| () Int)
(declare-fun |c___assert_fail_#in~4.base_primed| () Int)
(declare-fun |c___assert_fail_#in~4.offset| () Int)
(declare-fun |c___assert_fail_#in~4.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~5.base| () Int)
(declare-fun |c___assert_fail_#in~5.base_primed| () Int)
(declare-fun |c___assert_fail_#in~5.offset| () Int)
(declare-fun |c___assert_fail_#in~5.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~6| () Int)
(declare-fun |c___assert_fail_#in~6_primed| () Int)
(declare-fun |c___assert_fail_#in~7.base| () Int)
(declare-fun |c___assert_fail_#in~7.base_primed| () Int)
(declare-fun |c___assert_fail_#in~7.offset| () Int)
(declare-fun |c___assert_fail_#in~7.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun c_aux_v_main_~output~0_3 () Int)
(declare-fun c_aux_v_main_~output~0_4 () Int)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret14_3| () Int)
(echo "starting trace check")
(push 1)
(declare-fun ~inputA~0_-1 () Int)
(declare-fun ~inputB~0_-1 () Int)
(declare-fun ~a17~0_-1 () Int)
(declare-fun ~a2~0_-1 () Int)
(declare-fun ~inputC~0_-1 () Int)
(declare-fun ~inputF~0_-1 () Int)
(declare-fun ~inputD~0_-1 () Int)
(declare-fun ~a24~0_-1 () Int)
(declare-fun ~inputE~0_-1 () Int)
(declare-fun ~a5~0_-1 () Int)
(declare-fun ~a7~0_-1 () Int)
(declare-fun |old(~inputA~0)_-1| () Int)
(declare-fun |old(~inputB~0)_-1| () Int)
(declare-fun |old(~a17~0)_-1| () Int)
(declare-fun |old(~a2~0)_-1| () Int)
(declare-fun |old(~inputC~0)_-1| () Int)
(declare-fun |old(~inputF~0)_-1| () Int)
(declare-fun |old(~inputD~0)_-1| () Int)
(declare-fun |old(~a24~0)_-1| () Int)
(declare-fun |old(~inputE~0)_-1| () Int)
(declare-fun |old(~a5~0)_-1| () Int)
(declare-fun |old(~a7~0)_-1| () Int)
(declare-fun |old(~inputA~0)_0| () Int)
(declare-fun |old(~inputB~0)_0| () Int)
(declare-fun |old(~a17~0)_0| () Int)
(declare-fun |old(~a2~0)_0| () Int)
(declare-fun |old(~inputC~0)_0| () Int)
(declare-fun |old(~inputF~0)_0| () Int)
(declare-fun |old(~inputD~0)_0| () Int)
(declare-fun |old(~inputE~0)_0| () Int)
(declare-fun |old(~a24~0)_0| () Int)
(declare-fun |old(~a5~0)_0| () Int)
(declare-fun |old(~a7~0)_0| () Int)
(declare-fun ~inputA~0_0 () Int)
(declare-fun ~inputB~0_0 () Int)
(declare-fun ~a17~0_0 () Int)
(declare-fun ~a2~0_0 () Int)
(declare-fun ~inputC~0_0 () Int)
(declare-fun ~inputF~0_0 () Int)
(declare-fun ~inputD~0_0 () Int)
(declare-fun ~inputE~0_0 () Int)
(declare-fun ~a24~0_0 () Int)
(declare-fun ~a5~0_0 () Int)
(declare-fun ~a7~0_0 () Int)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun ~inputA~0_1 () Int)
(declare-fun ~a17~0_1 () Int)
(declare-fun ~inputB~0_1 () Int)
(declare-fun ~a2~0_1 () Int)
(declare-fun ~inputC~0_1 () Int)
(declare-fun ~inputF~0_1 () Int)
(declare-fun ~inputE~0_1 () Int)
(declare-fun ~inputD~0_1 () Int)
(declare-fun ~a24~0_1 () Int)
(declare-fun ~a5~0_1 () Int)
(declare-fun ~a7~0_1 () Int)
(declare-fun |old(~a17~0)_3| () Int)
(declare-fun |old(~a2~0)_3| () Int)
(declare-fun |old(~a24~0)_3| () Int)
(declare-fun |old(~a5~0)_3| () Int)
(declare-fun |old(~a7~0)_3| () Int)
(declare-fun ~a17~0_3 () Int)
(declare-fun ~a2~0_3 () Int)
(declare-fun ~a24~0_3 () Int)
(declare-fun ~a5~0_3 () Int)
(declare-fun ~a7~0_3 () Int)
(declare-fun v_main_~output~0_5_fresh_1 () Int)
(declare-fun main_~input~0_5 () Int)
(declare-fun |main_#t~nondet12_5| () Int)
(declare-fun |old(~a17~0)_7| () Int)
(declare-fun |old(~a2~0)_7| () Int)
(declare-fun |old(~a24~0)_7| () Int)
(declare-fun |old(~a5~0)_7| () Int)
(declare-fun |old(~a7~0)_7| () Int)
(declare-fun ~a17~0_7 () Int)
(declare-fun ~a2~0_7 () Int)
(declare-fun ~a24~0_7 () Int)
(declare-fun ~a5~0_7 () Int)
(declare-fun ~a7~0_7 () Int)
(declare-fun main_~input~0_7 () Int)
(declare-fun |calculate_output_#in~input_7| () Int)
(declare-fun calculate_output_~input_8 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= |old(~a24~0)_0| ~a24~0_0) (= ~inputA~0_0 |old(~inputA~0)_0|) (= |old(~a7~0)_0| ~a7~0_0) (= |old(~inputE~0)_0| ~inputE~0_0) (= ~inputC~0_0 |old(~inputC~0)_0|) (= ~inputF~0_0 |old(~inputF~0)_0|) (= |old(~a2~0)_0| ~a2~0_0) (= |old(~inputD~0)_0| ~inputD~0_0) (= ~inputB~0_0 |old(~inputB~0)_0|) (= |old(~a5~0)_0| ~a5~0_0) (= ~a17~0_0 |old(~a17~0)_0|)) :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! (and (= ~a2~0_-1 |old(~a2~0)_0|) (= ~a7~0_-1 |old(~a7~0)_0|) (= |old(~a17~0)_0| ~a17~0_-1) (= ~inputE~0_-1 |old(~inputE~0)_0|) (= ~inputB~0_-1 |old(~inputB~0)_0|) (= ~inputD~0_-1 |old(~inputD~0)_0|) (= |old(~a24~0)_0| ~a24~0_-1) (= ~inputF~0_-1 |old(~inputF~0)_0|) (= ~inputA~0_-1 |old(~inputA~0)_0|) (= ~a5~0_-1 |old(~a5~0)_0|) (= ~inputC~0_-1 |old(~inputC~0)_0|)) :named ssa_0_OldVarAssigCall))
(assert (! (and (= 6 ~inputF~0_1) (= 0 (+ ~a17~0_1 124)) (< 0 |#StackHeapBarrier_-1|) (= 3 ~inputC~0_1) (= 12 (select |#length_-1| 3)) (= 20 (select |#length_-1| 2)) (= 170 ~a2~0_1) (= ~a5~0_1 4) (= ~inputA~0_1 1) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= ~a24~0_1 15) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= 4 ~inputD~0_1) (= ~a7~0_1 13) (= 2 ~inputB~0_1) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0) (= 5 ~inputE~0_1)) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! (and (= |old(~a24~0)_3| ~a24~0_3) (= |old(~a7~0)_3| ~a7~0_3) (= |old(~a2~0)_3| ~a2~0_3) (= |old(~a5~0)_3| ~a5~0_3) (= ~a17~0_3 |old(~a17~0)_3|)) :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! (and (= ~a2~0_1 |old(~a2~0)_3|) (= ~a7~0_1 |old(~a7~0)_3|) (= |old(~a17~0)_3| ~a17~0_1) (= |old(~a24~0)_3| ~a24~0_1) (= ~a5~0_1 |old(~a5~0)_3|)) :named ssa_3_OldVarAssigCall))
(assert (! (= (+ v_main_~output~0_5_fresh_1 1) 0) :named ssa_4))
(assert (! (and (<= main_~input~0_5 2147483647) (<= 0 (+ main_~input~0_5 2147483648))) :named ssa_5))
(assert (! (or (= main_~input~0_5 6) (= main_~input~0_5 1) (= main_~input~0_5 3) (= main_~input~0_5 4) (= main_~input~0_5 2) (= main_~input~0_5 5)) :named ssa_6))
(assert (! (and (= |old(~a24~0)_7| ~a24~0_7) (= |old(~a7~0)_7| ~a7~0_7) (= |old(~a2~0)_7| ~a2~0_7) (= |old(~a5~0)_7| ~a5~0_7) (= ~a17~0_7 |old(~a17~0)_7|)) :named ssa_7_GlobVarAssigCall))
(assert (! (= main_~input~0_5 |calculate_output_#in~input_7|) :named ssa_7_LocVarAssigCall))
(assert (! (and (= ~a2~0_3 |old(~a2~0)_7|) (= ~a7~0_3 |old(~a7~0)_7|) (= |old(~a17~0)_7| ~a17~0_3) (= |old(~a24~0)_7| ~a24~0_3) (= ~a5~0_3 |old(~a5~0)_7|)) :named ssa_7_OldVarAssigCall))
(assert (! (= |calculate_output_#in~input_7| calculate_output_~input_8) :named ssa_8))
(assert (! false :named ssa_9))
(assert (! (or (not (= ~a5~0_7 4)) (not (= ~a7~0_7 12)) (< 189 ~a2~0_7) (not (= ~a24~0_7 13)) (< 0 (+ ~a17~0_7 108))) :named ssa_10))
(assert (! (or (not (= ~a5~0_7 4)) (< 255 ~a17~0_7) (not (= 14 ~a24~0_7)) (<= ~a17~0_7 111) (not (= ~a7~0_7 14)) (< 189 ~a2~0_7)) :named ssa_11))
(assert (! (or (not (= ~a7~0_7 14)) (< 189 ~a2~0_7) (< 111 ~a17~0_7) (<= (+ ~a17~0_7 108) 0) (not (= ~a24~0_7 13)) (not (= ~a5~0_7 4))) :named ssa_12))
(assert (! (or (not (= ~a7~0_7 13)) (not (= 14 ~a24~0_7)) (not (= ~a5~0_7 4)) (< 0 (+ ~a17~0_7 108)) (< 189 ~a2~0_7)) :named ssa_13))
(assert (! (or (not (= 14 ~a24~0_7)) (< 111 ~a17~0_7) (<= (+ ~a17~0_7 108) 0) (not (= ~a7~0_7 13)) (not (= ~a5~0_7 4)) (< 189 ~a2~0_7)) :named ssa_14))
(assert (! false :named ssa_15))
(assert (! (or (not (= ~a7~0_7 14)) (< 0 (+ ~a17~0_7 108)) (not (= ~a5~0_7 4)) (< 189 ~a2~0_7) (not (= ~a24~0_7 13))) :named ssa_16))
(assert (! (or (not (= 14 ~a24~0_7)) (< 189 ~a2~0_7) (not (= 3 ~a5~0_7)) (< 255 ~a17~0_7) (<= ~a17~0_7 111) (not (= ~a7~0_7 14))) :named ssa_17))
(assert (! (or (not (= ~a7~0_7 13)) (not (= 3 ~a5~0_7)) (< 189 ~a2~0_7) (< 0 (+ ~a17~0_7 108)) (not (= ~a24~0_7 13))) :named ssa_18))
(assert (! false :named ssa_19))
(assert (! (or (not (= ~a7~0_7 14)) (not (= 3 ~a5~0_7)) (< 0 (+ ~a17~0_7 108)) (< 189 ~a2~0_7) (not (= ~a24~0_7 15))) :named ssa_20))
(assert (! false :named ssa_21))
(assert (! (or (< 189 ~a2~0_7) (not (= ~a7~0_7 13)) (< 111 ~a17~0_7) (not (= ~a24~0_7 13)) (<= (+ ~a17~0_7 108) 0) (not (= 3 ~a5~0_7))) :named ssa_22))
(assert (! (or (< 189 ~a2~0_7) (not (= ~a24~0_7 15)) (<= (+ ~a17~0_7 108) 0) (not (= ~a7~0_7 14)) (not (= 3 ~a5~0_7)) (< 111 ~a17~0_7)) :named ssa_23))
(assert (! false :named ssa_24))
(assert (! false :named ssa_25))
(assert (! (or (not (= ~a24~0_7 13)) (not (= ~a7~0_7 13)) (< 255 ~a17~0_7) (not (= 3 ~a5~0_7)) (<= ~a17~0_7 111) (< 189 ~a2~0_7)) :named ssa_26))
(assert (! false :named ssa_27))
(assert (! (or (not (= ~a7~0_7 13)) (< 255 ~a17~0_7) (not (= 3 ~a5~0_7)) (< 189 ~a2~0_7) (not (= ~a24~0_7 15)) (<= ~a17~0_7 111)) :named ssa_28))
(assert (! (or (< 255 ~a17~0_7) (< 189 ~a2~0_7) (not (= ~a7~0_7 13)) (not (= ~a24~0_7 13)) (not (= ~a5~0_7 4)) (<= ~a17~0_7 111)) :named ssa_29))
(assert (! (or (not (= ~a7~0_7 14)) (< 189 ~a2~0_7) (not (= 3 ~a5~0_7)) (<= ~a17~0_7 255) (not (= ~a24~0_7 13))) :named ssa_30))
(assert (! false :named ssa_31))
(assert (! (or (< 189 ~a2~0_7) (not (= ~a24~0_7 13)) (not (= 3 ~a5~0_7)) (not (= ~a7~0_7 12)) (<= ~a17~0_7 255)) :named ssa_32))
(assert (! (or (not (= ~a5~0_7 4)) (< 111 ~a17~0_7) (not (= ~a7~0_7 14)) (< 189 ~a2~0_7) (<= (+ ~a17~0_7 108) 0) (not (= 14 ~a24~0_7))) :named ssa_33))
(assert (! (and (= ~a24~0_7 15) (<= ~a2~0_7 189) (= 3 ~a5~0_7) (< 0 (+ ~a17~0_7 108)) (<= ~a17~0_7 111) (= ~a7~0_7 13)) :named ssa_34))
(assert (! true :named ssa_35))
(check-sat)
(get-interpolants (and ssa_0_LocVarAssigCall ssa_precond ssa_0_GlobVarAssigCall ssa_0_OldVarAssigCall ssa_2_return ssa_1) (and ssa_3_OldVarAssigCall ssa_3_LocVarAssigCall ssa_3_GlobVarAssigCall) ssa_4 ssa_5 ssa_6 (and ssa_7_LocVarAssigCall ssa_7_OldVarAssigCall ssa_7_GlobVarAssigCall) ssa_8 ssa_9 ssa_10 ssa_11 ssa_12 ssa_13 ssa_14 ssa_15 ssa_16 ssa_17 ssa_18 ssa_19 ssa_20 ssa_21 ssa_22 ssa_23 ssa_24 ssa_25 ssa_26 ssa_27 ssa_28 ssa_29 ssa_30 ssa_31 ssa_32 ssa_33 ssa_34 (and ssa_postcond ssa_35))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun ~inputA~0_-2 () Int)
(declare-fun ~inputB~0_-2 () Int)
(declare-fun ~a17~0_-2 () Int)
(declare-fun ~a2~0_-2 () Int)
(declare-fun ~inputC~0_-2 () Int)
(declare-fun ~inputF~0_-2 () Int)
(declare-fun ~inputD~0_-2 () Int)
(declare-fun ~a24~0_-2 () Int)
(declare-fun ~inputE~0_-2 () Int)
(declare-fun ~a5~0_-2 () Int)
(declare-fun ~a7~0_-2 () Int)
(declare-fun |old(~inputA~0)_-2| () Int)
(declare-fun |old(~inputB~0)_-2| () Int)
(declare-fun |old(~a17~0)_-2| () Int)
(declare-fun |old(~a2~0)_-2| () Int)
(declare-fun |old(~inputC~0)_-2| () Int)
(declare-fun |old(~inputF~0)_-2| () Int)
(declare-fun |old(~inputD~0)_-2| () Int)
(declare-fun |old(~a24~0)_-2| () Int)
(declare-fun |old(~inputE~0)_-2| () Int)
(declare-fun |old(~a5~0)_-2| () Int)
(declare-fun |old(~a7~0)_-2| () Int)
(declare-fun |old(~inputA~0)_-1| () Int)
(declare-fun |old(~inputB~0)_-1| () Int)
(declare-fun |old(~a17~0)_-1| () Int)
(declare-fun |old(~a2~0)_-1| () Int)
(declare-fun |old(~inputC~0)_-1| () Int)
(declare-fun |old(~inputF~0)_-1| () Int)
(declare-fun |old(~inputD~0)_-1| () Int)
(declare-fun |old(~inputE~0)_-1| () Int)
(declare-fun |old(~a24~0)_-1| () Int)
(declare-fun |old(~a5~0)_-1| () Int)
(declare-fun |old(~a7~0)_-1| () Int)
(declare-fun ~inputA~0_-1 () Int)
(declare-fun ~inputB~0_-1 () Int)
(declare-fun ~a17~0_-1 () Int)
(declare-fun ~a2~0_-1 () Int)
(declare-fun ~inputC~0_-1 () Int)
(declare-fun ~inputF~0_-1 () Int)
(declare-fun ~inputD~0_-1 () Int)
(declare-fun ~a24~0_-1 () Int)
(declare-fun ~inputE~0_-1 () Int)
(declare-fun ~a5~0_-1 () Int)
(declare-fun ~a7~0_-1 () Int)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun ~inputA~0_0 () Int)
(declare-fun ~a17~0_0 () Int)
(declare-fun ~inputB~0_0 () Int)
(declare-fun ~a2~0_0 () Int)
(declare-fun ~inputC~0_0 () Int)
(declare-fun ~inputF~0_0 () Int)
(declare-fun ~inputE~0_0 () Int)
(declare-fun ~inputD~0_0 () Int)
(declare-fun ~a24~0_0 () Int)
(declare-fun ~a5~0_0 () Int)
(declare-fun ~a7~0_0 () Int)
(assert (! (and (= ~a2~0_-1 |old(~a2~0)_-1|) (= ~a7~0_-1 |old(~a7~0)_-1|) (= ~inputE~0_-1 |old(~inputE~0)_-1|) (= ~a17~0_-1 |old(~a17~0)_-1|) (= ~inputA~0_-1 |old(~inputA~0)_-1|) (= ~a5~0_-1 |old(~a5~0)_-1|) (= ~inputB~0_-1 |old(~inputB~0)_-1|) (= ~a24~0_-1 |old(~a24~0)_-1|) (= ~inputC~0_-1 |old(~inputC~0)_-1|) (= ~inputD~0_-1 |old(~inputD~0)_-1|) (= ~inputF~0_-1 |old(~inputF~0)_-1|)) :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (= 6 ~inputF~0_0) (= 0 (+ ~a17~0_0 124)) (< 0 |#StackHeapBarrier_-1|) (= 3 ~inputC~0_0) (= 12 (select |#length_-1| 3)) (= 20 (select |#length_-1| 2)) (= 170 ~a2~0_0) (= ~a5~0_0 4) (= ~inputA~0_0 1) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= ~a24~0_0 15) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= 4 ~inputD~0_0) (= ~a7~0_0 13) (= 2 ~inputB~0_0) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0) (= 5 ~inputE~0_0)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! true :named ssa_-2_LocVarAssignPendingContext))
(assert (! (and (= ~a2~0_-2 |old(~a2~0)_-1|) (= ~a7~0_-2 |old(~a7~0)_-1|) (= |old(~a17~0)_-1| ~a17~0_-2) (= ~inputE~0_-2 |old(~inputE~0)_-1|) (= ~inputB~0_-2 |old(~inputB~0)_-1|) (= ~inputD~0_-2 |old(~inputD~0)_-1|) (= |old(~a24~0)_-1| ~a24~0_-2) (= ~inputF~0_-2 |old(~inputF~0)_-1|) (= ~inputA~0_-2 |old(~inputA~0)_-1|) (= ~a5~0_-2 |old(~a5~0)_-1|) (= ~inputC~0_-2 |old(~inputC~0)_-1|)) :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(exit)
