(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-30T23:56:52+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id zonotope_3.c_AllErrorsAtOnce_Iteration9)
(declare-fun ~someBinaryArithmeticFLOAToperation (Real Real) Real)
(declare-fun ~someUnaryFLOAToperation (Real) Real)
(declare-fun ~someBinaryFLOATComparisonOperation (Real Real) Bool)
(declare-fun ~convertINTToFLOAT (Int) Real)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c___VERIFIER_nondet_float_#res| () Real)
(declare-fun |c___VERIFIER_nondet_float_#res_primed| () Real)
(declare-fun |c_f_#in~x| () Real)
(declare-fun |c_f_#in~x_primed| () Real)
(declare-fun |c_f_#res| () Real)
(declare-fun |c_f_#res_primed| () Real)
(declare-fun c_f_~x () Real)
(declare-fun c_f_~x_primed () Real)
(declare-fun |c_g_#in~x| () Real)
(declare-fun |c_g_#in~x_primed| () Real)
(declare-fun |c_g_#res| () Real)
(declare-fun |c_g_#res_primed| () Real)
(declare-fun c_g_~x () Real)
(declare-fun c_g_~x_primed () Real)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_assume_abort_if_not_#in~cond| () Int)
(declare-fun |c_assume_abort_if_not_#in~cond_primed| () Int)
(declare-fun c_assume_abort_if_not_~cond () Int)
(declare-fun c_assume_abort_if_not_~cond_primed () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~ret4| () Real)
(declare-fun |c_main_#t~ret4_primed| () Real)
(declare-fun |c_main_#t~ret5| () Real)
(declare-fun |c_main_#t~ret5_primed| () Real)
(declare-fun |c_main_#t~ret6| () Real)
(declare-fun |c_main_#t~ret6_primed| () Real)
(declare-fun |c_main_#t~ret7| () Real)
(declare-fun |c_main_#t~ret7_primed| () Real)
(declare-fun |c_main_#t~nondet8| () Real)
(declare-fun |c_main_#t~nondet8_primed| () Real)
(declare-fun |c_main_#t~ret9| () Real)
(declare-fun |c_main_#t~ret9_primed| () Real)
(declare-fun |c_main_#t~ret10| () Real)
(declare-fun |c_main_#t~ret10_primed| () Real)
(declare-fun |c_main_#t~ret11| () Real)
(declare-fun |c_main_#t~ret11_primed| () Real)
(declare-fun |c_main_#t~ret12| () Real)
(declare-fun |c_main_#t~ret12_primed| () Real)
(declare-fun |c_main_#t~post13| () Int)
(declare-fun |c_main_#t~post13_primed| () Int)
(declare-fun c_main_~i~0 () Int)
(declare-fun c_main_~i~0_primed () Int)
(declare-fun c_main_~x~0 () Real)
(declare-fun c_main_~x~0_primed () Real)
(declare-fun c_main_~y~0 () Real)
(declare-fun c_main_~y~0_primed () Real)
(declare-fun c_main_~z~0 () Real)
(declare-fun c_main_~z~0_primed () Real)
(declare-fun c_main_~t~0 () Real)
(declare-fun c_main_~t~0_primed () Real)
(declare-fun c_main_~u~0 () Real)
(declare-fun c_main_~u~0_primed () Real)
(declare-fun c_main_~v~0 () Real)
(declare-fun c_main_~v~0_primed () Real)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret14| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret14_primed| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond_primed| () Int)
(declare-fun c___VERIFIER_assert_~cond () Int)
(declare-fun c___VERIFIER_assert_~cond_primed () Int)
(declare-fun |c___assert_fail_#in~0.base| () Int)
(declare-fun |c___assert_fail_#in~0.base_primed| () Int)
(declare-fun |c___assert_fail_#in~0.offset| () Int)
(declare-fun |c___assert_fail_#in~0.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~1.base| () Int)
(declare-fun |c___assert_fail_#in~1.base_primed| () Int)
(declare-fun |c___assert_fail_#in~1.offset| () Int)
(declare-fun |c___assert_fail_#in~1.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~2| () Int)
(declare-fun |c___assert_fail_#in~2_primed| () Int)
(declare-fun |c___assert_fail_#in~3.base| () Int)
(declare-fun |c___assert_fail_#in~3.base_primed| () Int)
(declare-fun |c___assert_fail_#in~3.offset| () Int)
(declare-fun |c___assert_fail_#in~3.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_7 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_8 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_12 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_11 () Bool)
(declare-fun c_aux_v_f_~x_2 () Real)
(declare-fun c_aux_v_g_~x_2 () Real)
(declare-fun c_aux_v_main_~y~0_4 () Real)
(declare-fun c_aux_v_main_~z~0_4 () Real)
(declare-fun |c_aux_v_main_#t~ret12_4| () Real)
(declare-fun c_aux_v_main_~u~0_6 () Real)
(declare-fun c_aux_v_main_~y~0_5 () Real)
(declare-fun c_aux_v_main_~z~0_5 () Real)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret14_3| () Int)
(declare-fun c_aux_v_main_~y~0_6 () Real)
(declare-fun c_aux_v_main_~z~0_6 () Real)
(declare-fun c_aux_v_main_~u~0_7 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_13 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_14 () Bool)
(declare-fun c_aux_v_main_~y~0_7 () Real)
(declare-fun c_aux_v_main_~z~0_7 () Real)
(declare-fun c_aux_v_main_~u~0_8 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_15 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_16 () Bool)
(declare-fun c_aux_v_main_~y~0_8 () Real)
(declare-fun c_aux_v_main_~z~0_8 () Real)
(declare-fun c_aux_v_main_~u~0_9 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_17 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_18 () Bool)
(declare-fun c_aux_v_main_~y~0_9 () Real)
(declare-fun c_aux_v_main_~z~0_9 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_20 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_19 () Bool)
(declare-fun c_aux_v_main_~y~0_10 () Real)
(declare-fun c_aux_v_main_~z~0_10 () Real)
(declare-fun c_aux_v_main_~u~0_10 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_21 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_22 () Bool)
(declare-fun c_aux_v_main_~y~0_11 () Real)
(declare-fun c_aux_v_main_~z~0_11 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_23 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_24 () Bool)
(declare-fun c_aux_v_main_~y~0_12 () Real)
(declare-fun c_aux_v_main_~z~0_12 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_25 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_26 () Bool)
(declare-fun c_aux_v_main_~y~0_13 () Real)
(declare-fun c_aux_v_main_~z~0_13 () Real)
(declare-fun c_aux_v_main_~u~0_11 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_27 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_28 () Bool)
(declare-fun c_aux_v_main_~y~0_14 () Real)
(declare-fun c_aux_v_main_~z~0_14 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_30 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_29 () Bool)
(declare-fun c_aux_v_main_~y~0_15 () Real)
(declare-fun c_aux_v_main_~z~0_15 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_31 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_32 () Bool)
(declare-fun c_aux_v_main_~y~0_16 () Real)
(declare-fun c_aux_v_main_~z~0_16 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_34 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_33 () Bool)
(declare-fun c_aux_v_main_~y~0_17 () Real)
(declare-fun c_aux_v_main_~z~0_17 () Real)
(declare-fun c_aux_v_main_~u~0_12 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_35 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_36 () Bool)
(declare-fun c_aux_v_main_~y~0_18 () Real)
(declare-fun c_aux_v_main_~z~0_18 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_37 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_38 () Bool)
(declare-fun c_aux_v_main_~y~0_19 () Real)
(declare-fun c_aux_v_main_~z~0_19 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_40 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_39 () Bool)
(declare-fun c_aux_v_main_~y~0_20 () Real)
(declare-fun c_aux_v_main_~z~0_20 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_41 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_42 () Bool)
(declare-fun c_aux_v_main_~y~0_21 () Real)
(declare-fun c_aux_v_main_~z~0_21 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_43 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_44 () Bool)
(declare-fun c_aux_v_main_~y~0_22 () Real)
(declare-fun c_aux_v_main_~z~0_22 () Real)
(declare-fun c_aux_v_main_~u~0_13 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_45 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_46 () Bool)
(declare-fun c_aux_v_main_~y~0_23 () Real)
(declare-fun c_aux_v_main_~z~0_23 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_47 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_48 () Bool)
(declare-fun c_aux_v_main_~y~0_24 () Real)
(declare-fun c_aux_v_main_~z~0_24 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_50 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_49 () Bool)
(declare-fun c_aux_v_main_~y~0_25 () Real)
(declare-fun c_aux_v_main_~z~0_25 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_52 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_51 () Bool)
(declare-fun c_aux_v_main_~y~0_26 () Real)
(declare-fun c_aux_v_main_~z~0_26 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_53 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_54 () Bool)
(declare-fun c_aux_v_main_~y~0_27 () Real)
(declare-fun c_aux_v_main_~z~0_27 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_56 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_55 () Bool)
(declare-fun c_aux_v_main_~y~0_28 () Real)
(declare-fun c_aux_v_main_~z~0_28 () Real)
(declare-fun c_aux_v_main_~u~0_14 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_57 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_58 () Bool)
(declare-fun c_aux_v_main_~y~0_29 () Real)
(declare-fun c_aux_v_main_~z~0_29 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_59 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_60 () Bool)
(declare-fun c_aux_v_main_~y~0_30 () Real)
(declare-fun c_aux_v_main_~z~0_30 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_61 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_62 () Bool)
(declare-fun c_aux_v_main_~y~0_31 () Real)
(declare-fun c_aux_v_main_~z~0_31 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_63 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_64 () Bool)
(declare-fun c_aux_v_main_~y~0_32 () Real)
(declare-fun c_aux_v_main_~z~0_32 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_65 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_66 () Bool)
(declare-fun c_aux_v_main_~y~0_33 () Real)
(declare-fun c_aux_v_main_~z~0_33 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_67 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_68 () Bool)
(declare-fun c_aux_v_main_~y~0_34 () Real)
(declare-fun c_aux_v_main_~z~0_34 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_69 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_70 () Bool)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun main_~v~0_4 () Real)
(declare-fun main_~x~0_4 () Real)
(declare-fun main_~z~0_4 () Real)
(declare-fun main_~t~0_4 () Real)
(declare-fun main_~i~0_4 () Int)
(declare-fun main_~y~0_4 () Real)
(declare-fun main_~u~0_4 () Real)
(declare-fun |f_#in~x_5| () Real)
(declare-fun |f_#res_6| () Real)
(declare-fun |main_#t~ret4_7| () Real)
(declare-fun |f_#res_7| () Real)
(declare-fun |main_#t~ret4_8| () Real)
(declare-fun v_main_~y~0_35_fresh_1 () Real)
(declare-fun |g_#in~x_9| () Real)
(declare-fun |g_#res_10| () Real)
(declare-fun |main_#t~ret5_11| () Real)
(declare-fun |g_#res_11| () Real)
(declare-fun |main_#t~ret5_12| () Real)
(declare-fun v_main_~z~0_35_fresh_1 () Real)
(declare-fun |f_#in~x_13| () Real)
(declare-fun |f_#res_14| () Real)
(declare-fun |main_#t~ret6_15| () Real)
(declare-fun |f_#res_15| () Real)
(declare-fun |main_#t~ret6_16| () Real)
(declare-fun v_main_~u~0_15_fresh_1 () Real)
(declare-fun |g_#in~x_17| () Real)
(declare-fun |g_#res_18| () Real)
(declare-fun |main_#t~ret7_19| () Real)
(declare-fun |g_#res_19| () Real)
(declare-fun |main_#t~ret7_20| () Real)
(declare-fun main_~v~0_20 () Real)
(declare-fun main_~i~0_20 () Int)
(declare-fun main_~x~0_21 () Real)
(declare-fun |main_#t~nondet8_21| () Real)
(declare-fun |assume_abort_if_not_#in~cond_22| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_71_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_72_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_23 () Int)
(declare-fun assume_abort_if_not_~cond_24 () Int)
(declare-fun |f_#in~x_27| () Real)
(declare-fun main_~x~0_27 () Real)
(declare-fun |f_#res_28| () Real)
(declare-fun |f_#res_29| () Real)
(declare-fun |main_#t~ret9_29| () Real)
(declare-fun |main_#t~ret9_30| () Real)
(declare-fun v_main_~y~0_36_fresh_1 () Real)
(declare-fun |g_#in~x_31| () Real)
(declare-fun main_~x~0_31 () Real)
(declare-fun |g_#res_32| () Real)
(declare-fun |main_#t~ret10_33| () Real)
(declare-fun |g_#res_33| () Real)
(declare-fun |main_#t~ret10_34| () Real)
(declare-fun v_main_~z~0_36_fresh_1 () Real)
(declare-fun main_~v~0_35 () Real)
(declare-fun |f_#in~x_35| () Real)
(declare-fun |f_#res_36| () Real)
(declare-fun |main_#t~ret11_37| () Real)
(declare-fun |f_#res_37| () Real)
(declare-fun |main_#t~ret11_38| () Real)
(declare-fun main_~u~0_38 () Real)
(declare-fun |g_#in~x_39| () Real)
(declare-fun main_~u~0_39 () Real)
(declare-fun |g_#res_40| () Real)
(declare-fun |g_#res_41| () Real)
(declare-fun main_~v~0_42 () Real)
(declare-fun |main_#t~ret12_42| () Real)
(declare-fun main_~i~0_42 () Int)
(declare-fun |main_#t~post13_42| () Int)
(declare-fun main_~x~0_43 () Real)
(declare-fun |main_#t~nondet8_43| () Real)
(declare-fun |assume_abort_if_not_#in~cond_44| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_74_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_73_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_45 () Int)
(declare-fun assume_abort_if_not_~cond_46 () Int)
(declare-fun |f_#in~x_49| () Real)
(declare-fun main_~x~0_49 () Real)
(declare-fun |f_#res_50| () Real)
(declare-fun |f_#res_51| () Real)
(declare-fun |main_#t~ret9_51| () Real)
(declare-fun |main_#t~ret9_52| () Real)
(declare-fun v_main_~y~0_37_fresh_1 () Real)
(declare-fun |g_#in~x_53| () Real)
(declare-fun main_~x~0_53 () Real)
(declare-fun |g_#res_54| () Real)
(declare-fun |main_#t~ret10_55| () Real)
(declare-fun |g_#res_55| () Real)
(declare-fun |main_#t~ret10_56| () Real)
(declare-fun v_main_~z~0_37_fresh_1 () Real)
(declare-fun main_~v~0_57 () Real)
(declare-fun |f_#in~x_57| () Real)
(declare-fun |f_#res_58| () Real)
(declare-fun |main_#t~ret11_59| () Real)
(declare-fun |f_#res_59| () Real)
(declare-fun |main_#t~ret11_60| () Real)
(declare-fun main_~u~0_60 () Real)
(declare-fun |g_#in~x_61| () Real)
(declare-fun main_~u~0_61 () Real)
(declare-fun |g_#res_62| () Real)
(declare-fun |g_#res_63| () Real)
(declare-fun main_~v~0_64 () Real)
(declare-fun |main_#t~ret12_64| () Real)
(declare-fun main_~i~0_64 () Int)
(declare-fun |main_#t~post13_64| () Int)
(declare-fun main_~x~0_65 () Real)
(declare-fun |main_#t~nondet8_65| () Real)
(declare-fun |assume_abort_if_not_#in~cond_66| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_75_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_76_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_67 () Int)
(declare-fun assume_abort_if_not_~cond_68 () Int)
(declare-fun |f_#in~x_71| () Real)
(declare-fun main_~x~0_71 () Real)
(declare-fun |f_#res_72| () Real)
(declare-fun |f_#res_73| () Real)
(declare-fun |main_#t~ret9_73| () Real)
(declare-fun |main_#t~ret9_74| () Real)
(declare-fun v_main_~y~0_38_fresh_1 () Real)
(declare-fun |g_#in~x_75| () Real)
(declare-fun main_~x~0_75 () Real)
(declare-fun |g_#res_76| () Real)
(declare-fun |main_#t~ret10_77| () Real)
(declare-fun |g_#res_77| () Real)
(declare-fun |main_#t~ret10_78| () Real)
(declare-fun v_main_~z~0_38_fresh_1 () Real)
(declare-fun main_~v~0_79 () Real)
(declare-fun |f_#in~x_79| () Real)
(declare-fun |f_#res_80| () Real)
(declare-fun |main_#t~ret11_81| () Real)
(declare-fun |f_#res_81| () Real)
(declare-fun |main_#t~ret11_82| () Real)
(declare-fun main_~u~0_82 () Real)
(declare-fun |g_#in~x_83| () Real)
(declare-fun main_~u~0_83 () Real)
(declare-fun |g_#res_84| () Real)
(declare-fun |g_#res_85| () Real)
(declare-fun main_~v~0_86 () Real)
(declare-fun |main_#t~ret12_86| () Real)
(declare-fun main_~i~0_86 () Int)
(declare-fun |main_#t~post13_86| () Int)
(declare-fun main_~x~0_87 () Real)
(declare-fun |main_#t~nondet8_87| () Real)
(declare-fun |assume_abort_if_not_#in~cond_88| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_78_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_77_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_89 () Int)
(declare-fun assume_abort_if_not_~cond_90 () Int)
(declare-fun |f_#in~x_93| () Real)
(declare-fun main_~x~0_93 () Real)
(declare-fun |f_#res_94| () Real)
(declare-fun |f_#res_95| () Real)
(declare-fun |main_#t~ret9_95| () Real)
(declare-fun |main_#t~ret9_96| () Real)
(declare-fun v_main_~y~0_39_fresh_1 () Real)
(declare-fun |g_#in~x_97| () Real)
(declare-fun main_~x~0_97 () Real)
(declare-fun |g_#res_98| () Real)
(declare-fun |main_#t~ret10_99| () Real)
(declare-fun |g_#res_99| () Real)
(declare-fun |main_#t~ret10_100| () Real)
(declare-fun v_main_~z~0_39_fresh_1 () Real)
(declare-fun main_~v~0_101 () Real)
(declare-fun |f_#in~x_101| () Real)
(declare-fun |f_#res_102| () Real)
(declare-fun |main_#t~ret11_103| () Real)
(declare-fun |f_#res_103| () Real)
(declare-fun |main_#t~ret11_104| () Real)
(declare-fun main_~u~0_104 () Real)
(declare-fun |g_#in~x_105| () Real)
(declare-fun main_~u~0_105 () Real)
(declare-fun |g_#res_106| () Real)
(declare-fun |g_#res_107| () Real)
(declare-fun main_~v~0_108 () Real)
(declare-fun |main_#t~ret12_108| () Real)
(declare-fun main_~i~0_108 () Int)
(declare-fun |main_#t~post13_108| () Int)
(declare-fun main_~x~0_109 () Real)
(declare-fun |main_#t~nondet8_109| () Real)
(declare-fun |assume_abort_if_not_#in~cond_110| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_79_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_80_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_111 () Int)
(declare-fun assume_abort_if_not_~cond_112 () Int)
(declare-fun |f_#in~x_115| () Real)
(declare-fun main_~x~0_115 () Real)
(declare-fun |f_#res_116| () Real)
(declare-fun |f_#res_117| () Real)
(declare-fun |main_#t~ret9_117| () Real)
(declare-fun |main_#t~ret9_118| () Real)
(declare-fun v_main_~y~0_40_fresh_1 () Real)
(declare-fun |g_#in~x_119| () Real)
(declare-fun main_~x~0_119 () Real)
(declare-fun |g_#res_120| () Real)
(declare-fun |main_#t~ret10_121| () Real)
(declare-fun |g_#res_121| () Real)
(declare-fun |main_#t~ret10_122| () Real)
(declare-fun v_main_~z~0_40_fresh_1 () Real)
(declare-fun main_~v~0_123 () Real)
(declare-fun |f_#in~x_123| () Real)
(declare-fun |f_#res_124| () Real)
(declare-fun |main_#t~ret11_125| () Real)
(declare-fun |f_#res_125| () Real)
(declare-fun |main_#t~ret11_126| () Real)
(declare-fun main_~u~0_126 () Real)
(declare-fun |g_#in~x_127| () Real)
(declare-fun main_~u~0_127 () Real)
(declare-fun |g_#res_128| () Real)
(declare-fun |g_#res_129| () Real)
(declare-fun main_~v~0_130 () Real)
(declare-fun |main_#t~ret12_130| () Real)
(declare-fun main_~i~0_130 () Int)
(declare-fun |main_#t~post13_130| () Int)
(declare-fun main_~x~0_131 () Real)
(declare-fun |main_#t~nondet8_131| () Real)
(declare-fun |assume_abort_if_not_#in~cond_132| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_81_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_82_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_133 () Int)
(declare-fun assume_abort_if_not_~cond_134 () Int)
(declare-fun |f_#in~x_137| () Real)
(declare-fun main_~x~0_137 () Real)
(declare-fun |f_#res_138| () Real)
(declare-fun |f_#res_139| () Real)
(declare-fun |main_#t~ret9_139| () Real)
(declare-fun |main_#t~ret9_140| () Real)
(declare-fun v_main_~y~0_41_fresh_1 () Real)
(declare-fun |g_#in~x_141| () Real)
(declare-fun main_~x~0_141 () Real)
(declare-fun |g_#res_142| () Real)
(declare-fun |main_#t~ret10_143| () Real)
(declare-fun |g_#res_143| () Real)
(declare-fun |main_#t~ret10_144| () Real)
(declare-fun v_main_~z~0_41_fresh_1 () Real)
(declare-fun main_~v~0_145 () Real)
(declare-fun |f_#in~x_145| () Real)
(declare-fun |f_#res_146| () Real)
(declare-fun |main_#t~ret11_147| () Real)
(declare-fun |f_#res_147| () Real)
(declare-fun |main_#t~ret11_148| () Real)
(declare-fun main_~u~0_148 () Real)
(declare-fun |g_#in~x_149| () Real)
(declare-fun main_~u~0_149 () Real)
(declare-fun |g_#res_150| () Real)
(declare-fun |g_#res_151| () Real)
(declare-fun main_~v~0_152 () Real)
(declare-fun |main_#t~ret12_152| () Real)
(declare-fun main_~i~0_152 () Int)
(declare-fun |main_#t~post13_152| () Int)
(declare-fun main_~x~0_153 () Real)
(declare-fun |main_#t~nondet8_153| () Real)
(declare-fun |assume_abort_if_not_#in~cond_154| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_83_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_84_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_155 () Int)
(declare-fun assume_abort_if_not_~cond_156 () Int)
(declare-fun |f_#in~x_159| () Real)
(declare-fun main_~x~0_159 () Real)
(declare-fun |f_#res_160| () Real)
(declare-fun |f_#res_161| () Real)
(declare-fun |main_#t~ret9_161| () Real)
(declare-fun |main_#t~ret9_162| () Real)
(declare-fun v_main_~y~0_42_fresh_1 () Real)
(declare-fun |g_#in~x_163| () Real)
(declare-fun main_~x~0_163 () Real)
(declare-fun |g_#res_164| () Real)
(declare-fun |main_#t~ret10_165| () Real)
(declare-fun |g_#res_165| () Real)
(declare-fun |main_#t~ret10_166| () Real)
(declare-fun v_main_~z~0_42_fresh_1 () Real)
(declare-fun main_~v~0_167 () Real)
(declare-fun |f_#in~x_167| () Real)
(declare-fun |f_#res_168| () Real)
(declare-fun |main_#t~ret11_169| () Real)
(declare-fun |f_#res_169| () Real)
(declare-fun |main_#t~ret11_170| () Real)
(declare-fun main_~u~0_170 () Real)
(declare-fun |g_#in~x_171| () Real)
(declare-fun main_~u~0_171 () Real)
(declare-fun |g_#res_172| () Real)
(declare-fun |g_#res_173| () Real)
(declare-fun main_~v~0_174 () Real)
(declare-fun |main_#t~ret12_174| () Real)
(declare-fun main_~i~0_174 () Int)
(declare-fun |main_#t~post13_174| () Int)
(declare-fun main_~i~0_175 () Int)
(declare-fun main_~t~0_176 () Real)
(declare-fun |__VERIFIER_assert_#in~cond_177| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_85_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_86_fresh_1 () Bool)
(declare-fun __VERIFIER_assert_~cond_178 () Int)
(declare-fun __VERIFIER_assert_~cond_179 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! true :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! true :named ssa_0_OldVarAssigCall))
(assert (! (and (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#length_-1| 2) 13) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! true :named ssa_4))
(assert (! true :named ssa_5_GlobVarAssigCall))
(assert (! (= |f_#in~x_5| 0.0) :named ssa_5_LocVarAssigCall))
(assert (! true :named ssa_5_OldVarAssigCall))
(assert (! true :named ssa_6))
(assert (! (= |main_#t~ret4_7| |f_#res_6|) :named ssa_7_return))
(assert (! (= v_main_~y~0_35_fresh_1 |main_#t~ret4_7|) :named ssa_8))
(assert (! true :named ssa_9_GlobVarAssigCall))
(assert (! (= |g_#in~x_9| 0.0) :named ssa_9_LocVarAssigCall))
(assert (! true :named ssa_9_OldVarAssigCall))
(assert (! true :named ssa_10))
(assert (! (= |main_#t~ret5_11| |g_#res_10|) :named ssa_11_return))
(assert (! (= v_main_~z~0_35_fresh_1 |main_#t~ret5_11|) :named ssa_12))
(assert (! true :named ssa_13_GlobVarAssigCall))
(assert (! (= |f_#in~x_13| (/ 3.0 4.0)) :named ssa_13_LocVarAssigCall))
(assert (! true :named ssa_13_OldVarAssigCall))
(assert (! true :named ssa_14))
(assert (! (= |main_#t~ret6_15| |f_#res_14|) :named ssa_15_return))
(assert (! (= v_main_~u~0_15_fresh_1 |main_#t~ret6_15|) :named ssa_16))
(assert (! true :named ssa_17_GlobVarAssigCall))
(assert (! (= |g_#in~x_17| (/ 1.0 4.0)) :named ssa_17_LocVarAssigCall))
(assert (! true :named ssa_17_OldVarAssigCall))
(assert (! true :named ssa_18))
(assert (! (= |main_#t~ret7_19| |g_#res_18|) :named ssa_19_return))
(assert (! (and (= main_~v~0_20 |main_#t~ret7_19|) (= main_~i~0_20 1)) :named ssa_20))
(assert (! (<= main_~i~0_20 100000) :named ssa_21))
(assert (! true :named ssa_22_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_22| (ite (and v_~someBinaryFLOATComparisonOperation_72_fresh_1 v_~someBinaryFLOATComparisonOperation_71_fresh_1) 1 0)) :named ssa_22_LocVarAssigCall))
(assert (! true :named ssa_22_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_22| assume_abort_if_not_~cond_23) :named ssa_23))
(assert (! (not (= assume_abort_if_not_~cond_23 0)) :named ssa_24))
(assert (! true :named ssa_25))
(assert (! true :named ssa_26_return))
(assert (! true :named ssa_27_GlobVarAssigCall))
(assert (! (= |f_#in~x_27| main_~x~0_21) :named ssa_27_LocVarAssigCall))
(assert (! true :named ssa_27_OldVarAssigCall))
(assert (! true :named ssa_28))
(assert (! (= |main_#t~ret9_29| |f_#res_28|) :named ssa_29_return))
(assert (! (= v_main_~y~0_36_fresh_1 |main_#t~ret9_29|) :named ssa_30))
(assert (! true :named ssa_31_GlobVarAssigCall))
(assert (! (= |g_#in~x_31| main_~x~0_21) :named ssa_31_LocVarAssigCall))
(assert (! true :named ssa_31_OldVarAssigCall))
(assert (! true :named ssa_32))
(assert (! (= |g_#res_32| |main_#t~ret10_33|) :named ssa_33_return))
(assert (! (= v_main_~z~0_36_fresh_1 |main_#t~ret10_33|) :named ssa_34))
(assert (! true :named ssa_35_GlobVarAssigCall))
(assert (! (= |f_#in~x_35| main_~v~0_20) :named ssa_35_LocVarAssigCall))
(assert (! true :named ssa_35_OldVarAssigCall))
(assert (! true :named ssa_36))
(assert (! (= |main_#t~ret11_37| |f_#res_36|) :named ssa_37_return))
(assert (! (= main_~u~0_38 |main_#t~ret11_37|) :named ssa_38))
(assert (! true :named ssa_39_GlobVarAssigCall))
(assert (! (= |g_#in~x_39| main_~u~0_38) :named ssa_39_LocVarAssigCall))
(assert (! true :named ssa_39_OldVarAssigCall))
(assert (! true :named ssa_40))
(assert (! true :named ssa_41_return))
(assert (! (= main_~i~0_42 (+ main_~i~0_20 1)) :named ssa_42))
(assert (! (<= main_~i~0_42 100000) :named ssa_43))
(assert (! true :named ssa_44_GlobVarAssigCall))
(assert (! (= (ite (and v_~someBinaryFLOATComparisonOperation_73_fresh_1 v_~someBinaryFLOATComparisonOperation_74_fresh_1) 1 0) |assume_abort_if_not_#in~cond_44|) :named ssa_44_LocVarAssigCall))
(assert (! true :named ssa_44_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_44| assume_abort_if_not_~cond_45) :named ssa_45))
(assert (! (not (= assume_abort_if_not_~cond_45 0)) :named ssa_46))
(assert (! true :named ssa_47))
(assert (! true :named ssa_48_return))
(assert (! true :named ssa_49_GlobVarAssigCall))
(assert (! (= |f_#in~x_49| main_~x~0_43) :named ssa_49_LocVarAssigCall))
(assert (! true :named ssa_49_OldVarAssigCall))
(assert (! true :named ssa_50))
(assert (! (= |main_#t~ret9_51| |f_#res_50|) :named ssa_51_return))
(assert (! (= v_main_~y~0_37_fresh_1 |main_#t~ret9_51|) :named ssa_52))
(assert (! true :named ssa_53_GlobVarAssigCall))
(assert (! (= |g_#in~x_53| main_~x~0_43) :named ssa_53_LocVarAssigCall))
(assert (! true :named ssa_53_OldVarAssigCall))
(assert (! true :named ssa_54))
(assert (! (= |g_#res_54| |main_#t~ret10_55|) :named ssa_55_return))
(assert (! (= v_main_~z~0_37_fresh_1 |main_#t~ret10_55|) :named ssa_56))
(assert (! true :named ssa_57_GlobVarAssigCall))
(assert (! (= |f_#in~x_57| main_~v~0_42) :named ssa_57_LocVarAssigCall))
(assert (! true :named ssa_57_OldVarAssigCall))
(assert (! true :named ssa_58))
(assert (! (= |main_#t~ret11_59| |f_#res_58|) :named ssa_59_return))
(assert (! (= main_~u~0_60 |main_#t~ret11_59|) :named ssa_60))
(assert (! true :named ssa_61_GlobVarAssigCall))
(assert (! (= |g_#in~x_61| main_~u~0_60) :named ssa_61_LocVarAssigCall))
(assert (! true :named ssa_61_OldVarAssigCall))
(assert (! true :named ssa_62))
(assert (! true :named ssa_63_return))
(assert (! (= main_~i~0_64 (+ main_~i~0_42 1)) :named ssa_64))
(assert (! (<= main_~i~0_64 100000) :named ssa_65))
(assert (! true :named ssa_66_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_66| (ite (and v_~someBinaryFLOATComparisonOperation_76_fresh_1 v_~someBinaryFLOATComparisonOperation_75_fresh_1) 1 0)) :named ssa_66_LocVarAssigCall))
(assert (! true :named ssa_66_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_66| assume_abort_if_not_~cond_67) :named ssa_67))
(assert (! (not (= assume_abort_if_not_~cond_67 0)) :named ssa_68))
(assert (! true :named ssa_69))
(assert (! true :named ssa_70_return))
(assert (! true :named ssa_71_GlobVarAssigCall))
(assert (! (= |f_#in~x_71| main_~x~0_65) :named ssa_71_LocVarAssigCall))
(assert (! true :named ssa_71_OldVarAssigCall))
(assert (! true :named ssa_72))
(assert (! (= |main_#t~ret9_73| |f_#res_72|) :named ssa_73_return))
(assert (! (= v_main_~y~0_38_fresh_1 |main_#t~ret9_73|) :named ssa_74))
(assert (! true :named ssa_75_GlobVarAssigCall))
(assert (! (= |g_#in~x_75| main_~x~0_65) :named ssa_75_LocVarAssigCall))
(assert (! true :named ssa_75_OldVarAssigCall))
(assert (! true :named ssa_76))
(assert (! (= |g_#res_76| |main_#t~ret10_77|) :named ssa_77_return))
(assert (! (= v_main_~z~0_38_fresh_1 |main_#t~ret10_77|) :named ssa_78))
(assert (! true :named ssa_79_GlobVarAssigCall))
(assert (! (= |f_#in~x_79| main_~v~0_64) :named ssa_79_LocVarAssigCall))
(assert (! true :named ssa_79_OldVarAssigCall))
(assert (! true :named ssa_80))
(assert (! (= |main_#t~ret11_81| |f_#res_80|) :named ssa_81_return))
(assert (! (= main_~u~0_82 |main_#t~ret11_81|) :named ssa_82))
(assert (! true :named ssa_83_GlobVarAssigCall))
(assert (! (= |g_#in~x_83| main_~u~0_82) :named ssa_83_LocVarAssigCall))
(assert (! true :named ssa_83_OldVarAssigCall))
(assert (! true :named ssa_84))
(assert (! true :named ssa_85_return))
(assert (! (= main_~i~0_86 (+ main_~i~0_64 1)) :named ssa_86))
(assert (! (<= main_~i~0_86 100000) :named ssa_87))
(assert (! true :named ssa_88_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_88| (ite (and v_~someBinaryFLOATComparisonOperation_77_fresh_1 v_~someBinaryFLOATComparisonOperation_78_fresh_1) 1 0)) :named ssa_88_LocVarAssigCall))
(assert (! true :named ssa_88_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_88| assume_abort_if_not_~cond_89) :named ssa_89))
(assert (! (not (= assume_abort_if_not_~cond_89 0)) :named ssa_90))
(assert (! true :named ssa_91))
(assert (! true :named ssa_92_return))
(assert (! true :named ssa_93_GlobVarAssigCall))
(assert (! (= |f_#in~x_93| main_~x~0_87) :named ssa_93_LocVarAssigCall))
(assert (! true :named ssa_93_OldVarAssigCall))
(assert (! true :named ssa_94))
(assert (! (= |main_#t~ret9_95| |f_#res_94|) :named ssa_95_return))
(assert (! (= v_main_~y~0_39_fresh_1 |main_#t~ret9_95|) :named ssa_96))
(assert (! true :named ssa_97_GlobVarAssigCall))
(assert (! (= |g_#in~x_97| main_~x~0_87) :named ssa_97_LocVarAssigCall))
(assert (! true :named ssa_97_OldVarAssigCall))
(assert (! true :named ssa_98))
(assert (! (= |g_#res_98| |main_#t~ret10_99|) :named ssa_99_return))
(assert (! (= v_main_~z~0_39_fresh_1 |main_#t~ret10_99|) :named ssa_100))
(assert (! true :named ssa_101_GlobVarAssigCall))
(assert (! (= |f_#in~x_101| main_~v~0_86) :named ssa_101_LocVarAssigCall))
(assert (! true :named ssa_101_OldVarAssigCall))
(assert (! true :named ssa_102))
(assert (! (= |main_#t~ret11_103| |f_#res_102|) :named ssa_103_return))
(assert (! (= main_~u~0_104 |main_#t~ret11_103|) :named ssa_104))
(assert (! true :named ssa_105_GlobVarAssigCall))
(assert (! (= |g_#in~x_105| main_~u~0_104) :named ssa_105_LocVarAssigCall))
(assert (! true :named ssa_105_OldVarAssigCall))
(assert (! true :named ssa_106))
(assert (! true :named ssa_107_return))
(assert (! (= main_~i~0_108 (+ main_~i~0_86 1)) :named ssa_108))
(assert (! (<= main_~i~0_108 100000) :named ssa_109))
(assert (! true :named ssa_110_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_110| (ite (and v_~someBinaryFLOATComparisonOperation_79_fresh_1 v_~someBinaryFLOATComparisonOperation_80_fresh_1) 1 0)) :named ssa_110_LocVarAssigCall))
(assert (! true :named ssa_110_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_110| assume_abort_if_not_~cond_111) :named ssa_111))
(assert (! (not (= assume_abort_if_not_~cond_111 0)) :named ssa_112))
(assert (! true :named ssa_113))
(assert (! true :named ssa_114_return))
(assert (! true :named ssa_115_GlobVarAssigCall))
(assert (! (= |f_#in~x_115| main_~x~0_109) :named ssa_115_LocVarAssigCall))
(assert (! true :named ssa_115_OldVarAssigCall))
(assert (! true :named ssa_116))
(assert (! (= |main_#t~ret9_117| |f_#res_116|) :named ssa_117_return))
(assert (! (= v_main_~y~0_40_fresh_1 |main_#t~ret9_117|) :named ssa_118))
(assert (! true :named ssa_119_GlobVarAssigCall))
(assert (! (= |g_#in~x_119| main_~x~0_109) :named ssa_119_LocVarAssigCall))
(assert (! true :named ssa_119_OldVarAssigCall))
(assert (! true :named ssa_120))
(assert (! (= |g_#res_120| |main_#t~ret10_121|) :named ssa_121_return))
(assert (! (= v_main_~z~0_40_fresh_1 |main_#t~ret10_121|) :named ssa_122))
(assert (! true :named ssa_123_GlobVarAssigCall))
(assert (! (= |f_#in~x_123| main_~v~0_108) :named ssa_123_LocVarAssigCall))
(assert (! true :named ssa_123_OldVarAssigCall))
(assert (! true :named ssa_124))
(assert (! (= |main_#t~ret11_125| |f_#res_124|) :named ssa_125_return))
(assert (! (= main_~u~0_126 |main_#t~ret11_125|) :named ssa_126))
(assert (! true :named ssa_127_GlobVarAssigCall))
(assert (! (= |g_#in~x_127| main_~u~0_126) :named ssa_127_LocVarAssigCall))
(assert (! true :named ssa_127_OldVarAssigCall))
(assert (! true :named ssa_128))
(assert (! true :named ssa_129_return))
(assert (! (= main_~i~0_130 (+ main_~i~0_108 1)) :named ssa_130))
(assert (! (<= main_~i~0_130 100000) :named ssa_131))
(assert (! true :named ssa_132_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_132| (ite (and v_~someBinaryFLOATComparisonOperation_81_fresh_1 v_~someBinaryFLOATComparisonOperation_82_fresh_1) 1 0)) :named ssa_132_LocVarAssigCall))
(assert (! true :named ssa_132_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_132| assume_abort_if_not_~cond_133) :named ssa_133))
(assert (! (not (= assume_abort_if_not_~cond_133 0)) :named ssa_134))
(assert (! true :named ssa_135))
(assert (! true :named ssa_136_return))
(assert (! true :named ssa_137_GlobVarAssigCall))
(assert (! (= |f_#in~x_137| main_~x~0_131) :named ssa_137_LocVarAssigCall))
(assert (! true :named ssa_137_OldVarAssigCall))
(assert (! true :named ssa_138))
(assert (! (= |main_#t~ret9_139| |f_#res_138|) :named ssa_139_return))
(assert (! (= v_main_~y~0_41_fresh_1 |main_#t~ret9_139|) :named ssa_140))
(assert (! true :named ssa_141_GlobVarAssigCall))
(assert (! (= |g_#in~x_141| main_~x~0_131) :named ssa_141_LocVarAssigCall))
(assert (! true :named ssa_141_OldVarAssigCall))
(assert (! true :named ssa_142))
(assert (! (= |g_#res_142| |main_#t~ret10_143|) :named ssa_143_return))
(assert (! (= v_main_~z~0_41_fresh_1 |main_#t~ret10_143|) :named ssa_144))
(assert (! true :named ssa_145_GlobVarAssigCall))
(assert (! (= |f_#in~x_145| main_~v~0_130) :named ssa_145_LocVarAssigCall))
(assert (! true :named ssa_145_OldVarAssigCall))
(assert (! true :named ssa_146))
(assert (! (= |main_#t~ret11_147| |f_#res_146|) :named ssa_147_return))
(assert (! (= main_~u~0_148 |main_#t~ret11_147|) :named ssa_148))
(assert (! true :named ssa_149_GlobVarAssigCall))
(assert (! (= |g_#in~x_149| main_~u~0_148) :named ssa_149_LocVarAssigCall))
(assert (! true :named ssa_149_OldVarAssigCall))
(assert (! true :named ssa_150))
(assert (! true :named ssa_151_return))
(assert (! (= main_~i~0_152 (+ main_~i~0_130 1)) :named ssa_152))
(assert (! (<= main_~i~0_152 100000) :named ssa_153))
(assert (! true :named ssa_154_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_154| (ite (and v_~someBinaryFLOATComparisonOperation_83_fresh_1 v_~someBinaryFLOATComparisonOperation_84_fresh_1) 1 0)) :named ssa_154_LocVarAssigCall))
(assert (! true :named ssa_154_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_154| assume_abort_if_not_~cond_155) :named ssa_155))
(assert (! (not (= assume_abort_if_not_~cond_155 0)) :named ssa_156))
(assert (! true :named ssa_157))
(assert (! true :named ssa_158_return))
(assert (! true :named ssa_159_GlobVarAssigCall))
(assert (! (= |f_#in~x_159| main_~x~0_153) :named ssa_159_LocVarAssigCall))
(assert (! true :named ssa_159_OldVarAssigCall))
(assert (! true :named ssa_160))
(assert (! (= |main_#t~ret9_161| |f_#res_160|) :named ssa_161_return))
(assert (! (= v_main_~y~0_42_fresh_1 |main_#t~ret9_161|) :named ssa_162))
(assert (! true :named ssa_163_GlobVarAssigCall))
(assert (! (= |g_#in~x_163| main_~x~0_153) :named ssa_163_LocVarAssigCall))
(assert (! true :named ssa_163_OldVarAssigCall))
(assert (! true :named ssa_164))
(assert (! (= |g_#res_164| |main_#t~ret10_165|) :named ssa_165_return))
(assert (! (= v_main_~z~0_42_fresh_1 |main_#t~ret10_165|) :named ssa_166))
(assert (! true :named ssa_167_GlobVarAssigCall))
(assert (! (= |f_#in~x_167| main_~v~0_152) :named ssa_167_LocVarAssigCall))
(assert (! true :named ssa_167_OldVarAssigCall))
(assert (! true :named ssa_168))
(assert (! (= |main_#t~ret11_169| |f_#res_168|) :named ssa_169_return))
(assert (! (= main_~u~0_170 |main_#t~ret11_169|) :named ssa_170))
(assert (! true :named ssa_171_GlobVarAssigCall))
(assert (! (= |g_#in~x_171| main_~u~0_170) :named ssa_171_LocVarAssigCall))
(assert (! true :named ssa_171_OldVarAssigCall))
(assert (! true :named ssa_172))
(assert (! true :named ssa_173_return))
(assert (! (= main_~i~0_174 (+ main_~i~0_152 1)) :named ssa_174))
(assert (! (< 100000 main_~i~0_174) :named ssa_175))
(assert (! true :named ssa_176))
(assert (! true :named ssa_177_GlobVarAssigCall))
(assert (! (= |__VERIFIER_assert_#in~cond_177| (ite (and v_~someBinaryFLOATComparisonOperation_85_fresh_1 v_~someBinaryFLOATComparisonOperation_86_fresh_1) 1 0)) :named ssa_177_LocVarAssigCall))
(assert (! true :named ssa_177_OldVarAssigCall))
(assert (! (= __VERIFIER_assert_~cond_178 |__VERIFIER_assert_#in~cond_177|) :named ssa_178))
(assert (! (= __VERIFIER_assert_~cond_178 0) :named ssa_179))
(assert (! true :named ssa_180))
(check-sat)
(get-interpolants (and ssa_0_LocVarAssigCall ssa_precond ssa_0_GlobVarAssigCall ssa_0_OldVarAssigCall ssa_2_return ssa_1) (and ssa_3_OldVarAssigCall ssa_3_LocVarAssigCall ssa_3_GlobVarAssigCall) ssa_4 (and ssa_5_LocVarAssigCall ssa_5_GlobVarAssigCall ssa_6 ssa_7_return ssa_5_OldVarAssigCall) ssa_8 (and ssa_11_return ssa_10 ssa_9_LocVarAssigCall ssa_9_OldVarAssigCall ssa_9_GlobVarAssigCall) ssa_12 (and ssa_14 ssa_13_LocVarAssigCall ssa_13_OldVarAssigCall ssa_13_GlobVarAssigCall ssa_15_return) ssa_16 (and ssa_17_LocVarAssigCall ssa_17_GlobVarAssigCall ssa_17_OldVarAssigCall ssa_19_return ssa_18) ssa_20 ssa_21 (and ssa_22_OldVarAssigCall ssa_25 ssa_22_LocVarAssigCall ssa_26_return ssa_22_GlobVarAssigCall ssa_23 ssa_24) (and ssa_27_GlobVarAssigCall ssa_29_return ssa_27_OldVarAssigCall ssa_28 ssa_27_LocVarAssigCall) ssa_30 (and ssa_31_LocVarAssigCall ssa_31_OldVarAssigCall ssa_32 ssa_31_GlobVarAssigCall ssa_33_return) ssa_34 (and ssa_35_LocVarAssigCall ssa_35_GlobVarAssigCall ssa_36 ssa_37_return ssa_35_OldVarAssigCall) ssa_38 (and ssa_40 ssa_39_OldVarAssigCall ssa_39_GlobVarAssigCall ssa_41_return ssa_39_LocVarAssigCall) ssa_42 ssa_43 (and ssa_44_LocVarAssigCall ssa_45 ssa_46 ssa_47 ssa_44_OldVarAssigCall ssa_44_GlobVarAssigCall ssa_48_return) (and ssa_51_return ssa_49_LocVarAssigCall ssa_50 ssa_49_GlobVarAssigCall ssa_49_OldVarAssigCall) ssa_52 (and ssa_55_return ssa_53_GlobVarAssigCall ssa_53_LocVarAssigCall ssa_53_OldVarAssigCall ssa_54) ssa_56 (and ssa_57_OldVarAssigCall ssa_59_return ssa_58 ssa_57_LocVarAssigCall ssa_57_GlobVarAssigCall) ssa_60 (and ssa_63_return ssa_61_OldVarAssigCall ssa_62 ssa_61_LocVarAssigCall ssa_61_GlobVarAssigCall) ssa_64 ssa_65 (and ssa_68 ssa_67 ssa_66_LocVarAssigCall ssa_70_return ssa_66_OldVarAssigCall ssa_69 ssa_66_GlobVarAssigCall) (and ssa_71_LocVarAssigCall ssa_71_OldVarAssigCall ssa_71_GlobVarAssigCall ssa_73_return ssa_72) ssa_74 (and ssa_76 ssa_75_LocVarAssigCall ssa_75_GlobVarAssigCall ssa_75_OldVarAssigCall ssa_77_return) ssa_78 (and ssa_79_LocVarAssigCall ssa_79_OldVarAssigCall ssa_81_return ssa_80 ssa_79_GlobVarAssigCall) ssa_82 (and ssa_84 ssa_83_GlobVarAssigCall ssa_83_OldVarAssigCall ssa_85_return ssa_83_LocVarAssigCall) ssa_86 ssa_87 (and ssa_89 ssa_90 ssa_88_GlobVarAssigCall ssa_92_return ssa_88_LocVarAssigCall ssa_88_OldVarAssigCall ssa_91) (and ssa_93_LocVarAssigCall ssa_95_return ssa_94 ssa_93_GlobVarAssigCall ssa_93_OldVarAssigCall) ssa_96 (and ssa_97_OldVarAssigCall ssa_97_GlobVarAssigCall ssa_97_LocVarAssigCall ssa_98 ssa_99_return) ssa_100 (and ssa_103_return ssa_101_OldVarAssigCall ssa_101_LocVarAssigCall ssa_101_GlobVarAssigCall ssa_102) ssa_104 (and ssa_105_LocVarAssigCall ssa_105_OldVarAssigCall ssa_107_return ssa_105_GlobVarAssigCall ssa_106) ssa_108 ssa_109 (and ssa_111 ssa_113 ssa_110_LocVarAssigCall ssa_110_OldVarAssigCall ssa_110_GlobVarAssigCall ssa_114_return ssa_112) (and ssa_116 ssa_115_GlobVarAssigCall ssa_117_return ssa_115_OldVarAssigCall ssa_115_LocVarAssigCall) ssa_118 (and ssa_119_LocVarAssigCall ssa_120 ssa_121_return ssa_119_OldVarAssigCall ssa_119_GlobVarAssigCall) ssa_122 (and ssa_125_return ssa_123_GlobVarAssigCall ssa_123_OldVarAssigCall ssa_123_LocVarAssigCall ssa_124) ssa_126 (and ssa_129_return ssa_127_LocVarAssigCall ssa_127_OldVarAssigCall ssa_128 ssa_127_GlobVarAssigCall) ssa_130 ssa_131 (and ssa_136_return ssa_134 ssa_132_GlobVarAssigCall ssa_132_LocVarAssigCall ssa_135 ssa_133 ssa_132_OldVarAssigCall) (and ssa_137_GlobVarAssigCall ssa_139_return ssa_137_OldVarAssigCall ssa_137_LocVarAssigCall ssa_138) ssa_140 (and ssa_141_GlobVarAssigCall ssa_142 ssa_143_return ssa_141_LocVarAssigCall ssa_141_OldVarAssigCall) ssa_144 (and ssa_147_return ssa_146 ssa_145_OldVarAssigCall ssa_145_GlobVarAssigCall ssa_145_LocVarAssigCall) ssa_148 (and ssa_150 ssa_149_LocVarAssigCall ssa_151_return ssa_149_OldVarAssigCall ssa_149_GlobVarAssigCall) ssa_152 ssa_153 (and ssa_157 ssa_154_OldVarAssigCall ssa_155 ssa_154_LocVarAssigCall ssa_154_GlobVarAssigCall ssa_158_return ssa_156) (and ssa_159_GlobVarAssigCall ssa_161_return ssa_159_LocVarAssigCall ssa_159_OldVarAssigCall ssa_160) ssa_162 (and ssa_164 ssa_163_OldVarAssigCall ssa_163_LocVarAssigCall ssa_163_GlobVarAssigCall ssa_165_return) ssa_166 (and ssa_169_return ssa_168 ssa_167_OldVarAssigCall ssa_167_GlobVarAssigCall ssa_167_LocVarAssigCall) ssa_170 (and ssa_172 ssa_171_GlobVarAssigCall ssa_171_OldVarAssigCall ssa_171_LocVarAssigCall ssa_173_return) ssa_174 ssa_175 ssa_176 (and ssa_177_OldVarAssigCall ssa_177_GlobVarAssigCall ssa_177_LocVarAssigCall) ssa_178 ssa_179 (and ssa_postcond ssa_180))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#length_-1| 2) 13) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! true :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |main_#t~ret4_1| () Real)
(declare-fun |f_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret4_1| |f_#res_0|) :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| 0.0) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |main_#t~ret5_1| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret5_1| |g_#res_0|) :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| 0.0) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |main_#t~ret6_1| () Real)
(declare-fun |f_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret6_1| |f_#res_0|) :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| (/ 3.0 4.0)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |main_#t~ret7_1| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret7_1| |g_#res_0|) :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| (/ 1.0 4.0)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_7_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_8_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not (= main_~i~0_-2 1)) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (= main_~i~0_-2 1) :named ssa_-2_PendingContext))
(assert (! (= (ite (and v_~someBinaryFLOATComparisonOperation_7_fresh_1 v_~someBinaryFLOATComparisonOperation_8_fresh_1) 1 0) |assume_abort_if_not_#in~cond_-1|) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |f_#res_1| () Real)
(declare-fun |main_#t~ret9_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (= main_~i~0_-2 1)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret9_1| |f_#res_0|) :named ssa_1_return))
(assert (! (= main_~i~0_-2 1) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |main_#t~ret10_1| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (= main_~i~0_-2 1)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |g_#res_0| |main_#t~ret10_1|) :named ssa_1_return))
(assert (! (= main_~i~0_-2 1) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~v~0_-2 () Real)
(declare-fun main_~v~0_-1 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |main_#t~ret11_1| () Real)
(declare-fun |f_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (= main_~i~0_-2 1)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret11_1| |f_#res_0|) :named ssa_1_return))
(assert (! (= main_~i~0_-2 1) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~v~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~u~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~u~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (= main_~i~0_-2 1)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! (= main_~i~0_-2 1) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~u~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_7_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_8_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 2)) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (<= main_~i~0_-2 2) :named ssa_-2_PendingContext))
(assert (! (= (ite (and v_~someBinaryFLOATComparisonOperation_7_fresh_1 v_~someBinaryFLOATComparisonOperation_8_fresh_1) 1 0) |assume_abort_if_not_#in~cond_-1|) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |f_#res_1| () Real)
(declare-fun |main_#t~ret9_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 2)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret9_1| |f_#res_0|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 2) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |main_#t~ret10_1| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 2)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |g_#res_0| |main_#t~ret10_1|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 2) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~v~0_-2 () Real)
(declare-fun main_~v~0_-1 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |main_#t~ret11_1| () Real)
(declare-fun |f_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 2)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret11_1| |f_#res_0|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 2) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~v~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~u~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~u~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 2)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! (<= main_~i~0_-2 2) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~u~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_7_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_8_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 3)) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (<= main_~i~0_-2 3) :named ssa_-2_PendingContext))
(assert (! (= (ite (and v_~someBinaryFLOATComparisonOperation_7_fresh_1 v_~someBinaryFLOATComparisonOperation_8_fresh_1) 1 0) |assume_abort_if_not_#in~cond_-1|) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |f_#res_1| () Real)
(declare-fun |main_#t~ret9_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 3)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret9_1| |f_#res_0|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 3) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |main_#t~ret10_1| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 3)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |g_#res_0| |main_#t~ret10_1|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 3) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~v~0_-2 () Real)
(declare-fun main_~v~0_-1 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |main_#t~ret11_1| () Real)
(declare-fun |f_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 3)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret11_1| |f_#res_0|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 3) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~v~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~u~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~u~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 3)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! (<= main_~i~0_-2 3) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~u~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_7_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_8_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 4)) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (<= main_~i~0_-2 4) :named ssa_-2_PendingContext))
(assert (! (= (ite (and v_~someBinaryFLOATComparisonOperation_7_fresh_1 v_~someBinaryFLOATComparisonOperation_8_fresh_1) 1 0) |assume_abort_if_not_#in~cond_-1|) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |f_#res_1| () Real)
(declare-fun |main_#t~ret9_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 4)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret9_1| |f_#res_0|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 4) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |main_#t~ret10_1| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 4)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |g_#res_0| |main_#t~ret10_1|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 4) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~v~0_-2 () Real)
(declare-fun main_~v~0_-1 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |main_#t~ret11_1| () Real)
(declare-fun |f_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 4)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret11_1| |f_#res_0|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 4) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~v~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~u~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~u~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 4)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! (<= main_~i~0_-2 4) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~u~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_7_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_8_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 5)) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (<= main_~i~0_-2 5) :named ssa_-2_PendingContext))
(assert (! (= (ite (and v_~someBinaryFLOATComparisonOperation_7_fresh_1 v_~someBinaryFLOATComparisonOperation_8_fresh_1) 1 0) |assume_abort_if_not_#in~cond_-1|) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |f_#res_1| () Real)
(declare-fun |main_#t~ret9_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 5)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret9_1| |f_#res_0|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 5) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |main_#t~ret10_1| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 5)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |g_#res_0| |main_#t~ret10_1|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 5) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~v~0_-2 () Real)
(declare-fun main_~v~0_-1 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |main_#t~ret11_1| () Real)
(declare-fun |f_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 5)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret11_1| |f_#res_0|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 5) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~v~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~u~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~u~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 5)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! (<= main_~i~0_-2 5) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~u~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_7_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_8_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 6)) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (<= main_~i~0_-2 6) :named ssa_-2_PendingContext))
(assert (! (= (ite (and v_~someBinaryFLOATComparisonOperation_7_fresh_1 v_~someBinaryFLOATComparisonOperation_8_fresh_1) 1 0) |assume_abort_if_not_#in~cond_-1|) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |f_#res_1| () Real)
(declare-fun |main_#t~ret9_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 6)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret9_1| |f_#res_0|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 6) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |main_#t~ret10_1| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 6)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |g_#res_0| |main_#t~ret10_1|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 6) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~v~0_-2 () Real)
(declare-fun main_~v~0_-1 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |main_#t~ret11_1| () Real)
(declare-fun |f_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 6)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret11_1| |f_#res_0|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 6) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~v~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~u~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~u~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 6)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! (<= main_~i~0_-2 6) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~u~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_7_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_8_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 7)) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (<= main_~i~0_-2 7) :named ssa_-2_PendingContext))
(assert (! (= (ite (and v_~someBinaryFLOATComparisonOperation_7_fresh_1 v_~someBinaryFLOATComparisonOperation_8_fresh_1) 1 0) |assume_abort_if_not_#in~cond_-1|) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |f_#res_1| () Real)
(declare-fun |main_#t~ret9_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 7)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret9_1| |f_#res_0|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 7) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~x~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~x~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |main_#t~ret10_1| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 7)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |g_#res_0| |main_#t~ret10_1|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 7) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~x~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~v~0_-2 () Real)
(declare-fun main_~v~0_-1 () Real)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |main_#t~ret11_1| () Real)
(declare-fun |f_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 7)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret11_1| |f_#res_0|) :named ssa_1_return))
(assert (! (<= main_~i~0_-2 7) :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| main_~v~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~i~0_-2 () Int)
(declare-fun main_~u~0_-2 () Real)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun main_~u~0_-1 () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~i~0_-2 7)) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! (<= main_~i~0_-2 7) :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| main_~u~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(exit)
