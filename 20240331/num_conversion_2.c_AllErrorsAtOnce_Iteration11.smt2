(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-30T23:53:31+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id num_conversion_2.c_AllErrorsAtOnce_Iteration11)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c___VERIFIER_nondet_uchar_#res| () Int)
(declare-fun |c___VERIFIER_nondet_uchar_#res_primed| () Int)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~nondet4| () Int)
(declare-fun |c_main_#t~nondet4_primed| () Int)
(declare-fun |c_main_#t~bitwise5| () Int)
(declare-fun |c_main_#t~bitwise5_primed| () Int)
(declare-fun |c_main_#t~bitwise6| () Int)
(declare-fun |c_main_#t~bitwise6_primed| () Int)
(declare-fun c_main_~i~0 () Int)
(declare-fun c_main_~i~0_primed () Int)
(declare-fun c_main_~bit~0 () Int)
(declare-fun c_main_~bit~0_primed () Int)
(declare-fun c_main_~x~0 () Int)
(declare-fun c_main_~x~0_primed () Int)
(declare-fun c_main_~y~0 () Int)
(declare-fun c_main_~y~0_primed () Int)
(declare-fun c_main_~c~0 () Int)
(declare-fun c_main_~c~0_primed () Int)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret7| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret7_primed| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond_primed| () Int)
(declare-fun c___VERIFIER_assert_~cond () Int)
(declare-fun c___VERIFIER_assert_~cond_primed () Int)
(declare-fun |c___assert_fail_#in~0.base| () Int)
(declare-fun |c___assert_fail_#in~0.base_primed| () Int)
(declare-fun |c___assert_fail_#in~0.offset| () Int)
(declare-fun |c___assert_fail_#in~0.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~1.base| () Int)
(declare-fun |c___assert_fail_#in~1.base_primed| () Int)
(declare-fun |c___assert_fail_#in~1.offset| () Int)
(declare-fun |c___assert_fail_#in~1.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~2| () Int)
(declare-fun |c___assert_fail_#in~2_primed| () Int)
(declare-fun |c___assert_fail_#in~3.base| () Int)
(declare-fun |c___assert_fail_#in~3.base_primed| () Int)
(declare-fun |c___assert_fail_#in~3.offset| () Int)
(declare-fun |c___assert_fail_#in~3.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret7_3| () Int)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun |main_#t~nondet4_4| () Int)
(declare-fun main_~x~0_4 () Int)
(declare-fun main_~c~0_4 () Int)
(declare-fun main_~y~0_4 () Int)
(declare-fun |main_#t~bitwise5_6| () Int)
(declare-fun main_~i~0_7 () Int)
(declare-fun |main_#t~bitwise5_7| () Int)
(declare-fun |main_#t~bitwise6_8| () Int)
(declare-fun main_~bit~0_9 () Int)
(declare-fun |main_#t~bitwise6_9| () Int)
(declare-fun main_~bit~0_10 () Int)
(declare-fun main_~bit~0_11 () Int)
(declare-fun main_~i~0_11 () Int)
(declare-fun main_~c~0_11 () Int)
(declare-fun main_~i~0_14 () Int)
(declare-fun |main_#t~bitwise5_14| () Int)
(declare-fun |main_#t~bitwise6_15| () Int)
(declare-fun main_~bit~0_16 () Int)
(declare-fun |main_#t~bitwise6_16| () Int)
(declare-fun main_~bit~0_17 () Int)
(declare-fun main_~bit~0_18 () Int)
(declare-fun main_~i~0_18 () Int)
(declare-fun main_~c~0_18 () Int)
(declare-fun main_~i~0_21 () Int)
(declare-fun |main_#t~bitwise5_21| () Int)
(declare-fun |main_#t~bitwise6_22| () Int)
(declare-fun main_~bit~0_23 () Int)
(declare-fun |main_#t~bitwise6_23| () Int)
(declare-fun main_~bit~0_24 () Int)
(declare-fun main_~bit~0_25 () Int)
(declare-fun main_~i~0_25 () Int)
(declare-fun main_~c~0_25 () Int)
(declare-fun main_~i~0_28 () Int)
(declare-fun |main_#t~bitwise5_28| () Int)
(declare-fun |main_#t~bitwise6_29| () Int)
(declare-fun main_~bit~0_30 () Int)
(declare-fun |main_#t~bitwise6_30| () Int)
(declare-fun main_~bit~0_31 () Int)
(declare-fun main_~bit~0_32 () Int)
(declare-fun main_~i~0_32 () Int)
(declare-fun main_~c~0_32 () Int)
(declare-fun main_~i~0_35 () Int)
(declare-fun |main_#t~bitwise5_35| () Int)
(declare-fun |main_#t~bitwise6_36| () Int)
(declare-fun main_~bit~0_37 () Int)
(declare-fun |main_#t~bitwise6_37| () Int)
(declare-fun main_~bit~0_38 () Int)
(declare-fun main_~bit~0_39 () Int)
(declare-fun main_~i~0_39 () Int)
(declare-fun main_~c~0_39 () Int)
(declare-fun main_~i~0_42 () Int)
(declare-fun |main_#t~bitwise5_42| () Int)
(declare-fun |main_#t~bitwise6_43| () Int)
(declare-fun main_~bit~0_44 () Int)
(declare-fun |main_#t~bitwise6_44| () Int)
(declare-fun main_~bit~0_45 () Int)
(declare-fun main_~bit~0_46 () Int)
(declare-fun main_~i~0_46 () Int)
(declare-fun main_~c~0_46 () Int)
(declare-fun main_~i~0_49 () Int)
(declare-fun |main_#t~bitwise5_49| () Int)
(declare-fun |main_#t~bitwise6_50| () Int)
(declare-fun main_~bit~0_51 () Int)
(declare-fun |main_#t~bitwise6_51| () Int)
(declare-fun main_~bit~0_52 () Int)
(declare-fun main_~bit~0_53 () Int)
(declare-fun main_~i~0_53 () Int)
(declare-fun main_~c~0_53 () Int)
(declare-fun main_~i~0_56 () Int)
(declare-fun |main_#t~bitwise5_56| () Int)
(declare-fun |main_#t~bitwise6_57| () Int)
(declare-fun main_~bit~0_58 () Int)
(declare-fun |main_#t~bitwise6_58| () Int)
(declare-fun main_~bit~0_59 () Int)
(declare-fun main_~bit~0_60 () Int)
(declare-fun main_~i~0_60 () Int)
(declare-fun main_~c~0_60 () Int)
(declare-fun main_~c~0_61 () Int)
(declare-fun |__VERIFIER_assert_#in~cond_62| () Int)
(declare-fun main_~x~0_62 () Int)
(declare-fun main_~y~0_62 () Int)
(declare-fun __VERIFIER_assert_~cond_63 () Int)
(declare-fun __VERIFIER_assert_~cond_64 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! true :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! true :named ssa_0_OldVarAssigCall))
(assert (! (and (= 19 (select |#length_-1| 2)) (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (= main_~c~0_4 0) (= main_~y~0_4 0)) :named ssa_4))
(assert (! (< (mod main_~c~0_4 256) 8) :named ssa_5))
(assert (! (and (= |main_#t~bitwise5_6| 1) (= (mod main_~c~0_4 256) 0)) :named ssa_6))
(assert (! (= main_~i~0_7 |main_#t~bitwise5_6|) :named ssa_7))
(assert (! (and (or (= (mod main_~x~0_4 256) 0) (= (mod main_~i~0_7 256) 0)) (= |main_#t~bitwise6_8| 0)) :named ssa_8))
(assert (! (= main_~bit~0_9 |main_#t~bitwise6_8|) :named ssa_9))
(assert (! (= (mod main_~bit~0_9 256) 0) :named ssa_10))
(assert (! (= main_~c~0_11 (+ (mod main_~c~0_4 256) 1)) :named ssa_11))
(assert (! (< (mod main_~c~0_11 256) 8) :named ssa_12))
(assert (! (and (< 1 |main_#t~bitwise5_7|) (not (= (mod main_~c~0_11 256) 0))) :named ssa_13))
(assert (! (= main_~i~0_14 |main_#t~bitwise5_7|) :named ssa_14))
(assert (! (and (or (= (mod main_~x~0_4 256) 0) (= (mod main_~i~0_14 256) 0)) (= |main_#t~bitwise6_15| 0)) :named ssa_15))
(assert (! (= main_~bit~0_16 |main_#t~bitwise6_15|) :named ssa_16))
(assert (! (= (mod main_~bit~0_16 256) 0) :named ssa_17))
(assert (! (= main_~c~0_18 (+ (mod main_~c~0_11 256) 1)) :named ssa_18))
(assert (! (< (mod main_~c~0_18 256) 8) :named ssa_19))
(assert (! (and (< 1 |main_#t~bitwise5_14|) (not (= (mod main_~c~0_18 256) 0))) :named ssa_20))
(assert (! (= main_~i~0_21 |main_#t~bitwise5_14|) :named ssa_21))
(assert (! (and (or (= (mod main_~x~0_4 256) 0) (= (mod main_~i~0_21 256) 0)) (= |main_#t~bitwise6_22| 0)) :named ssa_22))
(assert (! (= main_~bit~0_23 |main_#t~bitwise6_22|) :named ssa_23))
(assert (! (= (mod main_~bit~0_23 256) 0) :named ssa_24))
(assert (! (= main_~c~0_25 (+ (mod main_~c~0_18 256) 1)) :named ssa_25))
(assert (! (< (mod main_~c~0_25 256) 8) :named ssa_26))
(assert (! (and (< 1 |main_#t~bitwise5_21|) (not (= (mod main_~c~0_25 256) 0))) :named ssa_27))
(assert (! (= main_~i~0_28 |main_#t~bitwise5_21|) :named ssa_28))
(assert (! (and (or (= (mod main_~x~0_4 256) 0) (= (mod main_~i~0_28 256) 0)) (= |main_#t~bitwise6_29| 0)) :named ssa_29))
(assert (! (= main_~bit~0_30 |main_#t~bitwise6_29|) :named ssa_30))
(assert (! (= (mod main_~bit~0_30 256) 0) :named ssa_31))
(assert (! (= main_~c~0_32 (+ (mod main_~c~0_25 256) 1)) :named ssa_32))
(assert (! (< (mod main_~c~0_32 256) 8) :named ssa_33))
(assert (! (and (< 1 |main_#t~bitwise5_28|) (not (= (mod main_~c~0_32 256) 0))) :named ssa_34))
(assert (! (= main_~i~0_35 |main_#t~bitwise5_28|) :named ssa_35))
(assert (! (and (or (= (mod main_~x~0_4 256) 0) (= (mod main_~i~0_35 256) 0)) (= |main_#t~bitwise6_36| 0)) :named ssa_36))
(assert (! (= main_~bit~0_37 |main_#t~bitwise6_36|) :named ssa_37))
(assert (! (= (mod main_~bit~0_37 256) 0) :named ssa_38))
(assert (! (= main_~c~0_39 (+ (mod main_~c~0_32 256) 1)) :named ssa_39))
(assert (! (< (mod main_~c~0_39 256) 8) :named ssa_40))
(assert (! (and (< 1 |main_#t~bitwise5_35|) (not (= (mod main_~c~0_39 256) 0))) :named ssa_41))
(assert (! (= main_~i~0_42 |main_#t~bitwise5_35|) :named ssa_42))
(assert (! (and (or (= (mod main_~x~0_4 256) 0) (= (mod main_~i~0_42 256) 0)) (= |main_#t~bitwise6_43| 0)) :named ssa_43))
(assert (! (= main_~bit~0_44 |main_#t~bitwise6_43|) :named ssa_44))
(assert (! (= (mod main_~bit~0_44 256) 0) :named ssa_45))
(assert (! (= main_~c~0_46 (+ (mod main_~c~0_39 256) 1)) :named ssa_46))
(assert (! (< (mod main_~c~0_46 256) 8) :named ssa_47))
(assert (! (and (< 1 |main_#t~bitwise5_42|) (not (= (mod main_~c~0_46 256) 0))) :named ssa_48))
(assert (! (= main_~i~0_49 |main_#t~bitwise5_42|) :named ssa_49))
(assert (! (and (or (= (mod main_~x~0_4 256) 0) (= (mod main_~i~0_49 256) 0)) (= |main_#t~bitwise6_50| 0)) :named ssa_50))
(assert (! (= main_~bit~0_51 |main_#t~bitwise6_50|) :named ssa_51))
(assert (! (= (mod main_~bit~0_51 256) 0) :named ssa_52))
(assert (! (= main_~c~0_53 (+ (mod main_~c~0_46 256) 1)) :named ssa_53))
(assert (! (< (mod main_~c~0_53 256) 8) :named ssa_54))
(assert (! (and (< 1 |main_#t~bitwise5_49|) (not (= (mod main_~c~0_53 256) 0))) :named ssa_55))
(assert (! (= main_~i~0_56 |main_#t~bitwise5_49|) :named ssa_56))
(assert (! (and (or (= (mod main_~x~0_4 256) 0) (= (mod main_~i~0_56 256) 0)) (= |main_#t~bitwise6_57| 0)) :named ssa_57))
(assert (! (= main_~bit~0_58 |main_#t~bitwise6_57|) :named ssa_58))
(assert (! (= (mod main_~bit~0_58 256) 0) :named ssa_59))
(assert (! (= main_~c~0_60 (+ (mod main_~c~0_53 256) 1)) :named ssa_60))
(assert (! (<= 8 (mod main_~c~0_60 256)) :named ssa_61))
(assert (! true :named ssa_62_GlobVarAssigCall))
(assert (! (= |__VERIFIER_assert_#in~cond_62| (ite (= (mod main_~x~0_4 256) (mod main_~y~0_4 256)) 1 0)) :named ssa_62_LocVarAssigCall))
(assert (! true :named ssa_62_OldVarAssigCall))
(assert (! (= __VERIFIER_assert_~cond_63 |__VERIFIER_assert_#in~cond_62|) :named ssa_63))
(assert (! (= __VERIFIER_assert_~cond_63 0) :named ssa_64))
(assert (! true :named ssa_65))
(check-sat)
(get-interpolants (and ssa_0_LocVarAssigCall ssa_precond ssa_0_GlobVarAssigCall ssa_0_OldVarAssigCall ssa_2_return ssa_1) (and ssa_3_OldVarAssigCall ssa_3_LocVarAssigCall ssa_3_GlobVarAssigCall) ssa_4 ssa_5 ssa_6 ssa_7 ssa_8 ssa_9 ssa_10 ssa_11 ssa_12 ssa_13 ssa_14 ssa_15 ssa_16 ssa_17 ssa_18 ssa_19 ssa_20 ssa_21 ssa_22 ssa_23 ssa_24 ssa_25 ssa_26 ssa_27 ssa_28 ssa_29 ssa_30 ssa_31 ssa_32 ssa_33 ssa_34 ssa_35 ssa_36 ssa_37 ssa_38 ssa_39 ssa_40 ssa_41 ssa_42 ssa_43 ssa_44 ssa_45 ssa_46 ssa_47 ssa_48 ssa_49 ssa_50 ssa_51 ssa_52 ssa_53 ssa_54 ssa_55 ssa_56 ssa_57 ssa_58 ssa_59 ssa_60 ssa_61 (and ssa_62_GlobVarAssigCall ssa_62_LocVarAssigCall ssa_62_OldVarAssigCall) ssa_63 ssa_64 (and ssa_65 ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (= 19 (select |#length_-1| 2)) (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! true :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(exit)
