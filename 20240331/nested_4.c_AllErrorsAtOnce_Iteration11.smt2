(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-31T00:10:19+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id nested_4.c_AllErrorsAtOnce_Iteration11)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret8| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret8_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~pre4| () Int)
(declare-fun |c_main_#t~pre4_primed| () Int)
(declare-fun |c_main_#t~pre5| () Int)
(declare-fun |c_main_#t~pre5_primed| () Int)
(declare-fun |c_main_#t~pre6| () Int)
(declare-fun |c_main_#t~pre6_primed| () Int)
(declare-fun |c_main_#t~pre7| () Int)
(declare-fun |c_main_#t~pre7_primed| () Int)
(declare-fun c_main_~a~0 () Int)
(declare-fun c_main_~a~0_primed () Int)
(declare-fun c_main_~b~0 () Int)
(declare-fun c_main_~b~0_primed () Int)
(declare-fun c_main_~c~0 () Int)
(declare-fun c_main_~c~0_primed () Int)
(declare-fun c_main_~d~0 () Int)
(declare-fun c_main_~d~0_primed () Int)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c___assert_fail_#in~0.base| () Int)
(declare-fun |c___assert_fail_#in~0.base_primed| () Int)
(declare-fun |c___assert_fail_#in~0.offset| () Int)
(declare-fun |c___assert_fail_#in~0.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~1.base| () Int)
(declare-fun |c___assert_fail_#in~1.base_primed| () Int)
(declare-fun |c___assert_fail_#in~1.offset| () Int)
(declare-fun |c___assert_fail_#in~1.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~2| () Int)
(declare-fun |c___assert_fail_#in~2_primed| () Int)
(declare-fun |c___assert_fail_#in~3.base| () Int)
(declare-fun |c___assert_fail_#in~3.base_primed| () Int)
(declare-fun |c___assert_fail_#in~3.offset| () Int)
(declare-fun |c___assert_fail_#in~3.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret8_3| () Int)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun main_~c~0_4 () Int)
(declare-fun main_~d~0_4 () Int)
(declare-fun main_~b~0_4 () Int)
(declare-fun main_~a~0_4 () Int)
(declare-fun main_~b~0_5 () Int)
(declare-fun main_~c~0_6 () Int)
(declare-fun main_~d~0_7 () Int)
(declare-fun main_~d~0_8 () Int)
(declare-fun |main_#t~pre4_8| () Int)
(declare-fun main_~d~0_9 () Int)
(declare-fun |main_#t~pre4_9| () Int)
(declare-fun main_~d~0_10 () Int)
(declare-fun |main_#t~pre4_10| () Int)
(declare-fun main_~c~0_12 () Int)
(declare-fun |main_#t~pre5_12| () Int)
(declare-fun main_~d~0_13 () Int)
(declare-fun main_~d~0_14 () Int)
(declare-fun |main_#t~pre4_14| () Int)
(declare-fun main_~d~0_15 () Int)
(declare-fun |main_#t~pre4_15| () Int)
(declare-fun main_~d~0_16 () Int)
(declare-fun |main_#t~pre4_16| () Int)
(declare-fun main_~c~0_18 () Int)
(declare-fun |main_#t~pre5_18| () Int)
(declare-fun main_~b~0_20 () Int)
(declare-fun |main_#t~pre6_20| () Int)
(declare-fun main_~c~0_21 () Int)
(declare-fun main_~d~0_22 () Int)
(declare-fun main_~d~0_23 () Int)
(declare-fun |main_#t~pre4_23| () Int)
(declare-fun main_~d~0_24 () Int)
(declare-fun |main_#t~pre4_24| () Int)
(declare-fun main_~d~0_25 () Int)
(declare-fun |main_#t~pre4_25| () Int)
(declare-fun main_~c~0_27 () Int)
(declare-fun |main_#t~pre5_27| () Int)
(declare-fun main_~d~0_28 () Int)
(declare-fun main_~d~0_29 () Int)
(declare-fun |main_#t~pre4_29| () Int)
(declare-fun main_~d~0_30 () Int)
(declare-fun |main_#t~pre4_30| () Int)
(declare-fun main_~d~0_31 () Int)
(declare-fun |main_#t~pre4_31| () Int)
(declare-fun main_~c~0_33 () Int)
(declare-fun |main_#t~pre5_33| () Int)
(declare-fun main_~b~0_35 () Int)
(declare-fun |main_#t~pre6_35| () Int)
(declare-fun |main_#t~pre7_37| () Int)
(declare-fun main_~a~0_37 () Int)
(declare-fun main_~b~0_38 () Int)
(declare-fun main_~c~0_39 () Int)
(declare-fun main_~d~0_40 () Int)
(declare-fun main_~d~0_41 () Int)
(declare-fun |main_#t~pre4_41| () Int)
(declare-fun main_~d~0_42 () Int)
(declare-fun |main_#t~pre4_42| () Int)
(declare-fun main_~d~0_43 () Int)
(declare-fun |main_#t~pre4_43| () Int)
(declare-fun main_~c~0_45 () Int)
(declare-fun |main_#t~pre5_45| () Int)
(declare-fun main_~d~0_46 () Int)
(declare-fun main_~d~0_47 () Int)
(declare-fun |main_#t~pre4_47| () Int)
(declare-fun main_~d~0_48 () Int)
(declare-fun |main_#t~pre4_48| () Int)
(declare-fun main_~d~0_49 () Int)
(declare-fun |main_#t~pre4_49| () Int)
(declare-fun main_~c~0_51 () Int)
(declare-fun |main_#t~pre5_51| () Int)
(declare-fun main_~b~0_53 () Int)
(declare-fun |main_#t~pre6_53| () Int)
(declare-fun main_~c~0_54 () Int)
(declare-fun main_~d~0_55 () Int)
(declare-fun main_~d~0_56 () Int)
(declare-fun |main_#t~pre4_56| () Int)
(declare-fun main_~d~0_57 () Int)
(declare-fun |main_#t~pre4_57| () Int)
(declare-fun main_~d~0_58 () Int)
(declare-fun |main_#t~pre4_58| () Int)
(declare-fun main_~c~0_60 () Int)
(declare-fun |main_#t~pre5_60| () Int)
(declare-fun main_~d~0_61 () Int)
(declare-fun main_~d~0_62 () Int)
(declare-fun |main_#t~pre4_62| () Int)
(declare-fun main_~d~0_63 () Int)
(declare-fun |main_#t~pre4_63| () Int)
(declare-fun main_~d~0_64 () Int)
(declare-fun |main_#t~pre4_64| () Int)
(declare-fun main_~c~0_66 () Int)
(declare-fun |main_#t~pre5_66| () Int)
(declare-fun main_~b~0_68 () Int)
(declare-fun |main_#t~pre6_68| () Int)
(declare-fun |main_#t~pre7_70| () Int)
(declare-fun main_~a~0_70 () Int)
(declare-fun main_~c~0_72 () Int)
(declare-fun main_~d~0_72 () Int)
(declare-fun main_~b~0_72 () Int)
(declare-fun main_~a~0_72 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! true :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! true :named ssa_0_OldVarAssigCall))
(assert (! (and (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select |#length_-1| 2) 11) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (= main_~a~0_4 0) (= main_~d~0_4 6) (= main_~c~0_4 6) (= main_~b~0_4 6)) :named ssa_4))
(assert (! (and (= main_~b~0_5 0) (< main_~a~0_4 6)) :named ssa_5))
(assert (! (and (< main_~b~0_5 6) (= main_~c~0_6 0)) :named ssa_6))
(assert (! (and (< main_~c~0_6 6) (= main_~d~0_7 0)) :named ssa_7))
(assert (! (and (< main_~d~0_7 6) (= (+ 1 main_~d~0_7) main_~d~0_8)) :named ssa_8))
(assert (! (and (< main_~d~0_8 6) (= (+ 1 main_~d~0_8) main_~d~0_9)) :named ssa_9))
(assert (! (and (< main_~d~0_9 6) (= (+ 1 main_~d~0_9) main_~d~0_10)) :named ssa_10))
(assert (! (<= 6 main_~d~0_10) :named ssa_11))
(assert (! (= main_~c~0_12 (+ main_~c~0_6 1)) :named ssa_12))
(assert (! (and (< main_~c~0_12 6) (= main_~d~0_13 0)) :named ssa_13))
(assert (! (and (< main_~d~0_13 6) (= (+ 1 main_~d~0_13) main_~d~0_14)) :named ssa_14))
(assert (! (and (< main_~d~0_14 6) (= (+ 1 main_~d~0_14) main_~d~0_15)) :named ssa_15))
(assert (! (and (< main_~d~0_15 6) (= (+ 1 main_~d~0_15) main_~d~0_16)) :named ssa_16))
(assert (! (<= 6 main_~d~0_16) :named ssa_17))
(assert (! (= main_~c~0_18 (+ main_~c~0_12 1)) :named ssa_18))
(assert (! (<= 6 main_~c~0_18) :named ssa_19))
(assert (! (= (+ main_~b~0_5 1) main_~b~0_20) :named ssa_20))
(assert (! (and (< main_~b~0_20 6) (= main_~c~0_21 0)) :named ssa_21))
(assert (! (and (< main_~c~0_21 6) (= main_~d~0_22 0)) :named ssa_22))
(assert (! (and (< main_~d~0_22 6) (= (+ 1 main_~d~0_22) main_~d~0_23)) :named ssa_23))
(assert (! (and (< main_~d~0_23 6) (= (+ 1 main_~d~0_23) main_~d~0_24)) :named ssa_24))
(assert (! (and (< main_~d~0_24 6) (= (+ 1 main_~d~0_24) main_~d~0_25)) :named ssa_25))
(assert (! (<= 6 main_~d~0_25) :named ssa_26))
(assert (! (= main_~c~0_27 (+ main_~c~0_21 1)) :named ssa_27))
(assert (! (and (< main_~c~0_27 6) (= main_~d~0_28 0)) :named ssa_28))
(assert (! (and (< main_~d~0_28 6) (= (+ 1 main_~d~0_28) main_~d~0_29)) :named ssa_29))
(assert (! (and (< main_~d~0_29 6) (= (+ 1 main_~d~0_29) main_~d~0_30)) :named ssa_30))
(assert (! (and (< main_~d~0_30 6) (= (+ 1 main_~d~0_30) main_~d~0_31)) :named ssa_31))
(assert (! (<= 6 main_~d~0_31) :named ssa_32))
(assert (! (= main_~c~0_33 (+ main_~c~0_27 1)) :named ssa_33))
(assert (! (<= 6 main_~c~0_33) :named ssa_34))
(assert (! (= (+ main_~b~0_20 1) main_~b~0_35) :named ssa_35))
(assert (! (<= 6 main_~b~0_35) :named ssa_36))
(assert (! (= main_~a~0_37 (+ main_~a~0_4 1)) :named ssa_37))
(assert (! (and (= main_~b~0_38 0) (< main_~a~0_37 6)) :named ssa_38))
(assert (! (and (< main_~b~0_38 6) (= main_~c~0_39 0)) :named ssa_39))
(assert (! (and (< main_~c~0_39 6) (= main_~d~0_40 0)) :named ssa_40))
(assert (! (and (< main_~d~0_40 6) (= (+ 1 main_~d~0_40) main_~d~0_41)) :named ssa_41))
(assert (! (and (< main_~d~0_41 6) (= (+ 1 main_~d~0_41) main_~d~0_42)) :named ssa_42))
(assert (! (and (< main_~d~0_42 6) (= (+ 1 main_~d~0_42) main_~d~0_43)) :named ssa_43))
(assert (! (<= 6 main_~d~0_43) :named ssa_44))
(assert (! (= main_~c~0_45 (+ main_~c~0_39 1)) :named ssa_45))
(assert (! (and (< main_~c~0_45 6) (= main_~d~0_46 0)) :named ssa_46))
(assert (! (and (< main_~d~0_46 6) (= (+ 1 main_~d~0_46) main_~d~0_47)) :named ssa_47))
(assert (! (and (< main_~d~0_47 6) (= (+ 1 main_~d~0_47) main_~d~0_48)) :named ssa_48))
(assert (! (and (< main_~d~0_48 6) (= (+ 1 main_~d~0_48) main_~d~0_49)) :named ssa_49))
(assert (! (<= 6 main_~d~0_49) :named ssa_50))
(assert (! (= main_~c~0_51 (+ main_~c~0_45 1)) :named ssa_51))
(assert (! (<= 6 main_~c~0_51) :named ssa_52))
(assert (! (= (+ main_~b~0_38 1) main_~b~0_53) :named ssa_53))
(assert (! (and (< main_~b~0_53 6) (= main_~c~0_54 0)) :named ssa_54))
(assert (! (and (< main_~c~0_54 6) (= main_~d~0_55 0)) :named ssa_55))
(assert (! (and (< main_~d~0_55 6) (= (+ 1 main_~d~0_55) main_~d~0_56)) :named ssa_56))
(assert (! (and (< main_~d~0_56 6) (= (+ 1 main_~d~0_56) main_~d~0_57)) :named ssa_57))
(assert (! (and (< main_~d~0_57 6) (= (+ 1 main_~d~0_57) main_~d~0_58)) :named ssa_58))
(assert (! (<= 6 main_~d~0_58) :named ssa_59))
(assert (! (= main_~c~0_60 (+ main_~c~0_54 1)) :named ssa_60))
(assert (! (and (< main_~c~0_60 6) (= main_~d~0_61 0)) :named ssa_61))
(assert (! (and (< main_~d~0_61 6) (= (+ 1 main_~d~0_61) main_~d~0_62)) :named ssa_62))
(assert (! (and (< main_~d~0_62 6) (= (+ 1 main_~d~0_62) main_~d~0_63)) :named ssa_63))
(assert (! (and (< main_~d~0_63 6) (= (+ 1 main_~d~0_63) main_~d~0_64)) :named ssa_64))
(assert (! (<= 6 main_~d~0_64) :named ssa_65))
(assert (! (= main_~c~0_66 (+ main_~c~0_60 1)) :named ssa_66))
(assert (! (<= 6 main_~c~0_66) :named ssa_67))
(assert (! (= (+ main_~b~0_53 1) main_~b~0_68) :named ssa_68))
(assert (! (<= 6 main_~b~0_68) :named ssa_69))
(assert (! (= main_~a~0_70 (+ main_~a~0_37 1)) :named ssa_70))
(assert (! (<= 6 main_~a~0_70) :named ssa_71))
(assert (! (or (not (= main_~c~0_66 6)) (not (= main_~d~0_64 6)) (not (= main_~b~0_68 6)) (not (= main_~a~0_70 6))) :named ssa_72))
(assert (! true :named ssa_73))
(check-sat)
(get-interpolants (and ssa_0_LocVarAssigCall ssa_precond ssa_0_GlobVarAssigCall ssa_0_OldVarAssigCall ssa_2_return ssa_1) (and ssa_3_OldVarAssigCall ssa_3_LocVarAssigCall ssa_3_GlobVarAssigCall) ssa_4 ssa_5 ssa_6 ssa_7 ssa_8 ssa_9 ssa_10 ssa_11 ssa_12 ssa_13 ssa_14 ssa_15 ssa_16 ssa_17 ssa_18 ssa_19 ssa_20 ssa_21 ssa_22 ssa_23 ssa_24 ssa_25 ssa_26 ssa_27 ssa_28 ssa_29 ssa_30 ssa_31 ssa_32 ssa_33 ssa_34 ssa_35 ssa_36 ssa_37 ssa_38 ssa_39 ssa_40 ssa_41 ssa_42 ssa_43 ssa_44 ssa_45 ssa_46 ssa_47 ssa_48 ssa_49 ssa_50 ssa_51 ssa_52 ssa_53 ssa_54 ssa_55 ssa_56 ssa_57 ssa_58 ssa_59 ssa_60 ssa_61 ssa_62 ssa_63 ssa_64 ssa_65 ssa_66 ssa_67 ssa_68 ssa_69 ssa_70 ssa_71 ssa_72 (and ssa_postcond ssa_73))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select |#length_-1| 2) 11) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! true :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(exit)
