(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-31T00:15:06+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id Addition03-1.c_AllErrorsAtOnce_Iteration8)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~nondet6| () Int)
(declare-fun |c_main_#t~nondet6_primed| () Int)
(declare-fun |c_main_#t~nondet7| () Int)
(declare-fun |c_main_#t~nondet7_primed| () Int)
(declare-fun |c_main_#t~ret8| () Int)
(declare-fun |c_main_#t~ret8_primed| () Int)
(declare-fun c_main_~m~0 () Int)
(declare-fun c_main_~m~0_primed () Int)
(declare-fun c_main_~n~0 () Int)
(declare-fun c_main_~n~0_primed () Int)
(declare-fun c_main_~result~0 () Int)
(declare-fun c_main_~result~0_primed () Int)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res_primed| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret9| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret9_primed| () Int)
(declare-fun |c___assert_fail_#in~0.base| () Int)
(declare-fun |c___assert_fail_#in~0.base_primed| () Int)
(declare-fun |c___assert_fail_#in~0.offset| () Int)
(declare-fun |c___assert_fail_#in~0.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~1.base| () Int)
(declare-fun |c___assert_fail_#in~1.base_primed| () Int)
(declare-fun |c___assert_fail_#in~1.offset| () Int)
(declare-fun |c___assert_fail_#in~1.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~2| () Int)
(declare-fun |c___assert_fail_#in~2_primed| () Int)
(declare-fun |c___assert_fail_#in~3.base| () Int)
(declare-fun |c___assert_fail_#in~3.base_primed| () Int)
(declare-fun |c___assert_fail_#in~3.offset| () Int)
(declare-fun |c___assert_fail_#in~3.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_addition_#in~m| () Int)
(declare-fun |c_addition_#in~m_primed| () Int)
(declare-fun |c_addition_#in~n| () Int)
(declare-fun |c_addition_#in~n_primed| () Int)
(declare-fun |c_addition_#res| () Int)
(declare-fun |c_addition_#res_primed| () Int)
(declare-fun |c_addition_#t~ret4| () Int)
(declare-fun |c_addition_#t~ret4_primed| () Int)
(declare-fun |c_addition_#t~ret5| () Int)
(declare-fun |c_addition_#t~ret5_primed| () Int)
(declare-fun c_addition_~m () Int)
(declare-fun c_addition_~m_primed () Int)
(declare-fun c_addition_~n () Int)
(declare-fun c_addition_~n_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret9_3| () Int)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun |main_#t~nondet7_4| () Int)
(declare-fun |main_#t~nondet6_4| () Int)
(declare-fun main_~m~0_4 () Int)
(declare-fun main_~n~0_4 () Int)
(declare-fun main_~m~0_5 () Int)
(declare-fun |addition_#in~m_5| () Int)
(declare-fun |addition_#in~n_5| () Int)
(declare-fun main_~n~0_5 () Int)
(declare-fun addition_~n_6 () Int)
(declare-fun addition_~m_6 () Int)
(declare-fun |addition_#in~m_9| () Int)
(declare-fun addition_~n_9 () Int)
(declare-fun |addition_#in~n_9| () Int)
(declare-fun addition_~m_9 () Int)
(declare-fun addition_~n_10 () Int)
(declare-fun addition_~m_10 () Int)
(declare-fun |addition_#in~m_13| () Int)
(declare-fun addition_~n_13 () Int)
(declare-fun |addition_#in~n_13| () Int)
(declare-fun addition_~m_13 () Int)
(declare-fun addition_~n_14 () Int)
(declare-fun addition_~m_14 () Int)
(declare-fun |addition_#in~m_17| () Int)
(declare-fun addition_~n_17 () Int)
(declare-fun |addition_#in~n_17| () Int)
(declare-fun addition_~m_17 () Int)
(declare-fun addition_~n_18 () Int)
(declare-fun addition_~m_18 () Int)
(declare-fun |addition_#in~m_21| () Int)
(declare-fun addition_~n_21 () Int)
(declare-fun |addition_#in~n_21| () Int)
(declare-fun addition_~m_21 () Int)
(declare-fun addition_~n_22 () Int)
(declare-fun addition_~m_22 () Int)
(declare-fun |addition_#in~m_25| () Int)
(declare-fun addition_~n_25 () Int)
(declare-fun |addition_#in~n_25| () Int)
(declare-fun addition_~m_25 () Int)
(declare-fun addition_~n_26 () Int)
(declare-fun addition_~m_26 () Int)
(declare-fun |addition_#in~m_29| () Int)
(declare-fun addition_~n_29 () Int)
(declare-fun |addition_#in~n_29| () Int)
(declare-fun addition_~m_29 () Int)
(declare-fun addition_~n_30 () Int)
(declare-fun addition_~m_30 () Int)
(declare-fun |addition_#res_31| () Int)
(declare-fun addition_~n_31 () Int)
(declare-fun addition_~m_31 () Int)
(declare-fun |addition_#t~ret4_33| () Int)
(declare-fun |addition_#res_33| () Int)
(declare-fun |addition_#t~ret4_34| () Int)
(declare-fun |addition_#res_34| () Int)
(declare-fun |addition_#t~ret4_36| () Int)
(declare-fun |addition_#res_36| () Int)
(declare-fun |addition_#t~ret4_37| () Int)
(declare-fun |addition_#res_37| () Int)
(declare-fun |addition_#t~ret4_39| () Int)
(declare-fun |addition_#res_39| () Int)
(declare-fun |addition_#t~ret4_40| () Int)
(declare-fun |addition_#res_40| () Int)
(declare-fun |addition_#t~ret4_42| () Int)
(declare-fun |addition_#res_42| () Int)
(declare-fun |addition_#t~ret4_43| () Int)
(declare-fun |addition_#res_43| () Int)
(declare-fun |addition_#t~ret4_45| () Int)
(declare-fun |addition_#res_45| () Int)
(declare-fun |addition_#t~ret4_46| () Int)
(declare-fun |addition_#res_46| () Int)
(declare-fun |addition_#t~ret4_48| () Int)
(declare-fun |addition_#res_48| () Int)
(declare-fun |addition_#t~ret4_49| () Int)
(declare-fun |addition_#res_49| () Int)
(declare-fun |main_#t~ret8_51| () Int)
(declare-fun |addition_#res_51| () Int)
(declare-fun main_~result~0_52 () Int)
(declare-fun |main_#t~ret8_52| () Int)
(declare-fun main_~result~0_53 () Int)
(declare-fun main_~m~0_53 () Int)
(declare-fun main_~n~0_53 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! true :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! true :named ssa_0_OldVarAssigCall))
(assert (! (and (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= 15 (select |#length_-1| 2)) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (<= 0 (+ main_~m~0_4 2147483648)) (<= main_~m~0_4 2147483647) (<= main_~n~0_4 2147483647) (<= 0 (+ main_~n~0_4 2147483648))) :named ssa_4))
(assert (! true :named ssa_5_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_5| main_~m~0_4) (= main_~n~0_4 |addition_#in~n_5|)) :named ssa_5_LocVarAssigCall))
(assert (! true :named ssa_5_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_5| addition_~n_6) (= |addition_#in~m_5| addition_~m_6)) :named ssa_6))
(assert (! (not (= 0 addition_~n_6)) :named ssa_7))
(assert (! (< 0 addition_~n_6) :named ssa_8))
(assert (! true :named ssa_9_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_9| (+ addition_~m_6 1)) (= addition_~n_6 (+ 1 |addition_#in~n_9|))) :named ssa_9_LocVarAssigCall))
(assert (! true :named ssa_9_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_9| addition_~n_10) (= |addition_#in~m_9| addition_~m_10)) :named ssa_10))
(assert (! (not (= 0 addition_~n_10)) :named ssa_11))
(assert (! (< 0 addition_~n_10) :named ssa_12))
(assert (! true :named ssa_13_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_13| (+ addition_~m_10 1)) (= addition_~n_10 (+ 1 |addition_#in~n_13|))) :named ssa_13_LocVarAssigCall))
(assert (! true :named ssa_13_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_13| addition_~n_14) (= |addition_#in~m_13| addition_~m_14)) :named ssa_14))
(assert (! (not (= 0 addition_~n_14)) :named ssa_15))
(assert (! (< 0 addition_~n_14) :named ssa_16))
(assert (! true :named ssa_17_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_17| (+ addition_~m_14 1)) (= addition_~n_14 (+ 1 |addition_#in~n_17|))) :named ssa_17_LocVarAssigCall))
(assert (! true :named ssa_17_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_17| addition_~n_18) (= |addition_#in~m_17| addition_~m_18)) :named ssa_18))
(assert (! (not (= 0 addition_~n_18)) :named ssa_19))
(assert (! (< 0 addition_~n_18) :named ssa_20))
(assert (! true :named ssa_21_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_21| (+ addition_~m_18 1)) (= addition_~n_18 (+ 1 |addition_#in~n_21|))) :named ssa_21_LocVarAssigCall))
(assert (! true :named ssa_21_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_21| addition_~n_22) (= |addition_#in~m_21| addition_~m_22)) :named ssa_22))
(assert (! (not (= 0 addition_~n_22)) :named ssa_23))
(assert (! (< 0 addition_~n_22) :named ssa_24))
(assert (! true :named ssa_25_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_25| (+ addition_~m_22 1)) (= addition_~n_22 (+ 1 |addition_#in~n_25|))) :named ssa_25_LocVarAssigCall))
(assert (! true :named ssa_25_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_25| addition_~n_26) (= |addition_#in~m_25| addition_~m_26)) :named ssa_26))
(assert (! (not (= 0 addition_~n_26)) :named ssa_27))
(assert (! (< 0 addition_~n_26) :named ssa_28))
(assert (! true :named ssa_29_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_29| (+ addition_~m_26 1)) (= addition_~n_26 (+ 1 |addition_#in~n_29|))) :named ssa_29_LocVarAssigCall))
(assert (! true :named ssa_29_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_29| addition_~n_30) (= |addition_#in~m_29| addition_~m_30)) :named ssa_30))
(assert (! (and (= 0 addition_~n_30) (= |addition_#res_31| addition_~m_30)) :named ssa_31))
(assert (! true :named ssa_32))
(assert (! (= |addition_#res_31| |addition_#t~ret4_33|) :named ssa_33_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_33|)) (<= |addition_#t~ret4_33| 9223372036854775807) (= |addition_#res_34| |addition_#t~ret4_33|)) :named ssa_34))
(assert (! true :named ssa_35))
(assert (! (= |addition_#res_34| |addition_#t~ret4_36|) :named ssa_36_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_36|)) (<= |addition_#t~ret4_36| 9223372036854775807) (= |addition_#res_37| |addition_#t~ret4_36|)) :named ssa_37))
(assert (! true :named ssa_38))
(assert (! (= |addition_#res_37| |addition_#t~ret4_39|) :named ssa_39_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_39|)) (<= |addition_#t~ret4_39| 9223372036854775807) (= |addition_#res_40| |addition_#t~ret4_39|)) :named ssa_40))
(assert (! true :named ssa_41))
(assert (! (= |addition_#res_40| |addition_#t~ret4_42|) :named ssa_42_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_42|)) (<= |addition_#t~ret4_42| 9223372036854775807) (= |addition_#res_43| |addition_#t~ret4_42|)) :named ssa_43))
(assert (! true :named ssa_44))
(assert (! (= |addition_#res_43| |addition_#t~ret4_45|) :named ssa_45_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_45|)) (<= |addition_#t~ret4_45| 9223372036854775807) (= |addition_#res_46| |addition_#t~ret4_45|)) :named ssa_46))
(assert (! true :named ssa_47))
(assert (! (= |addition_#res_46| |addition_#t~ret4_48|) :named ssa_48_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_48|)) (<= |addition_#t~ret4_48| 9223372036854775807) (= |addition_#res_49| |addition_#t~ret4_48|)) :named ssa_49))
(assert (! true :named ssa_50))
(assert (! (= |addition_#res_49| |main_#t~ret8_51|) :named ssa_51_return))
(assert (! (and (<= |main_#t~ret8_51| 9223372036854775807) (<= 0 (+ |main_#t~ret8_51| 9223372036854775808)) (= main_~result~0_52 |main_#t~ret8_51|)) :named ssa_52))
(assert (! (and (< main_~result~0_52 200) (<= 100 main_~n~0_4) (<= 100 main_~m~0_4)) :named ssa_53))
(assert (! true :named ssa_54))
(check-sat)
(get-interpolants (and ssa_0_LocVarAssigCall ssa_precond ssa_0_GlobVarAssigCall ssa_0_OldVarAssigCall ssa_2_return ssa_1) (and ssa_3_OldVarAssigCall ssa_3_LocVarAssigCall ssa_3_GlobVarAssigCall) ssa_4 (and ssa_27 ssa_29_OldVarAssigCall ssa_20 ssa_17_LocVarAssigCall ssa_21_LocVarAssigCall ssa_5_LocVarAssigCall ssa_31 ssa_5_GlobVarAssigCall ssa_21_OldVarAssigCall ssa_7 ssa_44 ssa_16 ssa_6 ssa_26 ssa_34 ssa_17_GlobVarAssigCall ssa_25_GlobVarAssigCall ssa_40 ssa_10 ssa_14 ssa_25_OldVarAssigCall ssa_8 ssa_13_LocVarAssigCall ssa_29_GlobVarAssigCall ssa_46 ssa_51_return ssa_47 ssa_13_OldVarAssigCall ssa_39_return ssa_25_LocVarAssigCall ssa_45_return ssa_19 ssa_43 ssa_37 ssa_13_GlobVarAssigCall ssa_17_OldVarAssigCall ssa_38 ssa_12 ssa_32 ssa_5_OldVarAssigCall ssa_50 ssa_48_return ssa_11 ssa_28 ssa_29_LocVarAssigCall ssa_22 ssa_15 ssa_49 ssa_42_return ssa_33_return ssa_18 ssa_23 ssa_30 ssa_36_return ssa_9_LocVarAssigCall ssa_9_OldVarAssigCall ssa_35 ssa_21_GlobVarAssigCall ssa_9_GlobVarAssigCall ssa_41 ssa_24) ssa_52 ssa_53 (and ssa_54 ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= 15 (select |#length_-1| 2)) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! true :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~m~0_-2 () Int)
(declare-fun main_~n~0_-2 () Int)
(declare-fun main_~m~0_-1 () Int)
(declare-fun |addition_#in~m_-1| () Int)
(declare-fun |addition_#in~n_-1| () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun addition_~n_0 () Int)
(declare-fun addition_~m_0 () Int)
(declare-fun |addition_#in~m_3| () Int)
(declare-fun addition_~n_3 () Int)
(declare-fun |addition_#in~n_3| () Int)
(declare-fun addition_~m_3 () Int)
(declare-fun addition_~n_4 () Int)
(declare-fun addition_~m_4 () Int)
(declare-fun |addition_#in~m_7| () Int)
(declare-fun addition_~n_7 () Int)
(declare-fun |addition_#in~n_7| () Int)
(declare-fun addition_~m_7 () Int)
(declare-fun addition_~n_8 () Int)
(declare-fun addition_~m_8 () Int)
(declare-fun |addition_#in~m_11| () Int)
(declare-fun addition_~n_11 () Int)
(declare-fun |addition_#in~n_11| () Int)
(declare-fun addition_~m_11 () Int)
(declare-fun addition_~n_12 () Int)
(declare-fun addition_~m_12 () Int)
(declare-fun |addition_#in~m_15| () Int)
(declare-fun addition_~n_15 () Int)
(declare-fun |addition_#in~n_15| () Int)
(declare-fun addition_~m_15 () Int)
(declare-fun addition_~n_16 () Int)
(declare-fun addition_~m_16 () Int)
(declare-fun |addition_#in~m_19| () Int)
(declare-fun addition_~n_19 () Int)
(declare-fun |addition_#in~n_19| () Int)
(declare-fun addition_~m_19 () Int)
(declare-fun addition_~n_20 () Int)
(declare-fun addition_~m_20 () Int)
(declare-fun |addition_#in~m_23| () Int)
(declare-fun addition_~n_23 () Int)
(declare-fun |addition_#in~n_23| () Int)
(declare-fun addition_~m_23 () Int)
(declare-fun addition_~n_24 () Int)
(declare-fun addition_~m_24 () Int)
(declare-fun |addition_#res_25| () Int)
(declare-fun addition_~n_25 () Int)
(declare-fun addition_~m_25 () Int)
(declare-fun |addition_#t~ret4_27| () Int)
(declare-fun |addition_#res_27| () Int)
(declare-fun |addition_#t~ret4_28| () Int)
(declare-fun |addition_#res_28| () Int)
(declare-fun |addition_#t~ret4_30| () Int)
(declare-fun |addition_#res_30| () Int)
(declare-fun |addition_#t~ret4_31| () Int)
(declare-fun |addition_#res_31| () Int)
(declare-fun |addition_#t~ret4_33| () Int)
(declare-fun |addition_#res_33| () Int)
(declare-fun |addition_#t~ret4_34| () Int)
(declare-fun |addition_#res_34| () Int)
(declare-fun |addition_#t~ret4_36| () Int)
(declare-fun |addition_#res_36| () Int)
(declare-fun |addition_#t~ret4_37| () Int)
(declare-fun |addition_#res_37| () Int)
(declare-fun |addition_#t~ret4_39| () Int)
(declare-fun |addition_#res_39| () Int)
(declare-fun |addition_#t~ret4_40| () Int)
(declare-fun |addition_#res_40| () Int)
(declare-fun |addition_#t~ret4_42| () Int)
(declare-fun |addition_#res_42| () Int)
(declare-fun |addition_#t~ret4_43| () Int)
(declare-fun |addition_#res_43| () Int)
(declare-fun |main_#t~ret8_45| () Int)
(declare-fun |addition_#res_45| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~n~0_-2 6)) :named ssa_postcond))
(assert (! (and (= |addition_#in~n_-1| addition_~n_0) (= |addition_#in~m_-1| addition_~m_0)) :named ssa_0))
(assert (! (not (= 0 addition_~n_0)) :named ssa_1))
(assert (! (< 0 addition_~n_0) :named ssa_2))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_3| (+ addition_~m_0 1)) (= addition_~n_0 (+ 1 |addition_#in~n_3|))) :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_3| addition_~n_4) (= |addition_#in~m_3| addition_~m_4)) :named ssa_4))
(assert (! (not (= 0 addition_~n_4)) :named ssa_5))
(assert (! (< 0 addition_~n_4) :named ssa_6))
(assert (! true :named ssa_7_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_7| (+ addition_~m_4 1)) (= addition_~n_4 (+ 1 |addition_#in~n_7|))) :named ssa_7_LocVarAssigCall))
(assert (! true :named ssa_7_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_7| addition_~n_8) (= |addition_#in~m_7| addition_~m_8)) :named ssa_8))
(assert (! (not (= 0 addition_~n_8)) :named ssa_9))
(assert (! (< 0 addition_~n_8) :named ssa_10))
(assert (! true :named ssa_11_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_11| (+ addition_~m_8 1)) (= addition_~n_8 (+ 1 |addition_#in~n_11|))) :named ssa_11_LocVarAssigCall))
(assert (! true :named ssa_11_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_11| addition_~n_12) (= |addition_#in~m_11| addition_~m_12)) :named ssa_12))
(assert (! (not (= 0 addition_~n_12)) :named ssa_13))
(assert (! (< 0 addition_~n_12) :named ssa_14))
(assert (! true :named ssa_15_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_15| (+ addition_~m_12 1)) (= addition_~n_12 (+ 1 |addition_#in~n_15|))) :named ssa_15_LocVarAssigCall))
(assert (! true :named ssa_15_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_15| addition_~n_16) (= |addition_#in~m_15| addition_~m_16)) :named ssa_16))
(assert (! (not (= 0 addition_~n_16)) :named ssa_17))
(assert (! (< 0 addition_~n_16) :named ssa_18))
(assert (! true :named ssa_19_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_19| (+ addition_~m_16 1)) (= addition_~n_16 (+ 1 |addition_#in~n_19|))) :named ssa_19_LocVarAssigCall))
(assert (! true :named ssa_19_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_19| addition_~n_20) (= |addition_#in~m_19| addition_~m_20)) :named ssa_20))
(assert (! (not (= 0 addition_~n_20)) :named ssa_21))
(assert (! (< 0 addition_~n_20) :named ssa_22))
(assert (! true :named ssa_23_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_23| (+ addition_~m_20 1)) (= addition_~n_20 (+ 1 |addition_#in~n_23|))) :named ssa_23_LocVarAssigCall))
(assert (! true :named ssa_23_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_23| addition_~n_24) (= |addition_#in~m_23| addition_~m_24)) :named ssa_24))
(assert (! (and (= 0 addition_~n_24) (= |addition_#res_25| addition_~m_24)) :named ssa_25))
(assert (! true :named ssa_26))
(assert (! (= |addition_#res_25| |addition_#t~ret4_27|) :named ssa_27_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_27|)) (<= |addition_#t~ret4_27| 9223372036854775807) (= |addition_#res_28| |addition_#t~ret4_27|)) :named ssa_28))
(assert (! true :named ssa_29))
(assert (! (= |addition_#res_28| |addition_#t~ret4_30|) :named ssa_30_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_30|)) (<= |addition_#t~ret4_30| 9223372036854775807) (= |addition_#res_31| |addition_#t~ret4_30|)) :named ssa_31))
(assert (! true :named ssa_32))
(assert (! (= |addition_#res_31| |addition_#t~ret4_33|) :named ssa_33_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_33|)) (<= |addition_#t~ret4_33| 9223372036854775807) (= |addition_#res_34| |addition_#t~ret4_33|)) :named ssa_34))
(assert (! true :named ssa_35))
(assert (! (= |addition_#res_34| |addition_#t~ret4_36|) :named ssa_36_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_36|)) (<= |addition_#t~ret4_36| 9223372036854775807) (= |addition_#res_37| |addition_#t~ret4_36|)) :named ssa_37))
(assert (! true :named ssa_38))
(assert (! (= |addition_#res_37| |addition_#t~ret4_39|) :named ssa_39_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_39|)) (<= |addition_#t~ret4_39| 9223372036854775807) (= |addition_#res_40| |addition_#t~ret4_39|)) :named ssa_40))
(assert (! true :named ssa_41))
(assert (! (= |addition_#res_40| |addition_#t~ret4_42|) :named ssa_42_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_42|)) (<= |addition_#t~ret4_42| 9223372036854775807) (= |addition_#res_43| |addition_#t~ret4_42|)) :named ssa_43))
(assert (! true :named ssa_44))
(assert (! (= |addition_#res_43| |main_#t~ret8_45|) :named ssa_45_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (and (= |addition_#in~m_-1| main_~m~0_-2) (= main_~n~0_-2 |addition_#in~n_-1|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_13 ssa_3_OldVarAssigCall ssa_20 ssa_19_GlobVarAssigCall ssa_31 ssa_16 ssa_15_LocVarAssigCall ssa_6 ssa_26 ssa_3_LocVarAssigCall ssa_34 ssa_7_LocVarAssigCall ssa_11_LocVarAssigCall ssa_27_return ssa_40 ssa_10 ssa_14 ssa_8 ssa_9 ssa_25 ssa_15_GlobVarAssigCall ssa_39_return ssa_3_GlobVarAssigCall ssa_23_OldVarAssigCall ssa_19_OldVarAssigCall ssa_7_OldVarAssigCall ssa_23_LocVarAssigCall ssa_37 ssa_38 ssa_12 ssa_5 ssa_11_OldVarAssigCall ssa_32 ssa_19_LocVarAssigCall ssa_28 ssa_4 ssa_22 ssa_29 ssa_42_return ssa_23_GlobVarAssigCall ssa_21 ssa_30_return ssa_11_GlobVarAssigCall ssa_33_return ssa_18 ssa_36_return ssa_17 ssa_7_GlobVarAssigCall ssa_35 ssa_15_OldVarAssigCall ssa_41 ssa_24) ssa_43 ssa_44 (and ssa_-2_PendingContext ssa_45_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun addition_~n_-2 () Int)
(declare-fun |addition_#in~n_-2| () Int)
(declare-fun addition_~m_-2 () Int)
(declare-fun |addition_#in~m_-1| () Int)
(declare-fun addition_~n_-1 () Int)
(declare-fun |addition_#in~n_-1| () Int)
(declare-fun addition_~m_-1 () Int)
(declare-fun addition_~n_0 () Int)
(declare-fun addition_~m_0 () Int)
(declare-fun |addition_#in~m_3| () Int)
(declare-fun addition_~n_3 () Int)
(declare-fun |addition_#in~n_3| () Int)
(declare-fun addition_~m_3 () Int)
(declare-fun addition_~n_4 () Int)
(declare-fun addition_~m_4 () Int)
(declare-fun |addition_#in~m_7| () Int)
(declare-fun addition_~n_7 () Int)
(declare-fun |addition_#in~n_7| () Int)
(declare-fun addition_~m_7 () Int)
(declare-fun addition_~n_8 () Int)
(declare-fun addition_~m_8 () Int)
(declare-fun |addition_#in~m_11| () Int)
(declare-fun addition_~n_11 () Int)
(declare-fun |addition_#in~n_11| () Int)
(declare-fun addition_~m_11 () Int)
(declare-fun addition_~n_12 () Int)
(declare-fun addition_~m_12 () Int)
(declare-fun |addition_#in~m_15| () Int)
(declare-fun addition_~n_15 () Int)
(declare-fun |addition_#in~n_15| () Int)
(declare-fun addition_~m_15 () Int)
(declare-fun addition_~n_16 () Int)
(declare-fun addition_~m_16 () Int)
(declare-fun |addition_#in~m_19| () Int)
(declare-fun addition_~n_19 () Int)
(declare-fun |addition_#in~n_19| () Int)
(declare-fun addition_~m_19 () Int)
(declare-fun addition_~n_20 () Int)
(declare-fun addition_~m_20 () Int)
(declare-fun |addition_#res_21| () Int)
(declare-fun addition_~n_21 () Int)
(declare-fun addition_~m_21 () Int)
(declare-fun |addition_#t~ret4_23| () Int)
(declare-fun |addition_#res_23| () Int)
(declare-fun |addition_#t~ret4_24| () Int)
(declare-fun |addition_#res_24| () Int)
(declare-fun |addition_#t~ret4_26| () Int)
(declare-fun |addition_#res_26| () Int)
(declare-fun |addition_#t~ret4_27| () Int)
(declare-fun |addition_#res_27| () Int)
(declare-fun |addition_#t~ret4_29| () Int)
(declare-fun |addition_#res_29| () Int)
(declare-fun |addition_#t~ret4_30| () Int)
(declare-fun |addition_#res_30| () Int)
(declare-fun |addition_#t~ret4_32| () Int)
(declare-fun |addition_#res_32| () Int)
(declare-fun |addition_#t~ret4_33| () Int)
(declare-fun |addition_#res_33| () Int)
(declare-fun |addition_#t~ret4_35| () Int)
(declare-fun |addition_#res_35| () Int)
(declare-fun |addition_#t~ret4_36| () Int)
(declare-fun |addition_#res_36| () Int)
(declare-fun |addition_#t~ret4_38| () Int)
(declare-fun |addition_#res_38| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= |addition_#in~n_-2| 6)) :named ssa_postcond))
(assert (! (and (= |addition_#in~n_-1| addition_~n_0) (= |addition_#in~m_-1| addition_~m_0)) :named ssa_0))
(assert (! (not (= 0 addition_~n_0)) :named ssa_1))
(assert (! (< 0 addition_~n_0) :named ssa_2))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_3| (+ addition_~m_0 1)) (= addition_~n_0 (+ 1 |addition_#in~n_3|))) :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_3| addition_~n_4) (= |addition_#in~m_3| addition_~m_4)) :named ssa_4))
(assert (! (not (= 0 addition_~n_4)) :named ssa_5))
(assert (! (< 0 addition_~n_4) :named ssa_6))
(assert (! true :named ssa_7_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_7| (+ addition_~m_4 1)) (= addition_~n_4 (+ 1 |addition_#in~n_7|))) :named ssa_7_LocVarAssigCall))
(assert (! true :named ssa_7_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_7| addition_~n_8) (= |addition_#in~m_7| addition_~m_8)) :named ssa_8))
(assert (! (not (= 0 addition_~n_8)) :named ssa_9))
(assert (! (< 0 addition_~n_8) :named ssa_10))
(assert (! true :named ssa_11_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_11| (+ addition_~m_8 1)) (= addition_~n_8 (+ 1 |addition_#in~n_11|))) :named ssa_11_LocVarAssigCall))
(assert (! true :named ssa_11_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_11| addition_~n_12) (= |addition_#in~m_11| addition_~m_12)) :named ssa_12))
(assert (! (not (= 0 addition_~n_12)) :named ssa_13))
(assert (! (< 0 addition_~n_12) :named ssa_14))
(assert (! true :named ssa_15_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_15| (+ addition_~m_12 1)) (= addition_~n_12 (+ 1 |addition_#in~n_15|))) :named ssa_15_LocVarAssigCall))
(assert (! true :named ssa_15_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_15| addition_~n_16) (= |addition_#in~m_15| addition_~m_16)) :named ssa_16))
(assert (! (not (= 0 addition_~n_16)) :named ssa_17))
(assert (! (< 0 addition_~n_16) :named ssa_18))
(assert (! true :named ssa_19_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_19| (+ addition_~m_16 1)) (= addition_~n_16 (+ 1 |addition_#in~n_19|))) :named ssa_19_LocVarAssigCall))
(assert (! true :named ssa_19_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_19| addition_~n_20) (= |addition_#in~m_19| addition_~m_20)) :named ssa_20))
(assert (! (and (= 0 addition_~n_20) (= |addition_#res_21| addition_~m_20)) :named ssa_21))
(assert (! true :named ssa_22))
(assert (! (= |addition_#res_21| |addition_#t~ret4_23|) :named ssa_23_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_23|)) (<= |addition_#t~ret4_23| 9223372036854775807) (= |addition_#res_24| |addition_#t~ret4_23|)) :named ssa_24))
(assert (! true :named ssa_25))
(assert (! (= |addition_#res_24| |addition_#t~ret4_26|) :named ssa_26_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_26|)) (<= |addition_#t~ret4_26| 9223372036854775807) (= |addition_#res_27| |addition_#t~ret4_26|)) :named ssa_27))
(assert (! true :named ssa_28))
(assert (! (= |addition_#res_27| |addition_#t~ret4_29|) :named ssa_29_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_29|)) (<= |addition_#t~ret4_29| 9223372036854775807) (= |addition_#res_30| |addition_#t~ret4_29|)) :named ssa_30))
(assert (! true :named ssa_31))
(assert (! (= |addition_#res_30| |addition_#t~ret4_32|) :named ssa_32_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_32|)) (<= |addition_#t~ret4_32| 9223372036854775807) (= |addition_#res_33| |addition_#t~ret4_32|)) :named ssa_33))
(assert (! true :named ssa_34))
(assert (! (= |addition_#res_33| |addition_#t~ret4_35|) :named ssa_35_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_35|)) (<= |addition_#t~ret4_35| 9223372036854775807) (= |addition_#res_36| |addition_#t~ret4_35|)) :named ssa_36))
(assert (! true :named ssa_37))
(assert (! (= |addition_#res_36| |addition_#t~ret4_38|) :named ssa_38_return))
(assert (! (= |addition_#in~n_-2| addition_~n_-2) :named ssa_-2_PendingContext))
(assert (! (and (= |addition_#in~m_-1| (+ addition_~m_-2 1)) (= addition_~n_-2 (+ 1 |addition_#in~n_-1|))) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_13 ssa_3_OldVarAssigCall ssa_27 ssa_20 ssa_19_GlobVarAssigCall ssa_31 ssa_16 ssa_15_LocVarAssigCall ssa_6 ssa_3_LocVarAssigCall ssa_34 ssa_7_LocVarAssigCall ssa_11_LocVarAssigCall ssa_10 ssa_14 ssa_8 ssa_9 ssa_25 ssa_15_GlobVarAssigCall ssa_3_GlobVarAssigCall ssa_26_return ssa_19_OldVarAssigCall ssa_7_OldVarAssigCall ssa_29_return ssa_32_return ssa_12 ssa_5 ssa_11_OldVarAssigCall ssa_19_LocVarAssigCall ssa_28 ssa_4 ssa_22 ssa_35_return ssa_21 ssa_11_GlobVarAssigCall ssa_18 ssa_23_return ssa_30 ssa_17 ssa_33 ssa_7_GlobVarAssigCall ssa_15_OldVarAssigCall ssa_24) ssa_36 ssa_37 (and ssa_38_return ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun addition_~n_-2 () Int)
(declare-fun |addition_#in~n_-2| () Int)
(declare-fun addition_~m_-2 () Int)
(declare-fun |addition_#in~m_-1| () Int)
(declare-fun addition_~n_-1 () Int)
(declare-fun |addition_#in~n_-1| () Int)
(declare-fun addition_~m_-1 () Int)
(declare-fun addition_~n_0 () Int)
(declare-fun addition_~m_0 () Int)
(declare-fun |addition_#in~m_3| () Int)
(declare-fun addition_~n_3 () Int)
(declare-fun |addition_#in~n_3| () Int)
(declare-fun addition_~m_3 () Int)
(declare-fun addition_~n_4 () Int)
(declare-fun addition_~m_4 () Int)
(declare-fun |addition_#in~m_7| () Int)
(declare-fun addition_~n_7 () Int)
(declare-fun |addition_#in~n_7| () Int)
(declare-fun addition_~m_7 () Int)
(declare-fun addition_~n_8 () Int)
(declare-fun addition_~m_8 () Int)
(declare-fun |addition_#in~m_11| () Int)
(declare-fun addition_~n_11 () Int)
(declare-fun |addition_#in~n_11| () Int)
(declare-fun addition_~m_11 () Int)
(declare-fun addition_~n_12 () Int)
(declare-fun addition_~m_12 () Int)
(declare-fun |addition_#in~m_15| () Int)
(declare-fun addition_~n_15 () Int)
(declare-fun |addition_#in~n_15| () Int)
(declare-fun addition_~m_15 () Int)
(declare-fun addition_~n_16 () Int)
(declare-fun addition_~m_16 () Int)
(declare-fun |addition_#res_17| () Int)
(declare-fun addition_~n_17 () Int)
(declare-fun addition_~m_17 () Int)
(declare-fun |addition_#t~ret4_19| () Int)
(declare-fun |addition_#res_19| () Int)
(declare-fun |addition_#t~ret4_20| () Int)
(declare-fun |addition_#res_20| () Int)
(declare-fun |addition_#t~ret4_22| () Int)
(declare-fun |addition_#res_22| () Int)
(declare-fun |addition_#t~ret4_23| () Int)
(declare-fun |addition_#res_23| () Int)
(declare-fun |addition_#t~ret4_25| () Int)
(declare-fun |addition_#res_25| () Int)
(declare-fun |addition_#t~ret4_26| () Int)
(declare-fun |addition_#res_26| () Int)
(declare-fun |addition_#t~ret4_28| () Int)
(declare-fun |addition_#res_28| () Int)
(declare-fun |addition_#t~ret4_29| () Int)
(declare-fun |addition_#res_29| () Int)
(declare-fun |addition_#t~ret4_31| () Int)
(declare-fun |addition_#res_31| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= |addition_#in~n_-2| 5)) :named ssa_postcond))
(assert (! (and (= |addition_#in~n_-1| addition_~n_0) (= |addition_#in~m_-1| addition_~m_0)) :named ssa_0))
(assert (! (not (= 0 addition_~n_0)) :named ssa_1))
(assert (! (< 0 addition_~n_0) :named ssa_2))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_3| (+ addition_~m_0 1)) (= addition_~n_0 (+ 1 |addition_#in~n_3|))) :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_3| addition_~n_4) (= |addition_#in~m_3| addition_~m_4)) :named ssa_4))
(assert (! (not (= 0 addition_~n_4)) :named ssa_5))
(assert (! (< 0 addition_~n_4) :named ssa_6))
(assert (! true :named ssa_7_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_7| (+ addition_~m_4 1)) (= addition_~n_4 (+ 1 |addition_#in~n_7|))) :named ssa_7_LocVarAssigCall))
(assert (! true :named ssa_7_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_7| addition_~n_8) (= |addition_#in~m_7| addition_~m_8)) :named ssa_8))
(assert (! (not (= 0 addition_~n_8)) :named ssa_9))
(assert (! (< 0 addition_~n_8) :named ssa_10))
(assert (! true :named ssa_11_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_11| (+ addition_~m_8 1)) (= addition_~n_8 (+ 1 |addition_#in~n_11|))) :named ssa_11_LocVarAssigCall))
(assert (! true :named ssa_11_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_11| addition_~n_12) (= |addition_#in~m_11| addition_~m_12)) :named ssa_12))
(assert (! (not (= 0 addition_~n_12)) :named ssa_13))
(assert (! (< 0 addition_~n_12) :named ssa_14))
(assert (! true :named ssa_15_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_15| (+ addition_~m_12 1)) (= addition_~n_12 (+ 1 |addition_#in~n_15|))) :named ssa_15_LocVarAssigCall))
(assert (! true :named ssa_15_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_15| addition_~n_16) (= |addition_#in~m_15| addition_~m_16)) :named ssa_16))
(assert (! (and (= 0 addition_~n_16) (= |addition_#res_17| addition_~m_16)) :named ssa_17))
(assert (! true :named ssa_18))
(assert (! (= |addition_#res_17| |addition_#t~ret4_19|) :named ssa_19_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_19|)) (<= |addition_#t~ret4_19| 9223372036854775807) (= |addition_#res_20| |addition_#t~ret4_19|)) :named ssa_20))
(assert (! true :named ssa_21))
(assert (! (= |addition_#res_20| |addition_#t~ret4_22|) :named ssa_22_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_22|)) (<= |addition_#t~ret4_22| 9223372036854775807) (= |addition_#res_23| |addition_#t~ret4_22|)) :named ssa_23))
(assert (! true :named ssa_24))
(assert (! (= |addition_#res_23| |addition_#t~ret4_25|) :named ssa_25_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_25|)) (<= |addition_#t~ret4_25| 9223372036854775807) (= |addition_#res_26| |addition_#t~ret4_25|)) :named ssa_26))
(assert (! true :named ssa_27))
(assert (! (= |addition_#res_26| |addition_#t~ret4_28|) :named ssa_28_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_28|)) (<= |addition_#t~ret4_28| 9223372036854775807) (= |addition_#res_29| |addition_#t~ret4_28|)) :named ssa_29))
(assert (! true :named ssa_30))
(assert (! (= |addition_#res_29| |addition_#t~ret4_31|) :named ssa_31_return))
(assert (! (= |addition_#in~n_-2| addition_~n_-2) :named ssa_-2_PendingContext))
(assert (! (and (= |addition_#in~m_-1| (+ addition_~m_-2 1)) (= addition_~n_-2 (+ 1 |addition_#in~n_-1|))) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_13 ssa_25_return ssa_3_OldVarAssigCall ssa_27 ssa_20 ssa_16 ssa_15_LocVarAssigCall ssa_6 ssa_26 ssa_3_LocVarAssigCall ssa_7_LocVarAssigCall ssa_11_LocVarAssigCall ssa_10 ssa_14 ssa_8 ssa_9 ssa_15_GlobVarAssigCall ssa_3_GlobVarAssigCall ssa_28_return ssa_7_OldVarAssigCall ssa_22_return ssa_12 ssa_5 ssa_11_OldVarAssigCall ssa_19_return ssa_4 ssa_21 ssa_11_GlobVarAssigCall ssa_18 ssa_23 ssa_17 ssa_7_GlobVarAssigCall ssa_15_OldVarAssigCall ssa_24) ssa_29 ssa_30 (and ssa_-2_PendingContext ssa_31_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun addition_~n_-2 () Int)
(declare-fun |addition_#in~n_-2| () Int)
(declare-fun addition_~m_-2 () Int)
(declare-fun |addition_#in~m_-1| () Int)
(declare-fun addition_~n_-1 () Int)
(declare-fun |addition_#in~n_-1| () Int)
(declare-fun addition_~m_-1 () Int)
(declare-fun addition_~n_0 () Int)
(declare-fun addition_~m_0 () Int)
(declare-fun |addition_#in~m_3| () Int)
(declare-fun addition_~n_3 () Int)
(declare-fun |addition_#in~n_3| () Int)
(declare-fun addition_~m_3 () Int)
(declare-fun addition_~n_4 () Int)
(declare-fun addition_~m_4 () Int)
(declare-fun |addition_#in~m_7| () Int)
(declare-fun addition_~n_7 () Int)
(declare-fun |addition_#in~n_7| () Int)
(declare-fun addition_~m_7 () Int)
(declare-fun addition_~n_8 () Int)
(declare-fun addition_~m_8 () Int)
(declare-fun |addition_#in~m_11| () Int)
(declare-fun addition_~n_11 () Int)
(declare-fun |addition_#in~n_11| () Int)
(declare-fun addition_~m_11 () Int)
(declare-fun addition_~n_12 () Int)
(declare-fun addition_~m_12 () Int)
(declare-fun |addition_#res_13| () Int)
(declare-fun addition_~n_13 () Int)
(declare-fun addition_~m_13 () Int)
(declare-fun |addition_#t~ret4_15| () Int)
(declare-fun |addition_#res_15| () Int)
(declare-fun |addition_#t~ret4_16| () Int)
(declare-fun |addition_#res_16| () Int)
(declare-fun |addition_#t~ret4_18| () Int)
(declare-fun |addition_#res_18| () Int)
(declare-fun |addition_#t~ret4_19| () Int)
(declare-fun |addition_#res_19| () Int)
(declare-fun |addition_#t~ret4_21| () Int)
(declare-fun |addition_#res_21| () Int)
(declare-fun |addition_#t~ret4_22| () Int)
(declare-fun |addition_#res_22| () Int)
(declare-fun |addition_#t~ret4_24| () Int)
(declare-fun |addition_#res_24| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= |addition_#in~n_-2| 4)) :named ssa_postcond))
(assert (! (and (= |addition_#in~n_-1| addition_~n_0) (= |addition_#in~m_-1| addition_~m_0)) :named ssa_0))
(assert (! (not (= 0 addition_~n_0)) :named ssa_1))
(assert (! (< 0 addition_~n_0) :named ssa_2))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_3| (+ addition_~m_0 1)) (= addition_~n_0 (+ 1 |addition_#in~n_3|))) :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_3| addition_~n_4) (= |addition_#in~m_3| addition_~m_4)) :named ssa_4))
(assert (! (not (= 0 addition_~n_4)) :named ssa_5))
(assert (! (< 0 addition_~n_4) :named ssa_6))
(assert (! true :named ssa_7_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_7| (+ addition_~m_4 1)) (= addition_~n_4 (+ 1 |addition_#in~n_7|))) :named ssa_7_LocVarAssigCall))
(assert (! true :named ssa_7_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_7| addition_~n_8) (= |addition_#in~m_7| addition_~m_8)) :named ssa_8))
(assert (! (not (= 0 addition_~n_8)) :named ssa_9))
(assert (! (< 0 addition_~n_8) :named ssa_10))
(assert (! true :named ssa_11_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_11| (+ addition_~m_8 1)) (= addition_~n_8 (+ 1 |addition_#in~n_11|))) :named ssa_11_LocVarAssigCall))
(assert (! true :named ssa_11_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_11| addition_~n_12) (= |addition_#in~m_11| addition_~m_12)) :named ssa_12))
(assert (! (and (= 0 addition_~n_12) (= |addition_#res_13| addition_~m_12)) :named ssa_13))
(assert (! true :named ssa_14))
(assert (! (= |addition_#res_13| |addition_#t~ret4_15|) :named ssa_15_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_15|)) (<= |addition_#t~ret4_15| 9223372036854775807) (= |addition_#res_16| |addition_#t~ret4_15|)) :named ssa_16))
(assert (! true :named ssa_17))
(assert (! (= |addition_#res_16| |addition_#t~ret4_18|) :named ssa_18_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_18|)) (<= |addition_#t~ret4_18| 9223372036854775807) (= |addition_#res_19| |addition_#t~ret4_18|)) :named ssa_19))
(assert (! true :named ssa_20))
(assert (! (= |addition_#res_19| |addition_#t~ret4_21|) :named ssa_21_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_21|)) (<= |addition_#t~ret4_21| 9223372036854775807) (= |addition_#res_22| |addition_#t~ret4_21|)) :named ssa_22))
(assert (! true :named ssa_23))
(assert (! (= |addition_#res_22| |addition_#t~ret4_24|) :named ssa_24_return))
(assert (! (= |addition_#in~n_-2| addition_~n_-2) :named ssa_-2_PendingContext))
(assert (! (and (= |addition_#in~m_-1| (+ addition_~m_-2 1)) (= addition_~n_-2 (+ 1 |addition_#in~n_-1|))) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_13 ssa_3_OldVarAssigCall ssa_20 ssa_18_return ssa_16 ssa_6 ssa_3_LocVarAssigCall ssa_7_LocVarAssigCall ssa_11_LocVarAssigCall ssa_10 ssa_14 ssa_8 ssa_9 ssa_3_GlobVarAssigCall ssa_7_OldVarAssigCall ssa_19 ssa_12 ssa_5 ssa_11_OldVarAssigCall ssa_4 ssa_11_GlobVarAssigCall ssa_21_return ssa_17 ssa_7_GlobVarAssigCall ssa_15_return) ssa_22 ssa_23 (and ssa_-2_PendingContext ssa_24_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun addition_~n_-2 () Int)
(declare-fun |addition_#in~n_-2| () Int)
(declare-fun addition_~m_-2 () Int)
(declare-fun |addition_#in~m_-1| () Int)
(declare-fun addition_~n_-1 () Int)
(declare-fun |addition_#in~n_-1| () Int)
(declare-fun addition_~m_-1 () Int)
(declare-fun addition_~n_0 () Int)
(declare-fun addition_~m_0 () Int)
(declare-fun |addition_#in~m_3| () Int)
(declare-fun addition_~n_3 () Int)
(declare-fun |addition_#in~n_3| () Int)
(declare-fun addition_~m_3 () Int)
(declare-fun addition_~n_4 () Int)
(declare-fun addition_~m_4 () Int)
(declare-fun |addition_#in~m_7| () Int)
(declare-fun addition_~n_7 () Int)
(declare-fun |addition_#in~n_7| () Int)
(declare-fun addition_~m_7 () Int)
(declare-fun addition_~n_8 () Int)
(declare-fun addition_~m_8 () Int)
(declare-fun |addition_#res_9| () Int)
(declare-fun addition_~n_9 () Int)
(declare-fun addition_~m_9 () Int)
(declare-fun |addition_#t~ret4_11| () Int)
(declare-fun |addition_#res_11| () Int)
(declare-fun |addition_#t~ret4_12| () Int)
(declare-fun |addition_#res_12| () Int)
(declare-fun |addition_#t~ret4_14| () Int)
(declare-fun |addition_#res_14| () Int)
(declare-fun |addition_#t~ret4_15| () Int)
(declare-fun |addition_#res_15| () Int)
(declare-fun |addition_#t~ret4_17| () Int)
(declare-fun |addition_#res_17| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= |addition_#in~n_-2| 3)) :named ssa_postcond))
(assert (! (and (= |addition_#in~n_-1| addition_~n_0) (= |addition_#in~m_-1| addition_~m_0)) :named ssa_0))
(assert (! (not (= 0 addition_~n_0)) :named ssa_1))
(assert (! (< 0 addition_~n_0) :named ssa_2))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_3| (+ addition_~m_0 1)) (= addition_~n_0 (+ 1 |addition_#in~n_3|))) :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_3| addition_~n_4) (= |addition_#in~m_3| addition_~m_4)) :named ssa_4))
(assert (! (not (= 0 addition_~n_4)) :named ssa_5))
(assert (! (< 0 addition_~n_4) :named ssa_6))
(assert (! true :named ssa_7_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_7| (+ addition_~m_4 1)) (= addition_~n_4 (+ 1 |addition_#in~n_7|))) :named ssa_7_LocVarAssigCall))
(assert (! true :named ssa_7_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_7| addition_~n_8) (= |addition_#in~m_7| addition_~m_8)) :named ssa_8))
(assert (! (and (= 0 addition_~n_8) (= |addition_#res_9| addition_~m_8)) :named ssa_9))
(assert (! true :named ssa_10))
(assert (! (= |addition_#res_9| |addition_#t~ret4_11|) :named ssa_11_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_11|)) (<= |addition_#t~ret4_11| 9223372036854775807) (= |addition_#res_12| |addition_#t~ret4_11|)) :named ssa_12))
(assert (! true :named ssa_13))
(assert (! (= |addition_#res_12| |addition_#t~ret4_14|) :named ssa_14_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_14|)) (<= |addition_#t~ret4_14| 9223372036854775807) (= |addition_#res_15| |addition_#t~ret4_14|)) :named ssa_15))
(assert (! true :named ssa_16))
(assert (! (= |addition_#res_15| |addition_#t~ret4_17|) :named ssa_17_return))
(assert (! (= |addition_#in~n_-2| addition_~n_-2) :named ssa_-2_PendingContext))
(assert (! (and (= |addition_#in~m_-1| (+ addition_~m_-2 1)) (= addition_~n_-2 (+ 1 |addition_#in~n_-1|))) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_13 ssa_3_OldVarAssigCall ssa_11_return ssa_6 ssa_3_LocVarAssigCall ssa_7_LocVarAssigCall ssa_10 ssa_8 ssa_9 ssa_3_GlobVarAssigCall ssa_7_OldVarAssigCall ssa_12 ssa_5 ssa_4 ssa_7_GlobVarAssigCall ssa_14_return) ssa_15 ssa_16 (and ssa_-2_PendingContext ssa_17_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun addition_~n_-2 () Int)
(declare-fun |addition_#in~n_-2| () Int)
(declare-fun addition_~m_-2 () Int)
(declare-fun |addition_#in~m_-1| () Int)
(declare-fun addition_~n_-1 () Int)
(declare-fun |addition_#in~n_-1| () Int)
(declare-fun addition_~m_-1 () Int)
(declare-fun addition_~n_0 () Int)
(declare-fun addition_~m_0 () Int)
(declare-fun |addition_#in~m_3| () Int)
(declare-fun addition_~n_3 () Int)
(declare-fun |addition_#in~n_3| () Int)
(declare-fun addition_~m_3 () Int)
(declare-fun addition_~n_4 () Int)
(declare-fun addition_~m_4 () Int)
(declare-fun |addition_#res_5| () Int)
(declare-fun addition_~n_5 () Int)
(declare-fun addition_~m_5 () Int)
(declare-fun |addition_#t~ret4_7| () Int)
(declare-fun |addition_#res_7| () Int)
(declare-fun |addition_#t~ret4_8| () Int)
(declare-fun |addition_#res_8| () Int)
(declare-fun |addition_#t~ret4_10| () Int)
(declare-fun |addition_#res_10| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= |addition_#in~n_-2| 2)) :named ssa_postcond))
(assert (! (and (= |addition_#in~n_-1| addition_~n_0) (= |addition_#in~m_-1| addition_~m_0)) :named ssa_0))
(assert (! (not (= 0 addition_~n_0)) :named ssa_1))
(assert (! (< 0 addition_~n_0) :named ssa_2))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! (and (= |addition_#in~m_3| (+ addition_~m_0 1)) (= addition_~n_0 (+ 1 |addition_#in~n_3|))) :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (= |addition_#in~n_3| addition_~n_4) (= |addition_#in~m_3| addition_~m_4)) :named ssa_4))
(assert (! (and (= 0 addition_~n_4) (= |addition_#res_5| addition_~m_4)) :named ssa_5))
(assert (! true :named ssa_6))
(assert (! (= |addition_#res_5| |addition_#t~ret4_7|) :named ssa_7_return))
(assert (! (and (<= 0 (+ 9223372036854775808 |addition_#t~ret4_7|)) (<= |addition_#t~ret4_7| 9223372036854775807) (= |addition_#res_8| |addition_#t~ret4_7|)) :named ssa_8))
(assert (! true :named ssa_9))
(assert (! (= |addition_#res_8| |addition_#t~ret4_10|) :named ssa_10_return))
(assert (! (= |addition_#in~n_-2| addition_~n_-2) :named ssa_-2_PendingContext))
(assert (! (and (= |addition_#in~m_-1| (+ addition_~m_-2 1)) (= addition_~n_-2 (+ 1 |addition_#in~n_-1|))) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_3_OldVarAssigCall ssa_6 ssa_3_LocVarAssigCall ssa_7_return ssa_3_GlobVarAssigCall ssa_5 ssa_4) ssa_8 ssa_9 (and ssa_10_return ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun addition_~n_-2 () Int)
(declare-fun |addition_#in~n_-2| () Int)
(declare-fun addition_~m_-2 () Int)
(declare-fun |addition_#in~m_-1| () Int)
(declare-fun addition_~n_-1 () Int)
(declare-fun |addition_#in~n_-1| () Int)
(declare-fun addition_~m_-1 () Int)
(declare-fun addition_~n_0 () Int)
(declare-fun addition_~m_0 () Int)
(declare-fun |addition_#res_1| () Int)
(declare-fun addition_~n_1 () Int)
(declare-fun addition_~m_1 () Int)
(declare-fun |addition_#t~ret4_3| () Int)
(declare-fun |addition_#res_3| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= |addition_#in~n_-2| 1)) :named ssa_postcond))
(assert (! (and (= |addition_#in~n_-1| addition_~n_0) (= |addition_#in~m_-1| addition_~m_0)) :named ssa_0))
(assert (! (and (= 0 addition_~n_0) (= |addition_#res_1| addition_~m_0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! (= |addition_#res_1| |addition_#t~ret4_3|) :named ssa_3_return))
(assert (! (= |addition_#in~n_-2| addition_~n_-2) :named ssa_-2_PendingContext))
(assert (! (and (= |addition_#in~m_-1| (+ addition_~m_-2 1)) (= addition_~n_-2 (+ 1 |addition_#in~n_-1|))) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(exit)
