(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-31T00:18:31+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id lcp.c_AllErrorsAtOnce_Iteration5)
(define-fun ~initToZeroAtPointerBaseAddress~int ((in0 (Array Int (Array Int Int))) (in1 Int)) (Array Int (Array Int Int)) (store in0 in1 ((as const (Array Int Int)) 0)))
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#1)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#1)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#1| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#1_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#2)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#2)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#2| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#2_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c_read~int#2_#ptr.base| () Int)
(declare-fun |c_read~int#2_#ptr.base_primed| () Int)
(declare-fun |c_read~int#2_#ptr.offset| () Int)
(declare-fun |c_read~int#2_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#2_#sizeOfReadType| () Int)
(declare-fun |c_read~int#2_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#2_#value| () Int)
(declare-fun |c_read~int#2_#value_primed| () Int)
(declare-fun |c_read~int#1_#ptr.base| () Int)
(declare-fun |c_read~int#1_#ptr.base_primed| () Int)
(declare-fun |c_read~int#1_#ptr.offset| () Int)
(declare-fun |c_read~int#1_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#1_#sizeOfReadType| () Int)
(declare-fun |c_read~int#1_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#1_#value| () Int)
(declare-fun |c_read~int#1_#value_primed| () Int)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~nondet14| () Int)
(declare-fun |c_main_#t~nondet14_primed| () Int)
(declare-fun |c_main_#t~malloc15.base| () Int)
(declare-fun |c_main_#t~malloc15.base_primed| () Int)
(declare-fun |c_main_#t~malloc15.offset| () Int)
(declare-fun |c_main_#t~malloc15.offset_primed| () Int)
(declare-fun |c_main_#t~nondet16| () Int)
(declare-fun |c_main_#t~nondet16_primed| () Int)
(declare-fun |c_main_#t~nondet17| () Int)
(declare-fun |c_main_#t~nondet17_primed| () Int)
(declare-fun |c_main_#t~ret18| () Int)
(declare-fun |c_main_#t~ret18_primed| () Int)
(declare-fun c_main_~n~0 () Int)
(declare-fun c_main_~n~0_primed () Int)
(declare-fun c_main_~a~0.base () Int)
(declare-fun c_main_~a~0.base_primed () Int)
(declare-fun c_main_~a~0.offset () Int)
(declare-fun c_main_~a~0.offset_primed () Int)
(declare-fun c_main_~x~0 () Int)
(declare-fun c_main_~x~0_primed () Int)
(declare-fun c_main_~y~0 () Int)
(declare-fun c_main_~y~0_primed () Int)
(declare-fun c_main_~l~1 () Int)
(declare-fun c_main_~l~1_primed () Int)
(declare-fun |c_calloc_#in~nmemb| () Int)
(declare-fun |c_calloc_#in~nmemb_primed| () Int)
(declare-fun |c_calloc_#in~size| () Int)
(declare-fun |c_calloc_#in~size_primed| () Int)
(declare-fun |c_calloc_#res.base| () Int)
(declare-fun |c_calloc_#res.base_primed| () Int)
(declare-fun |c_calloc_#res.offset| () Int)
(declare-fun |c_calloc_#res.offset_primed| () Int)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_write~int#1_#value| () Int)
(declare-fun |c_write~int#1_#value_primed| () Int)
(declare-fun |c_write~int#1_#ptr.base| () Int)
(declare-fun |c_write~int#1_#ptr.base_primed| () Int)
(declare-fun |c_write~int#1_#ptr.offset| () Int)
(declare-fun |c_write~int#1_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#1_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#1_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_write~int#2_#value| () Int)
(declare-fun |c_write~int#2_#value_primed| () Int)
(declare-fun |c_write~int#2_#ptr.base| () Int)
(declare-fun |c_write~int#2_#ptr.base_primed| () Int)
(declare-fun |c_write~int#2_#ptr.offset| () Int)
(declare-fun |c_write~int#2_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#2_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#2_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_lcp_#in~a.base| () Int)
(declare-fun |c_lcp_#in~a.base_primed| () Int)
(declare-fun |c_lcp_#in~a.offset| () Int)
(declare-fun |c_lcp_#in~a.offset_primed| () Int)
(declare-fun |c_lcp_#in~n| () Int)
(declare-fun |c_lcp_#in~n_primed| () Int)
(declare-fun |c_lcp_#in~x| () Int)
(declare-fun |c_lcp_#in~x_primed| () Int)
(declare-fun |c_lcp_#in~y| () Int)
(declare-fun |c_lcp_#in~y_primed| () Int)
(declare-fun |c_lcp_#res| () Int)
(declare-fun |c_lcp_#res_primed| () Int)
(declare-fun |c_lcp_#t~mem5| () Int)
(declare-fun |c_lcp_#t~mem5_primed| () Int)
(declare-fun |c_lcp_#t~mem6| () Int)
(declare-fun |c_lcp_#t~mem6_primed| () Int)
(declare-fun |c_lcp_#t~short7| () Bool)
(declare-fun |c_lcp_#t~short7_primed| () Bool)
(declare-fun |c_lcp_#t~post8| () Int)
(declare-fun |c_lcp_#t~post8_primed| () Int)
(declare-fun c_lcp_~a.base () Int)
(declare-fun c_lcp_~a.base_primed () Int)
(declare-fun c_lcp_~a.offset () Int)
(declare-fun c_lcp_~a.offset_primed () Int)
(declare-fun c_lcp_~n () Int)
(declare-fun c_lcp_~n_primed () Int)
(declare-fun c_lcp_~x () Int)
(declare-fun c_lcp_~x_primed () Int)
(declare-fun c_lcp_~y () Int)
(declare-fun c_lcp_~y_primed () Int)
(declare-fun c_lcp_~l~0 () Int)
(declare-fun c_lcp_~l~0_primed () Int)
(declare-fun |c_#Ultimate.meminit_#ptr.base| () Int)
(declare-fun |c_#Ultimate.meminit_#ptr.base_primed| () Int)
(declare-fun |c_#Ultimate.meminit_#ptr.offset| () Int)
(declare-fun |c_#Ultimate.meminit_#ptr.offset_primed| () Int)
(declare-fun |c_#Ultimate.meminit_#amountOfFields| () Int)
(declare-fun |c_#Ultimate.meminit_#amountOfFields_primed| () Int)
(declare-fun |c_#Ultimate.meminit_#sizeOfFields| () Int)
(declare-fun |c_#Ultimate.meminit_#sizeOfFields_primed| () Int)
(declare-fun |c_#Ultimate.meminit_#product| () Int)
(declare-fun |c_#Ultimate.meminit_#product_primed| () Int)
(declare-fun |c_free_#in~0.base| () Int)
(declare-fun |c_free_#in~0.base_primed| () Int)
(declare-fun |c_free_#in~0.offset| () Int)
(declare-fun |c_free_#in~0.offset_primed| () Int)
(declare-fun |c_write~init~int#2_#value| () Int)
(declare-fun |c_write~init~int#2_#value_primed| () Int)
(declare-fun |c_write~init~int#2_#ptr.base| () Int)
(declare-fun |c_write~init~int#2_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#2_#ptr.offset| () Int)
(declare-fun |c_write~init~int#2_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#2_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#2_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_write~init~int#1_#value| () Int)
(declare-fun |c_write~init~int#1_#value_primed| () Int)
(declare-fun |c_write~init~int#1_#ptr.base| () Int)
(declare-fun |c_write~init~int#1_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#1_#ptr.offset| () Int)
(declare-fun |c_write~init~int#1_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#1_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#1_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_assume_abort_if_not_#in~cond| () Int)
(declare-fun |c_assume_abort_if_not_#in~cond_primed| () Int)
(declare-fun c_assume_abort_if_not_~cond () Int)
(declare-fun c_assume_abort_if_not_~cond_primed () Int)
(declare-fun |c_check_#in~a.base| () Int)
(declare-fun |c_check_#in~a.base_primed| () Int)
(declare-fun |c_check_#in~a.offset| () Int)
(declare-fun |c_check_#in~a.offset_primed| () Int)
(declare-fun |c_check_#in~n| () Int)
(declare-fun |c_check_#in~n_primed| () Int)
(declare-fun |c_check_#in~x| () Int)
(declare-fun |c_check_#in~x_primed| () Int)
(declare-fun |c_check_#in~y| () Int)
(declare-fun |c_check_#in~y_primed| () Int)
(declare-fun |c_check_#in~l| () Int)
(declare-fun |c_check_#in~l_primed| () Int)
(declare-fun |c_check_#t~nondet9| () Int)
(declare-fun |c_check_#t~nondet9_primed| () Int)
(declare-fun |c_check_#t~mem10| () Int)
(declare-fun |c_check_#t~mem10_primed| () Int)
(declare-fun |c_check_#t~mem11| () Int)
(declare-fun |c_check_#t~mem11_primed| () Int)
(declare-fun |c_check_#t~mem12| () Int)
(declare-fun |c_check_#t~mem12_primed| () Int)
(declare-fun |c_check_#t~mem13| () Int)
(declare-fun |c_check_#t~mem13_primed| () Int)
(declare-fun c_check_~a.base () Int)
(declare-fun c_check_~a.base_primed () Int)
(declare-fun c_check_~a.offset () Int)
(declare-fun c_check_~a.offset_primed () Int)
(declare-fun c_check_~n () Int)
(declare-fun c_check_~n_primed () Int)
(declare-fun c_check_~x () Int)
(declare-fun c_check_~x_primed () Int)
(declare-fun c_check_~y () Int)
(declare-fun c_check_~y_primed () Int)
(declare-fun c_check_~l () Int)
(declare-fun c_check_~l_primed () Int)
(declare-fun c_check_~i~0 () Int)
(declare-fun c_check_~i~0_primed () Int)
(declare-fun |c_#Ultimate.allocOnHeap_~size| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_#res.base| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_#res.base_primed| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_#res.offset| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_#res.offset_primed| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res_primed| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret19| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret19_primed| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond_primed| () Int)
(declare-fun c___VERIFIER_assert_~cond () Int)
(declare-fun c___VERIFIER_assert_~cond_primed () Int)
(declare-fun |c___assert_fail_#in~1.base| () Int)
(declare-fun |c___assert_fail_#in~1.base_primed| () Int)
(declare-fun |c___assert_fail_#in~1.offset| () Int)
(declare-fun |c___assert_fail_#in~1.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~2.base| () Int)
(declare-fun |c___assert_fail_#in~2.base_primed| () Int)
(declare-fun |c___assert_fail_#in~2.offset| () Int)
(declare-fun |c___assert_fail_#in~2.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~3| () Int)
(declare-fun |c___assert_fail_#in~3_primed| () Int)
(declare-fun |c___assert_fail_#in~4.base| () Int)
(declare-fun |c___assert_fail_#in~4.base_primed| () Int)
(declare-fun |c___assert_fail_#in~4.offset| () Int)
(declare-fun |c___assert_fail_#in~4.offset_primed| () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun |c_aux_v_lcp_#t~mem6_4| () Int)
(declare-fun |c_aux_v_lcp_#t~mem5_4| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_2| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_2| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_2| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_2| () Int)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret19_3| () Int)
(declare-fun c_aux_v_ArrVal_1 () Int)
(declare-fun c_aux_v_ArrVal_2 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_3| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_3| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_3| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_3| () Int)
(declare-fun c_aux_v_ArrVal_3 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_4 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_5 () Int)
(declare-fun c_aux_v_ArrVal_6 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_4| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_4| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_4| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_4| () Int)
(declare-fun c_aux_v_ArrVal_7 () (Array Int Int))
(declare-fun |c_aux_v_lcp_#t~mem5_5| () Int)
(declare-fun |c_aux_v_lcp_#t~mem6_5| () Int)
(declare-fun c_aux_v_ArrVal_8 () (Array Int Int))
(declare-fun |c_aux_v_lcp_#t~mem6_6| () Int)
(declare-fun |c_aux_v_lcp_#t~mem5_6| () Int)
(declare-fun c_aux_v_ArrVal_9 () Int)
(declare-fun c_aux_v_ArrVal_10 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_5| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_5| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_5| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_5| () Int)
(declare-fun c_aux_v_ArrVal_11 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_12 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_13 () Int)
(declare-fun c_aux_v_ArrVal_14 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_6| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_6| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_6| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_6| () Int)
(declare-fun c_aux_v_ArrVal_15 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_16 () (Array Int Int))
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#memory_int#2_-1| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#0)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-1| () (Array Int Int))
(declare-fun |old(#length)_-1| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#1)_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |old(#valid)_3| () (Array Int Int))
(declare-fun |old(#length)_3| () (Array Int Int))
(declare-fun |old(#memory_int#2)_3| () (Array Int (Array Int Int)))
(declare-fun |#valid_3| () (Array Int Int))
(declare-fun |#length_3| () (Array Int Int))
(declare-fun |#memory_int#2_3| () (Array Int (Array Int Int)))
(declare-fun |main_#t~nondet14_4| () Int)
(declare-fun main_~n~0_4 () Int)
(declare-fun main_~n~0_5 () Int)
(declare-fun |assume_abort_if_not_#in~cond_5| () Int)
(declare-fun assume_abort_if_not_~cond_6 () Int)
(declare-fun assume_abort_if_not_~cond_7 () Int)
(declare-fun |main_#t~malloc15.offset_10| () Int)
(declare-fun |#valid_10| () (Array Int Int))
(declare-fun |#length_10| () (Array Int Int))
(declare-fun |main_#t~malloc15.base_10| () Int)
(declare-fun v_ArrVal_17_fresh_1 () Int)
(declare-fun v_ArrVal_18_fresh_1 () Int)
(declare-fun |old(#memory_int#2)_11| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#2_11| () (Array Int (Array Int Int)))
(declare-fun |main_#t~malloc15.offset_11| () Int)
(declare-fun main_~n~0_11 () Int)
(declare-fun |#Ultimate.meminit_#ptr.base_11| () Int)
(declare-fun |main_#t~malloc15.base_11| () Int)
(declare-fun |v_#Ultimate.meminit_#ptr.offsetInParam_7_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#sizeOfFieldsInParam_7_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#amountOfFieldsInParam_7_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#productInParam_7_fresh_1| () Int)
(declare-fun |#memory_int#2_12| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_19_fresh_1 () (Array Int Int))
(declare-fun |main_#t~nondet16_14| () Int)
(declare-fun |main_#t~malloc15.offset_14| () Int)
(declare-fun main_~x~0_14 () Int)
(declare-fun |main_#t~nondet17_14| () Int)
(declare-fun main_~a~0.base_14 () Int)
(declare-fun main_~y~0_14 () Int)
(declare-fun |main_#t~malloc15.base_14| () Int)
(declare-fun main_~a~0.offset_14 () Int)
(declare-fun main_~x~0_15 () Int)
(declare-fun main_~y~0_15 () Int)
(declare-fun |assume_abort_if_not_#in~cond_15| () Int)
(declare-fun assume_abort_if_not_~cond_16 () Int)
(declare-fun assume_abort_if_not_~cond_17 () Int)
(declare-fun |lcp_#in~a.offset_20| () Int)
(declare-fun |lcp_#in~y_20| () Int)
(declare-fun main_~x~0_20 () Int)
(declare-fun |lcp_#in~x_20| () Int)
(declare-fun |lcp_#in~a.base_20| () Int)
(declare-fun main_~a~0.base_20 () Int)
(declare-fun |lcp_#in~n_20| () Int)
(declare-fun main_~y~0_20 () Int)
(declare-fun main_~n~0_20 () Int)
(declare-fun main_~a~0.offset_20 () Int)
(declare-fun lcp_~x_21 () Int)
(declare-fun lcp_~l~0_21 () Int)
(declare-fun lcp_~a.offset_21 () Int)
(declare-fun lcp_~y_21 () Int)
(declare-fun lcp_~a.base_21 () Int)
(declare-fun lcp_~n_21 () Int)
(declare-fun |lcp_#t~short7_22| () Bool)
(declare-fun |lcp_#t~short7_23| () Bool)
(declare-fun |v_lcp_#t~mem5_7_fresh_1| () Int)
(declare-fun |v_lcp_#t~mem6_7_fresh_1| () Int)
(declare-fun lcp_~l~0_24 () Int)
(declare-fun |lcp_#t~mem6_24| () Int)
(declare-fun |lcp_#t~mem5_24| () Int)
(declare-fun |lcp_#t~short7_24| () Bool)
(declare-fun |lcp_#t~post8_24| () Int)
(declare-fun |lcp_#t~short7_25| () Bool)
(declare-fun |lcp_#t~mem6_27| () Int)
(declare-fun |lcp_#t~mem5_27| () Int)
(declare-fun |lcp_#t~short7_27| () Bool)
(declare-fun |lcp_#res_28| () Int)
(declare-fun lcp_~l~0_28 () Int)
(declare-fun |main_#t~ret18_29| () Int)
(declare-fun |lcp_#res_29| () Int)
(declare-fun |main_#t~ret18_30| () Int)
(declare-fun main_~l~1_30 () Int)
(declare-fun |check_#in~y_31| () Int)
(declare-fun |check_#in~x_31| () Int)
(declare-fun |check_#in~a.offset_31| () Int)
(declare-fun main_~x~0_31 () Int)
(declare-fun main_~l~1_31 () Int)
(declare-fun |check_#in~a.base_31| () Int)
(declare-fun main_~a~0.base_31 () Int)
(declare-fun main_~y~0_31 () Int)
(declare-fun main_~n~0_31 () Int)
(declare-fun |check_#in~l_31| () Int)
(declare-fun main_~a~0.offset_31 () Int)
(declare-fun |check_#in~n_31| () Int)
(declare-fun check_~y_32 () Int)
(declare-fun check_~x_32 () Int)
(declare-fun check_~a.base_32 () Int)
(declare-fun check_~a.offset_32 () Int)
(declare-fun check_~i~0_32 () Int)
(declare-fun check_~n_32 () Int)
(declare-fun |check_#t~nondet9_32| () Int)
(declare-fun check_~l_32 () Int)
(declare-fun check_~i~0_33 () Int)
(declare-fun |assume_abort_if_not_#in~cond_33| () Int)
(declare-fun check_~l_33 () Int)
(declare-fun assume_abort_if_not_~cond_34 () Int)
(declare-fun assume_abort_if_not_~cond_35 () Int)
(declare-fun |check_#t~mem10_38| () Int)
(declare-fun check_~i~0_38 () Int)
(declare-fun |check_#t~mem11_38| () Int)
(declare-fun |__VERIFIER_assert_#in~cond_39| () Int)
(declare-fun |check_#t~mem10_39| () Int)
(declare-fun |check_#t~mem11_39| () Int)
(declare-fun __VERIFIER_assert_~cond_40 () Int)
(declare-fun __VERIFIER_assert_~cond_41 () Int)
(declare-fun |check_#t~mem10_44| () Int)
(declare-fun |check_#t~mem11_44| () Int)
(declare-fun |check_#t~mem13_45| () Int)
(declare-fun check_~y_45 () Int)
(declare-fun check_~x_45 () Int)
(declare-fun check_~a.base_45 () Int)
(declare-fun check_~a.offset_45 () Int)
(declare-fun |check_#t~mem12_45| () Int)
(declare-fun check_~n_45 () Int)
(declare-fun check_~l_45 () Int)
(declare-fun |check_#t~mem13_46| () Int)
(declare-fun |__VERIFIER_assert_#in~cond_46| () Int)
(declare-fun |check_#t~mem12_46| () Int)
(declare-fun __VERIFIER_assert_~cond_47 () Int)
(declare-fun __VERIFIER_assert_~cond_48 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! true :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! true :named ssa_0_OldVarAssigCall))
(assert (! (and (= (select |#valid_-1| 1) 1) (= (select |#valid_-1| 2) 1) (= 46 (select (select |#memory_int#1_-1| 2) 3)) (= (select |#length_-1| 2) 6) (= (select (select |#memory_int#1_-1| 2) 1) 99) (< 0 |#StackHeapBarrier_-1|) (= (select (select |#memory_int#1_-1| 2) 4) 99) (= (select |#valid_-1| 3) 1) (= (select (select |#memory_int#1_-1| 2) 5) 0) (= (select |#valid_-1| 0) 0) (= (select |#length_-1| 1) 2) (= (select |#length_-1| 3) 12) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select (select |#memory_int#1_-1| 2) 2) 112) (= 108 (select (select |#memory_int#1_-1| 2) 0))) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! (and (= |old(#valid)_3| |#valid_3|) (= |old(#memory_int#2)_3| |#memory_int#2_3|) (= |#length_3| |old(#length)_3|)) :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! (and (= |old(#length)_3| |#length_-1|) (= |#valid_-1| |old(#valid)_3|) (= |old(#memory_int#2)_3| |#memory_int#2_-1|)) :named ssa_3_OldVarAssigCall))
(assert (! (and (<= main_~n~0_4 2147483647) (<= 0 (+ main_~n~0_4 2147483648))) :named ssa_4))
(assert (! true :named ssa_5_GlobVarAssigCall))
(assert (! (= (ite (and (< main_~n~0_4 1073741824) (<= 0 main_~n~0_4)) 1 0) |assume_abort_if_not_#in~cond_5|) :named ssa_5_LocVarAssigCall))
(assert (! true :named ssa_5_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_5| assume_abort_if_not_~cond_6) :named ssa_6))
(assert (! (not (= assume_abort_if_not_~cond_6 0)) :named ssa_7))
(assert (! true :named ssa_8))
(assert (! true :named ssa_9_return))
(assert (! (and (not (= |main_#t~malloc15.base_10| 0)) (< |main_#t~malloc15.base_10| |#StackHeapBarrier_-1|) (= |main_#t~malloc15.offset_10| 0) (= |#length_10| (store |#length_3| |main_#t~malloc15.base_10| v_ArrVal_18_fresh_1)) (= v_ArrVal_17_fresh_1 1) (= (* 4 (mod main_~n~0_4 1073741824)) v_ArrVal_18_fresh_1) (= (store |#valid_3| |main_#t~malloc15.base_10| v_ArrVal_17_fresh_1) |#valid_10|) (= (select |#valid_3| |main_#t~malloc15.base_10|) 0)) :named ssa_10))
(assert (! (= |old(#memory_int#2)_11| |#memory_int#2_11|) :named ssa_11_GlobVarAssigCall))
(assert (! (and (= |#Ultimate.meminit_#ptr.base_11| |main_#t~malloc15.base_10|) (= |v_#Ultimate.meminit_#ptr.offsetInParam_7_fresh_1| |main_#t~malloc15.offset_10|) (= main_~n~0_4 |v_#Ultimate.meminit_#amountOfFieldsInParam_7_fresh_1|) (= |v_#Ultimate.meminit_#sizeOfFieldsInParam_7_fresh_1| 4) (= |v_#Ultimate.meminit_#productInParam_7_fresh_1| (* main_~n~0_4 4))) :named ssa_11_LocVarAssigCall))
(assert (! (= |old(#memory_int#2)_11| |#memory_int#2_3|) :named ssa_11_OldVarAssigCall))
(assert (! (and (= |#memory_int#2_12| (store |#memory_int#2_11| |#Ultimate.meminit_#ptr.base_11| v_ArrVal_19_fresh_1)) (= ((as const (Array Int Int)) 0) v_ArrVal_19_fresh_1)) :named ssa_12))
(assert (! true :named ssa_13_return))
(assert (! (and (<= main_~y~0_14 2147483647) (<= main_~x~0_14 2147483647) (<= 0 (+ main_~y~0_14 2147483648)) (<= 0 (+ main_~x~0_14 2147483648)) (= main_~a~0.offset_14 |main_#t~malloc15.offset_10|) (= main_~a~0.base_14 |main_#t~malloc15.base_10|)) :named ssa_14))
(assert (! true :named ssa_15_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_15| (ite (and (<= 0 main_~y~0_14) (<= 0 main_~x~0_14)) 1 0)) :named ssa_15_LocVarAssigCall))
(assert (! true :named ssa_15_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_15| assume_abort_if_not_~cond_16) :named ssa_16))
(assert (! (not (= assume_abort_if_not_~cond_16 0)) :named ssa_17))
(assert (! true :named ssa_18))
(assert (! true :named ssa_19_return))
(assert (! true :named ssa_20_GlobVarAssigCall))
(assert (! (and (= main_~y~0_14 |lcp_#in~y_20|) (= |lcp_#in~n_20| main_~n~0_4) (= main_~x~0_14 |lcp_#in~x_20|) (= |lcp_#in~a.offset_20| main_~a~0.offset_14) (= |lcp_#in~a.base_20| main_~a~0.base_14)) :named ssa_20_LocVarAssigCall))
(assert (! true :named ssa_20_OldVarAssigCall))
(assert (! (and (= lcp_~x_21 |lcp_#in~x_20|) (= lcp_~l~0_21 0) (= lcp_~a.base_21 |lcp_#in~a.base_20|) (= lcp_~n_21 |lcp_#in~n_20|) (= |lcp_#in~a.offset_20| lcp_~a.offset_21) (= lcp_~y_21 |lcp_#in~y_20|)) :named ssa_21))
(assert (! (or (and (< (+ lcp_~x_21 lcp_~l~0_21) lcp_~n_21) (< (+ lcp_~y_21 lcp_~l~0_21) lcp_~n_21) |lcp_#t~short7_22|) (and (or (<= lcp_~n_21 (+ lcp_~y_21 lcp_~l~0_21)) (<= lcp_~n_21 (+ lcp_~x_21 lcp_~l~0_21))) (not |lcp_#t~short7_22|))) :named ssa_22))
(assert (! (and (= (select (select |#memory_int#2_12| lcp_~a.base_21) (+ lcp_~a.offset_21 (* lcp_~l~0_21 4) (* lcp_~y_21 4))) |v_lcp_#t~mem6_7_fresh_1|) (or (and (= |v_lcp_#t~mem6_7_fresh_1| |v_lcp_#t~mem5_7_fresh_1|) |lcp_#t~short7_23|) (and (not (= |v_lcp_#t~mem6_7_fresh_1| |v_lcp_#t~mem5_7_fresh_1|)) (not |lcp_#t~short7_23|))) |lcp_#t~short7_22| (= |v_lcp_#t~mem5_7_fresh_1| (select (select |#memory_int#2_12| lcp_~a.base_21) (+ lcp_~a.offset_21 (* lcp_~l~0_21 4) (* lcp_~x_21 4))))) :named ssa_23))
(assert (! (and (= (+ lcp_~l~0_21 1) lcp_~l~0_24) |lcp_#t~short7_23|) :named ssa_24))
(assert (! (or (and (< (+ lcp_~x_21 lcp_~l~0_24) lcp_~n_21) (< (+ lcp_~y_21 lcp_~l~0_24) lcp_~n_21) |lcp_#t~short7_25|) (and (or (<= lcp_~n_21 (+ lcp_~y_21 lcp_~l~0_24)) (<= lcp_~n_21 (+ lcp_~x_21 lcp_~l~0_24))) (not |lcp_#t~short7_25|))) :named ssa_25))
(assert (! (not |lcp_#t~short7_25|) :named ssa_26))
(assert (! (not |lcp_#t~short7_25|) :named ssa_27))
(assert (! (= |lcp_#res_28| lcp_~l~0_24) :named ssa_28))
(assert (! (= |lcp_#res_28| |main_#t~ret18_29|) :named ssa_29_return))
(assert (! (and (<= |main_#t~ret18_29| 2147483647) (= main_~l~1_30 |main_#t~ret18_29|) (<= 0 (+ |main_#t~ret18_29| 2147483648))) :named ssa_30))
(assert (! true :named ssa_31_GlobVarAssigCall))
(assert (! (and (= main_~n~0_4 |check_#in~n_31|) (= |check_#in~a.base_31| main_~a~0.base_14) (= main_~y~0_14 |check_#in~y_31|) (= main_~x~0_14 |check_#in~x_31|) (= |check_#in~a.offset_31| main_~a~0.offset_14) (= |check_#in~l_31| main_~l~1_30)) :named ssa_31_LocVarAssigCall))
(assert (! true :named ssa_31_OldVarAssigCall))
(assert (! (and (= check_~y_32 |check_#in~y_31|) (= check_~a.base_32 |check_#in~a.base_31|) (<= 0 (+ check_~i~0_32 2147483648)) (= |check_#in~a.offset_31| check_~a.offset_32) (<= check_~i~0_32 2147483647) (= check_~n_32 |check_#in~n_31|) (= check_~l_32 |check_#in~l_31|) (= check_~x_32 |check_#in~x_31|)) :named ssa_32))
(assert (! true :named ssa_33_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_33| (ite (and (<= 0 check_~i~0_32) (< check_~i~0_32 check_~l_32)) 1 0)) :named ssa_33_LocVarAssigCall))
(assert (! true :named ssa_33_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_33| assume_abort_if_not_~cond_34) :named ssa_34))
(assert (! (not (= assume_abort_if_not_~cond_34 0)) :named ssa_35))
(assert (! true :named ssa_36))
(assert (! true :named ssa_37_return))
(assert (! (and (= |check_#t~mem10_38| (select (select |#memory_int#2_12| check_~a.base_32) (+ (* check_~x_32 4) check_~a.offset_32 (* check_~i~0_32 4)))) (= (select (select |#memory_int#2_12| check_~a.base_32) (+ (* check_~y_32 4) check_~a.offset_32 (* check_~i~0_32 4))) |check_#t~mem11_38|)) :named ssa_38))
(assert (! true :named ssa_39_GlobVarAssigCall))
(assert (! (= |__VERIFIER_assert_#in~cond_39| (ite (= |check_#t~mem11_38| |check_#t~mem10_38|) 1 0)) :named ssa_39_LocVarAssigCall))
(assert (! true :named ssa_39_OldVarAssigCall))
(assert (! (= __VERIFIER_assert_~cond_40 |__VERIFIER_assert_#in~cond_39|) :named ssa_40))
(assert (! (not (= __VERIFIER_assert_~cond_40 0)) :named ssa_41))
(assert (! true :named ssa_42))
(assert (! true :named ssa_43_return))
(assert (! true :named ssa_44))
(assert (! (and (< (+ check_~l_32 check_~y_32) check_~n_32) (< (+ check_~l_32 check_~x_32) check_~n_32) (= (select (select |#memory_int#2_12| check_~a.base_32) (+ (* check_~l_32 4) (* check_~y_32 4) check_~a.offset_32)) |check_#t~mem13_45|) (= (select (select |#memory_int#2_12| check_~a.base_32) (+ (* check_~l_32 4) (* check_~x_32 4) check_~a.offset_32)) |check_#t~mem12_45|)) :named ssa_45))
(assert (! true :named ssa_46_GlobVarAssigCall))
(assert (! (= |__VERIFIER_assert_#in~cond_46| (ite (not (= |check_#t~mem13_45| |check_#t~mem12_45|)) 1 0)) :named ssa_46_LocVarAssigCall))
(assert (! true :named ssa_46_OldVarAssigCall))
(assert (! (= __VERIFIER_assert_~cond_47 |__VERIFIER_assert_#in~cond_46|) :named ssa_47))
(assert (! (= __VERIFIER_assert_~cond_47 0) :named ssa_48))
(assert (! true :named ssa_49))
(check-sat)
(get-interpolants (and ssa_0_LocVarAssigCall ssa_precond ssa_0_GlobVarAssigCall ssa_0_OldVarAssigCall ssa_2_return ssa_1) (and ssa_3_OldVarAssigCall ssa_3_LocVarAssigCall ssa_3_GlobVarAssigCall) ssa_4 (and ssa_5_LocVarAssigCall ssa_5_GlobVarAssigCall ssa_7 ssa_6 ssa_8 ssa_5_OldVarAssigCall ssa_9_return) ssa_10 (and ssa_11_LocVarAssigCall ssa_13_return ssa_12 ssa_11_OldVarAssigCall ssa_11_GlobVarAssigCall) ssa_14 (and ssa_16 ssa_15_LocVarAssigCall ssa_15_GlobVarAssigCall ssa_19_return ssa_18 ssa_17 ssa_15_OldVarAssigCall) (and ssa_27 ssa_26 ssa_25 ssa_20_GlobVarAssigCall ssa_20_OldVarAssigCall ssa_29_return ssa_20_LocVarAssigCall ssa_28 ssa_22 ssa_21 ssa_23 ssa_24) ssa_30 (and ssa_31_LocVarAssigCall ssa_31_OldVarAssigCall ssa_31_GlobVarAssigCall) ssa_32 (and ssa_34 ssa_33_GlobVarAssigCall ssa_33_LocVarAssigCall ssa_36 ssa_37_return ssa_35 ssa_33_OldVarAssigCall) ssa_38 (and ssa_40 ssa_39_OldVarAssigCall ssa_39_GlobVarAssigCall ssa_43_return ssa_39_LocVarAssigCall ssa_41 ssa_42) ssa_44 ssa_45 (and ssa_46_OldVarAssigCall ssa_46_LocVarAssigCall ssa_46_GlobVarAssigCall) ssa_47 ssa_48 (and ssa_49 ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-2| () (Array Int (Array Int Int)))
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#0)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (= (select |#valid_-2| 1) 1) (= (select |#valid_-2| 2) 1) (= 46 (select (select |#memory_int#1_-2| 2) 3)) (= (select |#length_-2| 2) 6) (= (select (select |#memory_int#1_-2| 2) 1) 99) (< 0 |#StackHeapBarrier_-1|) (= (select (select |#memory_int#1_-2| 2) 4) 99) (= (select |#valid_-2| 3) 1) (= (select (select |#memory_int#1_-2| 2) 5) 0) (= (select |#valid_-2| 0) 0) (= (select |#length_-2| 1) 2) (= (select |#length_-2| 3) 12) (= (select (select |#memory_int#0_-2| 1) 1) 0) (= (select (select |#memory_int#0_-2| 1) 0) 48) (= (select (select |#memory_int#1_-2| 2) 2) 112) (= 108 (select (select |#memory_int#1_-2| 2) 0))) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! true :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun main_~n~0_-2 () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= (ite (and (< main_~n~0_-2 1073741824) (<= 0 main_~n~0_-2)) 1 0) |assume_abort_if_not_#in~cond_-1|) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun |main_#t~malloc15.offset_-2| () Int)
(declare-fun main_~n~0_-2 () Int)
(declare-fun |main_#t~malloc15.base_-2| () Int)
(declare-fun |old(#memory_int#2)_-1| () (Array Int (Array Int Int)))
(declare-fun |main_#t~malloc15.offset_-1| () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun |#Ultimate.meminit_#ptr.base_-1| () Int)
(declare-fun |main_#t~malloc15.base_-1| () Int)
(declare-fun |v_#Ultimate.meminit_#productInParam_2_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#ptr.offsetInParam_2_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#sizeOfFieldsInParam_2_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#amountOfFieldsInParam_2_fresh_1| () Int)
(declare-fun |#memory_int#2_-1| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#2_0| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_20_fresh_1 () (Array Int Int))
(assert (! (= |#memory_int#2_-1| |old(#memory_int#2)_-1|) :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (= |#memory_int#2_0| (store |#memory_int#2_-1| |#Ultimate.meminit_#ptr.base_-1| v_ArrVal_20_fresh_1)) (= ((as const (Array Int Int)) 0) v_ArrVal_20_fresh_1)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (and (= |#Ultimate.meminit_#ptr.base_-1| |main_#t~malloc15.base_-2|) (= |v_#Ultimate.meminit_#productInParam_2_fresh_1| (* main_~n~0_-2 4)) (= |v_#Ultimate.meminit_#sizeOfFieldsInParam_2_fresh_1| 4) (= main_~n~0_-2 |v_#Ultimate.meminit_#amountOfFieldsInParam_2_fresh_1|) (= |v_#Ultimate.meminit_#ptr.offsetInParam_2_fresh_1| |main_#t~malloc15.offset_-2|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! (= |old(#memory_int#2)_-1| |#memory_int#2_-2|) :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun main_~x~0_-2 () Int)
(declare-fun main_~y~0_-2 () Int)
(declare-fun main_~x~0_-1 () Int)
(declare-fun main_~y~0_-1 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |assume_abort_if_not_#in~cond_-1| (ite (and (<= 0 main_~y~0_-2) (<= 0 main_~x~0_-2)) 1 0)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun main_~x~0_-2 () Int)
(declare-fun main_~a~0.base_-2 () Int)
(declare-fun main_~y~0_-2 () Int)
(declare-fun main_~n~0_-2 () Int)
(declare-fun main_~a~0.offset_-2 () Int)
(declare-fun |lcp_#in~a.offset_-1| () Int)
(declare-fun |lcp_#in~y_-1| () Int)
(declare-fun main_~x~0_-1 () Int)
(declare-fun |lcp_#in~x_-1| () Int)
(declare-fun |lcp_#in~a.base_-1| () Int)
(declare-fun main_~a~0.base_-1 () Int)
(declare-fun |lcp_#in~n_-1| () Int)
(declare-fun main_~y~0_-1 () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun main_~a~0.offset_-1 () Int)
(declare-fun lcp_~x_0 () Int)
(declare-fun lcp_~l~0_0 () Int)
(declare-fun lcp_~a.offset_0 () Int)
(declare-fun lcp_~y_0 () Int)
(declare-fun lcp_~a.base_0 () Int)
(declare-fun lcp_~n_0 () Int)
(declare-fun |lcp_#t~short7_1| () Bool)
(declare-fun |lcp_#t~short7_2| () Bool)
(declare-fun |v_lcp_#t~mem6_8_fresh_1| () Int)
(declare-fun |v_lcp_#t~mem5_8_fresh_1| () Int)
(declare-fun lcp_~l~0_3 () Int)
(declare-fun |lcp_#t~mem6_3| () Int)
(declare-fun |lcp_#t~mem5_3| () Int)
(declare-fun |lcp_#t~short7_3| () Bool)
(declare-fun |lcp_#t~post8_3| () Int)
(declare-fun |lcp_#t~short7_4| () Bool)
(declare-fun |lcp_#t~mem6_6| () Int)
(declare-fun |lcp_#t~mem5_6| () Int)
(declare-fun |lcp_#t~short7_6| () Bool)
(declare-fun |lcp_#res_7| () Int)
(declare-fun lcp_~l~0_7 () Int)
(declare-fun |main_#t~ret18_8| () Int)
(declare-fun |lcp_#res_8| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (or (< main_~n~0_-2 (+ |main_#t~ret18_8| main_~x~0_-2 1)) (< main_~n~0_-2 (+ |main_#t~ret18_8| main_~y~0_-2 1)))) :named ssa_postcond))
(assert (! (and (= lcp_~x_0 |lcp_#in~x_-1|) (= lcp_~l~0_0 0) (= lcp_~a.base_0 |lcp_#in~a.base_-1|) (= lcp_~n_0 |lcp_#in~n_-1|) (= |lcp_#in~a.offset_-1| lcp_~a.offset_0) (= lcp_~y_0 |lcp_#in~y_-1|)) :named ssa_0))
(assert (! (or (and (< (+ lcp_~x_0 lcp_~l~0_0) lcp_~n_0) (< (+ lcp_~y_0 lcp_~l~0_0) lcp_~n_0) |lcp_#t~short7_1|) (and (or (<= lcp_~n_0 (+ lcp_~y_0 lcp_~l~0_0)) (<= lcp_~n_0 (+ lcp_~x_0 lcp_~l~0_0))) (not |lcp_#t~short7_1|))) :named ssa_1))
(assert (! (and (= |v_lcp_#t~mem5_8_fresh_1| (select (select |#memory_int#2_-2| lcp_~a.base_0) (+ lcp_~a.offset_0 (* lcp_~l~0_0 4) (* lcp_~x_0 4)))) (or (and (not |lcp_#t~short7_2|) (not (= |v_lcp_#t~mem6_8_fresh_1| |v_lcp_#t~mem5_8_fresh_1|))) (and (= |v_lcp_#t~mem6_8_fresh_1| |v_lcp_#t~mem5_8_fresh_1|) |lcp_#t~short7_2|)) |lcp_#t~short7_1| (= (select (select |#memory_int#2_-2| lcp_~a.base_0) (+ lcp_~a.offset_0 (* lcp_~l~0_0 4) (* lcp_~y_0 4))) |v_lcp_#t~mem6_8_fresh_1|)) :named ssa_2))
(assert (! (and (= (+ lcp_~l~0_0 1) lcp_~l~0_3) |lcp_#t~short7_2|) :named ssa_3))
(assert (! (or (and (< (+ lcp_~x_0 lcp_~l~0_3) lcp_~n_0) (< (+ lcp_~y_0 lcp_~l~0_3) lcp_~n_0) |lcp_#t~short7_4|) (and (or (<= lcp_~n_0 (+ lcp_~y_0 lcp_~l~0_3)) (<= lcp_~n_0 (+ lcp_~x_0 lcp_~l~0_3))) (not |lcp_#t~short7_4|))) :named ssa_4))
(assert (! (not |lcp_#t~short7_4|) :named ssa_5))
(assert (! (not |lcp_#t~short7_4|) :named ssa_6))
(assert (! (= |lcp_#res_7| lcp_~l~0_3) :named ssa_7))
(assert (! (= |lcp_#res_7| |main_#t~ret18_8|) :named ssa_8_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (and (= main_~y~0_-2 |lcp_#in~y_-1|) (= |lcp_#in~n_-1| main_~n~0_-2) (= main_~x~0_-2 |lcp_#in~x_-1|) (= |lcp_#in~a.offset_-1| main_~a~0.offset_-2) (= |lcp_#in~a.base_-1| main_~a~0.base_-2)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 ssa_3 ssa_4 ssa_5 ssa_6 ssa_7 (and ssa_8_return ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun check_~y_-2 () Int)
(declare-fun check_~x_-2 () Int)
(declare-fun check_~n_-2 () Int)
(declare-fun check_~l_-2 () Int)
(declare-fun check_~i~0_-2 () Int)
(declare-fun check_~i~0_-1 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun check_~l_-1 () Int)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not (or (< check_~n_-2 (+ check_~l_-2 check_~x_-2 1)) (< check_~n_-2 (+ check_~l_-2 check_~y_-2 1)))) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (or (< check_~n_-2 (+ check_~l_-2 check_~x_-2 1)) (< check_~n_-2 (+ check_~l_-2 check_~y_-2 1))) :named ssa_-2_PendingContext))
(assert (! (= |assume_abort_if_not_#in~cond_-1| (ite (and (<= 0 check_~i~0_-2) (< check_~i~0_-2 check_~l_-2)) 1 0)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun check_~y_-2 () Int)
(declare-fun check_~x_-2 () Int)
(declare-fun check_~n_-2 () Int)
(declare-fun check_~l_-2 () Int)
(declare-fun |check_#t~mem10_-2| () Int)
(declare-fun |check_#t~mem11_-2| () Int)
(declare-fun |__VERIFIER_assert_#in~cond_-1| () Int)
(declare-fun |check_#t~mem10_-1| () Int)
(declare-fun |check_#t~mem11_-1| () Int)
(declare-fun __VERIFIER_assert_~cond_0 () Int)
(declare-fun __VERIFIER_assert_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not (or (< check_~n_-2 (+ check_~l_-2 check_~x_-2 1)) (< check_~n_-2 (+ check_~l_-2 check_~y_-2 1)))) :named ssa_postcond))
(assert (! (= __VERIFIER_assert_~cond_0 |__VERIFIER_assert_#in~cond_-1|) :named ssa_0))
(assert (! (not (= __VERIFIER_assert_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (or (< check_~n_-2 (+ check_~l_-2 check_~x_-2 1)) (< check_~n_-2 (+ check_~l_-2 check_~y_-2 1))) :named ssa_-2_PendingContext))
(assert (! (= |__VERIFIER_assert_#in~cond_-1| (ite (= |check_#t~mem11_-2| |check_#t~mem10_-2|) 1 0)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(exit)
