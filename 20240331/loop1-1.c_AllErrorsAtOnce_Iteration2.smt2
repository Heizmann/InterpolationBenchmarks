(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-31T00:09:03+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id loop1-1.c_AllErrorsAtOnce_Iteration2)
(declare-fun ~someUnaryDOUBLEoperation (Real) Real)
(declare-fun ~someBinaryDOUBLEComparisonOperation (Real Real) Bool)
(declare-fun ~convertINTToFLOAT (Int) Real)
(declare-fun ~someBinaryArithmeticFLOAToperation (Real Real) Real)
(declare-fun ~convertUINTToFLOAT (Int) Real)
(declare-fun ~someBinaryFLOATComparisonOperation (Real Real) Bool)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c___VERIFIER_nondet_float_#res| () Real)
(declare-fun |c___VERIFIER_nondet_float_#res_primed| () Real)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_assume_abort_if_not_#in~cond| () Int)
(declare-fun |c_assume_abort_if_not_#in~cond_primed| () Int)
(declare-fun c_assume_abort_if_not_~cond () Int)
(declare-fun c_assume_abort_if_not_~cond_primed () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~nondet4| () Real)
(declare-fun |c_main_#t~nondet4_primed| () Real)
(declare-fun |c_main_#t~post5| () Int)
(declare-fun |c_main_#t~post5_primed| () Int)
(declare-fun |c_main_#t~nondet6| () Int)
(declare-fun |c_main_#t~nondet6_primed| () Int)
(declare-fun c_main_~x~0 () Real)
(declare-fun c_main_~x~0_primed () Real)
(declare-fun c_main_~exp~0 () Real)
(declare-fun c_main_~exp~0_primed () Real)
(declare-fun c_main_~term~0 () Real)
(declare-fun c_main_~term~0_primed () Real)
(declare-fun c_main_~count~0 () Int)
(declare-fun c_main_~count~0_primed () Int)
(declare-fun c_main_~result~0 () Real)
(declare-fun c_main_~result~0_primed () Real)
(declare-fun c_main_~temp~0 () Int)
(declare-fun c_main_~temp~0_primed () Int)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res_primed| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret7| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret7_primed| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond_primed| () Int)
(declare-fun c___VERIFIER_assert_~cond () Int)
(declare-fun c___VERIFIER_assert_~cond_primed () Int)
(declare-fun |c___assert_fail_#in~0.base| () Int)
(declare-fun |c___assert_fail_#in~0.base_primed| () Int)
(declare-fun |c___assert_fail_#in~0.offset| () Int)
(declare-fun |c___assert_fail_#in~0.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~1.base| () Int)
(declare-fun |c___assert_fail_#in~1.base_primed| () Int)
(declare-fun |c___assert_fail_#in~1.offset| () Int)
(declare-fun |c___assert_fail_#in~1.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~2| () Int)
(declare-fun |c___assert_fail_#in~2_primed| () Int)
(declare-fun |c___assert_fail_#in~3.base| () Int)
(declare-fun |c___assert_fail_#in~3.base_primed| () Int)
(declare-fun |c___assert_fail_#in~3.offset| () Int)
(declare-fun |c___assert_fail_#in~3.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun c_aux_v_~someBinaryDOUBLEComparisonOperation_4 () Bool)
(declare-fun c_aux_v_~someBinaryDOUBLEComparisonOperation_6 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_3 () Bool)
(declare-fun c_aux_v_main_~exp~0_3 () Real)
(declare-fun c_aux_v_main_~term~0_3 () Real)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret7_3| () Int)
(declare-fun c_aux_v_~someBinaryDOUBLEComparisonOperation_7 () Bool)
(declare-fun c_aux_v_~someBinaryDOUBLEComparisonOperation_8 () Bool)
(declare-fun c_aux_v_main_~term~0_4 () Real)
(declare-fun c_aux_v_main_~exp~0_4 () Real)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_4 () Bool)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun |main_#t~nondet4_4| () Real)
(declare-fun main_~x~0_4 () Real)
(declare-fun |assume_abort_if_not_#in~cond_5| () Int)
(declare-fun v_~someBinaryDOUBLEComparisonOperation_9_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_6 () Int)
(declare-fun assume_abort_if_not_~cond_7 () Int)
(declare-fun |assume_abort_if_not_#in~cond_10| () Int)
(declare-fun v_~someBinaryDOUBLEComparisonOperation_10_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_11 () Int)
(declare-fun assume_abort_if_not_~cond_12 () Int)
(declare-fun main_~result~0_15 () Real)
(declare-fun main_~temp~0_15 () Int)
(declare-fun main_~count~0_15 () Int)
(declare-fun v_main_~exp~0_5_fresh_1 () Real)
(declare-fun v_main_~term~0_5_fresh_1 () Real)
(declare-fun |main_#t~nondet6_16| () Int)
(declare-fun main_~temp~0_16 () Int)
(declare-fun main_~exp~0_16 () Real)
(declare-fun |main_#t~post5_16| () Int)
(declare-fun main_~count~0_16 () Int)
(declare-fun main_~term~0_16 () Real)
(declare-fun main_~temp~0_17 () Int)
(declare-fun |__VERIFIER_assert_#in~cond_18| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_5_fresh_1 () Bool)
(declare-fun __VERIFIER_assert_~cond_19 () Int)
(declare-fun __VERIFIER_assert_~cond_20 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! true :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! true :named ssa_0_OldVarAssigCall))
(assert (! (and (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#length_-1| 2) 10) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! true :named ssa_4))
(assert (! true :named ssa_5_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_5| (ite v_~someBinaryDOUBLEComparisonOperation_9_fresh_1 1 0)) :named ssa_5_LocVarAssigCall))
(assert (! true :named ssa_5_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_5| assume_abort_if_not_~cond_6) :named ssa_6))
(assert (! (not (= assume_abort_if_not_~cond_6 0)) :named ssa_7))
(assert (! true :named ssa_8))
(assert (! true :named ssa_9_return))
(assert (! true :named ssa_10_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_10| (ite v_~someBinaryDOUBLEComparisonOperation_10_fresh_1 1 0)) :named ssa_10_LocVarAssigCall))
(assert (! true :named ssa_10_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_10| assume_abort_if_not_~cond_11) :named ssa_11))
(assert (! (not (= assume_abort_if_not_~cond_11 0)) :named ssa_12))
(assert (! true :named ssa_13))
(assert (! true :named ssa_14_return))
(assert (! (and (= main_~count~0_15 1) (= v_main_~exp~0_5_fresh_1 1.0) (= v_main_~term~0_5_fresh_1 1.0)) :named ssa_15))
(assert (! (and (= main_~count~0_16 (+ main_~count~0_15 1)) (<= main_~temp~0_16 2147483647) (<= 0 (+ main_~temp~0_16 2147483648))) :named ssa_16))
(assert (! (= main_~temp~0_16 0) :named ssa_17))
(assert (! true :named ssa_18_GlobVarAssigCall))
(assert (! (= (ite v_~someBinaryFLOATComparisonOperation_5_fresh_1 1 0) |__VERIFIER_assert_#in~cond_18|) :named ssa_18_LocVarAssigCall))
(assert (! true :named ssa_18_OldVarAssigCall))
(assert (! (= __VERIFIER_assert_~cond_19 |__VERIFIER_assert_#in~cond_18|) :named ssa_19))
(assert (! (= __VERIFIER_assert_~cond_19 0) :named ssa_20))
(assert (! true :named ssa_21))
(check-sat)
(echo "Trace is feasible, we will do another trace check, this time with branch encoders.")
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |main_#t~nondet4_4| () Real)
(declare-fun main_~x~0_4 () Real)
(declare-fun |assume_abort_if_not_#in~cond_5| () Int)
(declare-fun v_~someBinaryDOUBLEComparisonOperation_4_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_6 () Int)
(declare-fun assume_abort_if_not_~cond_7 () Int)
(declare-fun |assume_abort_if_not_#in~cond_10| () Int)
(declare-fun v_~someBinaryDOUBLEComparisonOperation_6_fresh_1 () Bool)
(declare-fun assume_abort_if_not_~cond_11 () Int)
(declare-fun assume_abort_if_not_~cond_12 () Int)
(declare-fun main_~result~0_15 () Real)
(declare-fun main_~temp~0_15 () Int)
(declare-fun main_~count~0_15 () Int)
(declare-fun v_main_~exp~0_3_fresh_1 () Real)
(declare-fun v_main_~term~0_3_fresh_1 () Real)
(declare-fun |main_#t~nondet6_16| () Int)
(declare-fun main_~temp~0_16 () Int)
(declare-fun main_~exp~0_16 () Real)
(declare-fun |main_#t~post5_16| () Int)
(declare-fun main_~count~0_16 () Int)
(declare-fun main_~term~0_16 () Real)
(declare-fun main_~temp~0_17 () Int)
(declare-fun |__VERIFIER_assert_#in~cond_18| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_3_fresh_1 () Bool)
(declare-fun __VERIFIER_assert_~cond_19 () Int)
(declare-fun __VERIFIER_assert_~cond_20 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! true :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! true :named ssa_0_OldVarAssigCall))
(assert (! (and (= 2 (select |#length_-1| 1)) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#valid_-1| 1) 1) (< 0 |#StackHeapBarrier_-1|) (= (select |#valid_-1| 3) 1) (= 48 (select (select |#memory_int#0_-1| 1) 0)) (= (select |#valid_-1| 0) 0) (= (select |#length_-1| 2) 10) (= (select |#valid_-1| 2) 1) (= 12 (select |#length_-1| 3))) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! true :named ssa_4))
(assert (! true :named ssa_5_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_5| (ite v_~someBinaryDOUBLEComparisonOperation_4_fresh_1 1 0)) :named ssa_5_LocVarAssigCall))
(assert (! true :named ssa_5_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_5| assume_abort_if_not_~cond_6) :named ssa_6))
(assert (! (not (= assume_abort_if_not_~cond_6 0)) :named ssa_7))
(assert (! true :named ssa_8))
(assert (! true :named ssa_9_return))
(assert (! true :named ssa_10_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_10| (ite v_~someBinaryDOUBLEComparisonOperation_6_fresh_1 1 0)) :named ssa_10_LocVarAssigCall))
(assert (! true :named ssa_10_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_10| assume_abort_if_not_~cond_11) :named ssa_11))
(assert (! (not (= assume_abort_if_not_~cond_11 0)) :named ssa_12))
(assert (! true :named ssa_13))
(assert (! true :named ssa_14_return))
(assert (! (and (= v_main_~exp~0_3_fresh_1 1.0) (= v_main_~term~0_3_fresh_1 1.0) (= main_~count~0_15 1)) :named ssa_15))
(assert (! (and (= main_~count~0_16 (+ main_~count~0_15 1)) (<= main_~temp~0_16 2147483647) (<= 0 (+ main_~temp~0_16 2147483648))) :named ssa_16))
(assert (! (= main_~temp~0_16 0) :named ssa_17))
(assert (! true :named ssa_18_GlobVarAssigCall))
(assert (! (= (ite v_~someBinaryFLOATComparisonOperation_3_fresh_1 1 0) |__VERIFIER_assert_#in~cond_18|) :named ssa_18_LocVarAssigCall))
(assert (! true :named ssa_18_OldVarAssigCall))
(assert (! (= __VERIFIER_assert_~cond_19 |__VERIFIER_assert_#in~cond_18|) :named ssa_19))
(assert (! (= __VERIFIER_assert_~cond_19 0) :named ssa_20))
(assert (! true :named ssa_21))
(check-sat)
(get-value (|main_#t~nondet4_4|))
(get-value (main_~temp~0_15))
(get-value (main_~temp~0_16))
(get-value (main_~temp~0_17))
(get-value (|main_#t~nondet6_16|))
(get-value (main_~x~0_4))
(get-value (|main_#t~post5_16|))
(get-value (main_~result~0_15))
(get-value (|#StackHeapBarrier_-1|))
(get-value (|__VERIFIER_assert_#in~cond_18|))
(get-value (main_~exp~0_16))
(get-value (assume_abort_if_not_~cond_6))
(get-value (assume_abort_if_not_~cond_7))
(get-value (assume_abort_if_not_~cond_11))
(get-value (assume_abort_if_not_~cond_12))
(get-value (main_~count~0_15))
(get-value (main_~count~0_16))
(get-value (|assume_abort_if_not_#in~cond_5|))
(get-value (|assume_abort_if_not_#in~cond_10|))
(get-value (main_~term~0_16))
(get-value (__VERIFIER_assert_~cond_19))
(get-value (__VERIFIER_assert_~cond_20))
(echo "finished trace check")
(pop 1)
(exit)
