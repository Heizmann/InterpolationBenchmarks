(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-31T00:18:34+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id prefixsum_iter.c_AllErrorsAtOnce_Iteration4)
(define-fun ~initToZeroAtPointerBaseAddress~int ((in0 (Array Int (Array Int Int))) (in1 Int)) (Array Int (Array Int Int)) (store in0 in1 ((as const (Array Int Int)) 0)))
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#1)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#1)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#1| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#1_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c_read~int#1_#ptr.base| () Int)
(declare-fun |c_read~int#1_#ptr.base_primed| () Int)
(declare-fun |c_read~int#1_#ptr.offset| () Int)
(declare-fun |c_read~int#1_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#1_#sizeOfReadType| () Int)
(declare-fun |c_read~int#1_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#1_#value| () Int)
(declare-fun |c_read~int#1_#value_primed| () Int)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~nondet13| () Int)
(declare-fun |c_main_#t~nondet13_primed| () Int)
(declare-fun |c_main_#t~ret14| () Int)
(declare-fun |c_main_#t~ret14_primed| () Int)
(declare-fun |c_main_#t~malloc15.base| () Int)
(declare-fun |c_main_#t~malloc15.base_primed| () Int)
(declare-fun |c_main_#t~malloc15.offset| () Int)
(declare-fun |c_main_#t~malloc15.offset_primed| () Int)
(declare-fun |c_main_#t~malloc16.base| () Int)
(declare-fun |c_main_#t~malloc16.base_primed| () Int)
(declare-fun |c_main_#t~malloc16.offset| () Int)
(declare-fun |c_main_#t~malloc16.offset_primed| () Int)
(declare-fun |c_main_#t~mem17| () Int)
(declare-fun |c_main_#t~mem17_primed| () Int)
(declare-fun |c_main_#t~post18| () Int)
(declare-fun |c_main_#t~post18_primed| () Int)
(declare-fun |c_main_#t~ret19| () Int)
(declare-fun |c_main_#t~ret19_primed| () Int)
(declare-fun c_main_~n~0 () Int)
(declare-fun c_main_~n~0_primed () Int)
(declare-fun c_main_~a~0.base () Int)
(declare-fun c_main_~a~0.base_primed () Int)
(declare-fun c_main_~a~0.offset () Int)
(declare-fun c_main_~a~0.offset_primed () Int)
(declare-fun c_main_~a0~0.base () Int)
(declare-fun c_main_~a0~0.base_primed () Int)
(declare-fun c_main_~a0~0.offset () Int)
(declare-fun c_main_~a0~0.offset_primed () Int)
(declare-fun c_main_~i~1 () Int)
(declare-fun c_main_~i~1_primed () Int)
(declare-fun c_main_~space~1 () Int)
(declare-fun c_main_~space~1_primed () Int)
(declare-fun |c_calloc_#in~nmemb| () Int)
(declare-fun |c_calloc_#in~nmemb_primed| () Int)
(declare-fun |c_calloc_#in~size| () Int)
(declare-fun |c_calloc_#in~size_primed| () Int)
(declare-fun |c_calloc_#res.base| () Int)
(declare-fun |c_calloc_#res.base_primed| () Int)
(declare-fun |c_calloc_#res.offset| () Int)
(declare-fun |c_calloc_#res.offset_primed| () Int)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_write~int#1_#value| () Int)
(declare-fun |c_write~int#1_#value_primed| () Int)
(declare-fun |c_write~int#1_#ptr.base| () Int)
(declare-fun |c_write~int#1_#ptr.base_primed| () Int)
(declare-fun |c_write~int#1_#ptr.offset| () Int)
(declare-fun |c_write~int#1_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#1_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#1_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_upsweep_#in~a.base| () Int)
(declare-fun |c_upsweep_#in~a.base_primed| () Int)
(declare-fun |c_upsweep_#in~a.offset| () Int)
(declare-fun |c_upsweep_#in~a.offset_primed| () Int)
(declare-fun |c_upsweep_#in~n| () Int)
(declare-fun |c_upsweep_#in~n_primed| () Int)
(declare-fun |c_upsweep_#res| () Int)
(declare-fun |c_upsweep_#res_primed| () Int)
(declare-fun |c_upsweep_#t~mem5| () Int)
(declare-fun |c_upsweep_#t~mem5_primed| () Int)
(declare-fun |c_upsweep_#t~mem6| () Int)
(declare-fun |c_upsweep_#t~mem6_primed| () Int)
(declare-fun c_upsweep_~right~0 () Int)
(declare-fun c_upsweep_~right~0_primed () Int)
(declare-fun c_upsweep_~left~0 () Int)
(declare-fun c_upsweep_~left~0_primed () Int)
(declare-fun c_upsweep_~a.base () Int)
(declare-fun c_upsweep_~a.base_primed () Int)
(declare-fun c_upsweep_~a.offset () Int)
(declare-fun c_upsweep_~a.offset_primed () Int)
(declare-fun c_upsweep_~n () Int)
(declare-fun c_upsweep_~n_primed () Int)
(declare-fun c_upsweep_~space~0 () Int)
(declare-fun c_upsweep_~space~0_primed () Int)
(declare-fun |c_is_pow2_#in~x| () Int)
(declare-fun |c_is_pow2_#in~x_primed| () Int)
(declare-fun |c_is_pow2_#res| () Int)
(declare-fun |c_is_pow2_#res_primed| () Int)
(declare-fun c_is_pow2_~x () Int)
(declare-fun c_is_pow2_~x_primed () Int)
(declare-fun |c_#Ultimate.meminit_#ptr.base| () Int)
(declare-fun |c_#Ultimate.meminit_#ptr.base_primed| () Int)
(declare-fun |c_#Ultimate.meminit_#ptr.offset| () Int)
(declare-fun |c_#Ultimate.meminit_#ptr.offset_primed| () Int)
(declare-fun |c_#Ultimate.meminit_#amountOfFields| () Int)
(declare-fun |c_#Ultimate.meminit_#amountOfFields_primed| () Int)
(declare-fun |c_#Ultimate.meminit_#sizeOfFields| () Int)
(declare-fun |c_#Ultimate.meminit_#sizeOfFields_primed| () Int)
(declare-fun |c_#Ultimate.meminit_#product| () Int)
(declare-fun |c_#Ultimate.meminit_#product_primed| () Int)
(declare-fun |c_free_#in~0.base| () Int)
(declare-fun |c_free_#in~0.base_primed| () Int)
(declare-fun |c_free_#in~0.offset| () Int)
(declare-fun |c_free_#in~0.offset_primed| () Int)
(declare-fun |c_write~init~int#1_#value| () Int)
(declare-fun |c_write~init~int#1_#value_primed| () Int)
(declare-fun |c_write~init~int#1_#ptr.base| () Int)
(declare-fun |c_write~init~int#1_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#1_#ptr.offset| () Int)
(declare-fun |c_write~init~int#1_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#1_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#1_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_assume_abort_if_not_#in~cond| () Int)
(declare-fun |c_assume_abort_if_not_#in~cond_primed| () Int)
(declare-fun c_assume_abort_if_not_~cond () Int)
(declare-fun c_assume_abort_if_not_~cond_primed () Int)
(declare-fun |c_check_#in~a0.base| () Int)
(declare-fun |c_check_#in~a0.base_primed| () Int)
(declare-fun |c_check_#in~a0.offset| () Int)
(declare-fun |c_check_#in~a0.offset_primed| () Int)
(declare-fun |c_check_#in~a.base| () Int)
(declare-fun |c_check_#in~a.base_primed| () Int)
(declare-fun |c_check_#in~a.offset| () Int)
(declare-fun |c_check_#in~a.offset_primed| () Int)
(declare-fun |c_check_#in~n| () Int)
(declare-fun |c_check_#in~n_primed| () Int)
(declare-fun |c_check_#t~mem10| () Int)
(declare-fun |c_check_#t~mem10_primed| () Int)
(declare-fun |c_check_#t~mem11| () Int)
(declare-fun |c_check_#t~mem11_primed| () Int)
(declare-fun |c_check_#t~post12| () Int)
(declare-fun |c_check_#t~post12_primed| () Int)
(declare-fun c_check_~a0.base () Int)
(declare-fun c_check_~a0.base_primed () Int)
(declare-fun c_check_~a0.offset () Int)
(declare-fun c_check_~a0.offset_primed () Int)
(declare-fun c_check_~a.base () Int)
(declare-fun c_check_~a.base_primed () Int)
(declare-fun c_check_~a.offset () Int)
(declare-fun c_check_~a.offset_primed () Int)
(declare-fun c_check_~n () Int)
(declare-fun c_check_~n_primed () Int)
(declare-fun c_check_~i~0 () Int)
(declare-fun c_check_~i~0_primed () Int)
(declare-fun c_check_~sum~0 () Int)
(declare-fun c_check_~sum~0_primed () Int)
(declare-fun |c_downsweep_#in~a.base| () Int)
(declare-fun |c_downsweep_#in~a.base_primed| () Int)
(declare-fun |c_downsweep_#in~a.offset| () Int)
(declare-fun |c_downsweep_#in~a.offset_primed| () Int)
(declare-fun |c_downsweep_#in~n| () Int)
(declare-fun |c_downsweep_#in~n_primed| () Int)
(declare-fun |c_downsweep_#in~space| () Int)
(declare-fun |c_downsweep_#in~space_primed| () Int)
(declare-fun |c_downsweep_#t~mem7| () Int)
(declare-fun |c_downsweep_#t~mem7_primed| () Int)
(declare-fun |c_downsweep_#t~mem8| () Int)
(declare-fun |c_downsweep_#t~mem8_primed| () Int)
(declare-fun |c_downsweep_#t~mem9| () Int)
(declare-fun |c_downsweep_#t~mem9_primed| () Int)
(declare-fun c_downsweep_~left~1 () Int)
(declare-fun c_downsweep_~left~1_primed () Int)
(declare-fun c_downsweep_~temp~0 () Int)
(declare-fun c_downsweep_~temp~0_primed () Int)
(declare-fun c_downsweep_~right~1 () Int)
(declare-fun c_downsweep_~right~1_primed () Int)
(declare-fun c_downsweep_~a.base () Int)
(declare-fun c_downsweep_~a.base_primed () Int)
(declare-fun c_downsweep_~a.offset () Int)
(declare-fun c_downsweep_~a.offset_primed () Int)
(declare-fun c_downsweep_~n () Int)
(declare-fun c_downsweep_~n_primed () Int)
(declare-fun c_downsweep_~space () Int)
(declare-fun c_downsweep_~space_primed () Int)
(declare-fun |c_#Ultimate.allocOnHeap_~size| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_#res.base| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_#res.base_primed| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_#res.offset| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_#res.offset_primed| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res_primed| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret20| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret20_primed| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond_primed| () Int)
(declare-fun c___VERIFIER_assert_~cond () Int)
(declare-fun c___VERIFIER_assert_~cond_primed () Int)
(declare-fun |c___assert_fail_#in~1.base| () Int)
(declare-fun |c___assert_fail_#in~1.base_primed| () Int)
(declare-fun |c___assert_fail_#in~1.offset| () Int)
(declare-fun |c___assert_fail_#in~1.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~2.base| () Int)
(declare-fun |c___assert_fail_#in~2.base_primed| () Int)
(declare-fun |c___assert_fail_#in~2.offset| () Int)
(declare-fun |c___assert_fail_#in~2.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~3| () Int)
(declare-fun |c___assert_fail_#in~3_primed| () Int)
(declare-fun |c___assert_fail_#in~4.base| () Int)
(declare-fun |c___assert_fail_#in~4.base_primed| () Int)
(declare-fun |c___assert_fail_#in~4.offset| () Int)
(declare-fun |c___assert_fail_#in~4.offset_primed| () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun |c_aux_v_main_#t~mem17_2| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_3| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_3| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_3| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_3| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_4| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_4| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_4| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_4| () Int)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret20_3| () Int)
(declare-fun c_aux_v_ArrVal_1 () Int)
(declare-fun c_aux_v_ArrVal_2 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_5| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_5| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_5| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_5| () Int)
(declare-fun c_aux_v_ArrVal_3 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_4 () Int)
(declare-fun c_aux_v_ArrVal_5 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_6| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_6| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_6| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_6| () Int)
(declare-fun c_aux_v_ArrVal_6 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_8 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_7 () Int)
(declare-fun c_aux_v_ArrVal_9 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_10 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_12 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_11 () Int)
(declare-fun c_aux_v_ArrVal_13 () Int)
(declare-fun c_aux_v_ArrVal_14 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_7| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_7| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_7| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_7| () Int)
(declare-fun c_aux_v_ArrVal_15 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_17 () Int)
(declare-fun c_aux_v_ArrVal_16 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_8| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_8| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_8| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_8| () Int)
(declare-fun c_aux_v_ArrVal_18 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_19 () Int)
(declare-fun c_aux_v_ArrVal_20 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_21 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_22 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_24 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_23 () Int)
(declare-fun c_aux_v_ArrVal_25 () Int)
(declare-fun c_aux_v_ArrVal_26 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_9| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_9| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_9| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_9| () Int)
(declare-fun c_aux_v_ArrVal_27 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_28 () Int)
(declare-fun c_aux_v_ArrVal_29 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_10| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_10| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_10| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_10| () Int)
(declare-fun c_aux_v_ArrVal_30 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_32 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_31 () Int)
(declare-fun c_aux_v_ArrVal_34 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_33 () Int)
(declare-fun c_aux_v_ArrVal_35 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_36 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_37 () Int)
(declare-fun c_aux_v_ArrVal_38 () (Array Int Int))
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#memory_int#1_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#0)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-1| () (Array Int Int))
(declare-fun |old(#length)_-1| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |old(#valid)_3| () (Array Int Int))
(declare-fun |old(#length)_3| () (Array Int Int))
(declare-fun |old(#memory_int#1)_3| () (Array Int (Array Int Int)))
(declare-fun |#valid_3| () (Array Int Int))
(declare-fun |#length_3| () (Array Int Int))
(declare-fun |#memory_int#1_3| () (Array Int (Array Int Int)))
(declare-fun |main_#t~nondet13_4| () Int)
(declare-fun main_~n~0_4 () Int)
(declare-fun main_~n~0_5 () Int)
(declare-fun |assume_abort_if_not_#in~cond_5| () Int)
(declare-fun assume_abort_if_not_~cond_6 () Int)
(declare-fun assume_abort_if_not_~cond_7 () Int)
(declare-fun |is_pow2_#in~x_10| () Int)
(declare-fun main_~n~0_10 () Int)
(declare-fun is_pow2_~x_11 () Int)
(declare-fun is_pow2_~x_13 () Int)
(declare-fun |is_pow2_#res_13| () Int)
(declare-fun |main_#t~ret14_14| () Int)
(declare-fun |is_pow2_#res_14| () Int)
(declare-fun |main_#t~ret14_16| () Int)
(declare-fun |assume_abort_if_not_#in~cond_16| () Int)
(declare-fun assume_abort_if_not_~cond_17 () Int)
(declare-fun assume_abort_if_not_~cond_18 () Int)
(declare-fun |main_#t~malloc15.offset_21| () Int)
(declare-fun |main_#t~ret14_21| () Int)
(declare-fun |#valid_21| () (Array Int Int))
(declare-fun |#length_21| () (Array Int Int))
(declare-fun |main_#t~malloc15.base_21| () Int)
(declare-fun v_ArrVal_39_fresh_1 () Int)
(declare-fun v_ArrVal_40_fresh_1 () Int)
(declare-fun |old(#memory_int#1)_22| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_22| () (Array Int (Array Int Int)))
(declare-fun |main_#t~malloc15.offset_22| () Int)
(declare-fun main_~n~0_22 () Int)
(declare-fun |#Ultimate.meminit_#ptr.base_22| () Int)
(declare-fun |main_#t~malloc15.base_22| () Int)
(declare-fun |v_#Ultimate.meminit_#sizeOfFieldsInParam_11_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#productInParam_11_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#ptr.offsetInParam_11_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#amountOfFieldsInParam_11_fresh_1| () Int)
(declare-fun |#memory_int#1_23| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_41_fresh_1 () (Array Int Int))
(declare-fun |main_#t~malloc15.offset_25| () Int)
(declare-fun |#valid_25| () (Array Int Int))
(declare-fun main_~a~0.base_25 () Int)
(declare-fun |main_#t~malloc16.offset_25| () Int)
(declare-fun |#length_25| () (Array Int Int))
(declare-fun |main_#t~malloc15.base_25| () Int)
(declare-fun main_~a~0.offset_25 () Int)
(declare-fun |main_#t~malloc16.base_25| () Int)
(declare-fun v_ArrVal_42_fresh_1 () Int)
(declare-fun v_ArrVal_43_fresh_1 () Int)
(declare-fun |old(#memory_int#1)_26| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_26| () (Array Int (Array Int Int)))
(declare-fun |main_#t~malloc16.offset_26| () Int)
(declare-fun main_~n~0_26 () Int)
(declare-fun |#Ultimate.meminit_#ptr.base_26| () Int)
(declare-fun |main_#t~malloc16.base_26| () Int)
(declare-fun |v_#Ultimate.meminit_#sizeOfFieldsInParam_12_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#ptr.offsetInParam_12_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#productInParam_12_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#amountOfFieldsInParam_12_fresh_1| () Int)
(declare-fun |#memory_int#1_27| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_44_fresh_1 () (Array Int Int))
(declare-fun main_~a0~0.offset_29 () Int)
(declare-fun main_~i~1_29 () Int)
(declare-fun |main_#t~malloc16.offset_29| () Int)
(declare-fun main_~a0~0.base_29 () Int)
(declare-fun |main_#t~malloc16.base_29| () Int)
(declare-fun main_~i~1_30 () Int)
(declare-fun |main_#t~post18_30| () Int)
(declare-fun |#memory_int#1_30| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_46_fresh_1 () (Array Int Int))
(declare-fun v_ArrVal_45_fresh_1 () Int)
(declare-fun main_~i~1_31 () Int)
(declare-fun |old(#memory_int#1)_32| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_32| () (Array Int (Array Int Int)))
(declare-fun |upsweep_#in~n_32| () Int)
(declare-fun main_~a~0.base_32 () Int)
(declare-fun |upsweep_#in~a.offset_32| () Int)
(declare-fun main_~n~0_32 () Int)
(declare-fun main_~a~0.offset_32 () Int)
(declare-fun |upsweep_#in~a.base_32| () Int)
(declare-fun upsweep_~space~0_33 () Int)
(declare-fun upsweep_~n_33 () Int)
(declare-fun upsweep_~a.base_33 () Int)
(declare-fun upsweep_~a.offset_33 () Int)
(declare-fun upsweep_~left~0_34 () Int)
(declare-fun upsweep_~left~0_35 () Int)
(declare-fun |upsweep_#t~mem6_35| () Int)
(declare-fun |upsweep_#t~mem5_35| () Int)
(declare-fun upsweep_~right~0_35 () Int)
(declare-fun |#memory_int#1_35| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_48_fresh_1 () Int)
(declare-fun v_ArrVal_47_fresh_1 () (Array Int Int))
(declare-fun upsweep_~left~0_36 () Int)
(declare-fun upsweep_~left~0_37 () Int)
(declare-fun upsweep_~space~0_37 () Int)
(declare-fun upsweep_~n_38 () Int)
(declare-fun upsweep_~space~0_39 () Int)
(declare-fun |upsweep_#res_39| () Int)
(declare-fun |main_#t~ret19_40| () Int)
(declare-fun |upsweep_#res_40| () Int)
(declare-fun |main_#t~ret19_41| () Int)
(declare-fun main_~space~1_41 () Int)
(declare-fun |old(#memory_int#1)_42| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_42| () (Array Int (Array Int Int)))
(declare-fun |downsweep_#in~a.offset_42| () Int)
(declare-fun |downsweep_#in~space_42| () Int)
(declare-fun main_~a~0.base_42 () Int)
(declare-fun |downsweep_#in~n_42| () Int)
(declare-fun |downsweep_#in~a.base_42| () Int)
(declare-fun main_~n~0_42 () Int)
(declare-fun main_~a~0.offset_42 () Int)
(declare-fun main_~space~1_42 () Int)
(declare-fun downsweep_~n_43 () Int)
(declare-fun downsweep_~space_43 () Int)
(declare-fun downsweep_~a.offset_43 () Int)
(declare-fun downsweep_~a.base_43 () Int)
(declare-fun |#memory_int#1_43| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_50_fresh_1 () (Array Int Int))
(declare-fun v_ArrVal_49_fresh_1 () Int)
(declare-fun downsweep_~space_44 () Int)
(declare-fun |check_#in~a.offset_47| () Int)
(declare-fun main_~a0~0.offset_47 () Int)
(declare-fun |check_#in~a.base_47| () Int)
(declare-fun main_~a~0.base_47 () Int)
(declare-fun main_~n~0_47 () Int)
(declare-fun main_~a~0.offset_47 () Int)
(declare-fun |check_#in~a0.base_47| () Int)
(declare-fun |check_#in~n_47| () Int)
(declare-fun main_~a0~0.base_47 () Int)
(declare-fun |check_#in~a0.offset_47| () Int)
(declare-fun check_~a0.base_48 () Int)
(declare-fun check_~a.base_48 () Int)
(declare-fun check_~a.offset_48 () Int)
(declare-fun check_~i~0_48 () Int)
(declare-fun check_~sum~0_48 () Int)
(declare-fun check_~a0.offset_48 () Int)
(declare-fun check_~n_48 () Int)
(declare-fun |check_#t~mem10_49| () Int)
(declare-fun |__VERIFIER_assert_#in~cond_50| () Int)
(declare-fun |check_#t~mem10_50| () Int)
(declare-fun check_~sum~0_50 () Int)
(declare-fun __VERIFIER_assert_~cond_51 () Int)
(declare-fun __VERIFIER_assert_~cond_52 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! true :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! true :named ssa_0_OldVarAssigCall))
(assert (! (and (= (select |#length_-1| 2) 17) (= (select |#valid_-1| 1) 1) (= (select |#valid_-1| 2) 1) (< 0 |#StackHeapBarrier_-1|) (= (select |#length_-1| 3) 12) (= (select |#valid_-1| 0) 0) (= (select |#valid_-1| 3) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#length_-1| 1) 2)) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! (and (= |old(#valid)_3| |#valid_3|) (= |#length_3| |old(#length)_3|) (= |old(#memory_int#1)_3| |#memory_int#1_3|)) :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! (and (= |old(#length)_3| |#length_-1|) (= |#valid_-1| |old(#valid)_3|) (= |old(#memory_int#1)_3| |#memory_int#1_-1|)) :named ssa_3_OldVarAssigCall))
(assert (! (and (<= main_~n~0_4 2147483647) (<= 0 (+ main_~n~0_4 2147483648))) :named ssa_4))
(assert (! true :named ssa_5_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_5| (ite (and (< main_~n~0_4 1073741824) (<= 0 main_~n~0_4)) 1 0)) :named ssa_5_LocVarAssigCall))
(assert (! true :named ssa_5_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_5| assume_abort_if_not_~cond_6) :named ssa_6))
(assert (! (not (= assume_abort_if_not_~cond_6 0)) :named ssa_7))
(assert (! true :named ssa_8))
(assert (! true :named ssa_9_return))
(assert (! true :named ssa_10_GlobVarAssigCall))
(assert (! (= |is_pow2_#in~x_10| main_~n~0_4) :named ssa_10_LocVarAssigCall))
(assert (! true :named ssa_10_OldVarAssigCall))
(assert (! (= |is_pow2_#in~x_10| is_pow2_~x_11) :named ssa_11))
(assert (! (or (<= (mod is_pow2_~x_11 4294967296) 1) (not (= (mod is_pow2_~x_11 2) 0))) :named ssa_12))
(assert (! (= (ite (= (mod is_pow2_~x_11 4294967296) 1) 1 0) |is_pow2_#res_13|) :named ssa_13))
(assert (! (= |is_pow2_#res_13| |main_#t~ret14_14|) :named ssa_14_return))
(assert (! (and (<= |main_#t~ret14_14| 2147483647) (<= 0 (+ |main_#t~ret14_14| 2147483648))) :named ssa_15))
(assert (! true :named ssa_16_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_16| |main_#t~ret14_14|) :named ssa_16_LocVarAssigCall))
(assert (! true :named ssa_16_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_16| assume_abort_if_not_~cond_17) :named ssa_17))
(assert (! (not (= assume_abort_if_not_~cond_17 0)) :named ssa_18))
(assert (! true :named ssa_19))
(assert (! true :named ssa_20_return))
(assert (! (and (= v_ArrVal_40_fresh_1 (* (mod main_~n~0_4 1073741824) 4)) (not (= |main_#t~malloc15.base_21| 0)) (< |main_#t~malloc15.base_21| |#StackHeapBarrier_-1|) (= (store |#valid_3| |main_#t~malloc15.base_21| v_ArrVal_39_fresh_1) |#valid_21|) (= |main_#t~malloc15.offset_21| 0) (= v_ArrVal_39_fresh_1 1) (= (store |#length_3| |main_#t~malloc15.base_21| v_ArrVal_40_fresh_1) |#length_21|) (= (select |#valid_3| |main_#t~malloc15.base_21|) 0)) :named ssa_21))
(assert (! (= |old(#memory_int#1)_22| |#memory_int#1_22|) :named ssa_22_GlobVarAssigCall))
(assert (! (and (= (* main_~n~0_4 4) |v_#Ultimate.meminit_#productInParam_11_fresh_1|) (= |#Ultimate.meminit_#ptr.base_22| |main_#t~malloc15.base_21|) (= |v_#Ultimate.meminit_#sizeOfFieldsInParam_11_fresh_1| 4) (= main_~n~0_4 |v_#Ultimate.meminit_#amountOfFieldsInParam_11_fresh_1|) (= |v_#Ultimate.meminit_#ptr.offsetInParam_11_fresh_1| |main_#t~malloc15.offset_21|)) :named ssa_22_LocVarAssigCall))
(assert (! (= |old(#memory_int#1)_22| |#memory_int#1_3|) :named ssa_22_OldVarAssigCall))
(assert (! (and (= |#memory_int#1_23| (store |#memory_int#1_22| |#Ultimate.meminit_#ptr.base_22| v_ArrVal_41_fresh_1)) (= ((as const (Array Int Int)) 0) v_ArrVal_41_fresh_1)) :named ssa_23))
(assert (! true :named ssa_24_return))
(assert (! (and (= v_ArrVal_42_fresh_1 1) (= (select |#valid_21| |main_#t~malloc16.base_25|) 0) (not (= |main_#t~malloc16.base_25| 0)) (= |#valid_25| (store |#valid_21| |main_#t~malloc16.base_25| v_ArrVal_42_fresh_1)) (= |main_#t~malloc16.offset_25| 0) (= (* (mod main_~n~0_4 1073741824) 4) v_ArrVal_43_fresh_1) (= main_~a~0.offset_25 |main_#t~malloc15.offset_21|) (= main_~a~0.base_25 |main_#t~malloc15.base_21|) (< |main_#t~malloc16.base_25| |#StackHeapBarrier_-1|) (= |#length_25| (store |#length_21| |main_#t~malloc16.base_25| v_ArrVal_43_fresh_1))) :named ssa_25))
(assert (! (= |old(#memory_int#1)_26| |#memory_int#1_26|) :named ssa_26_GlobVarAssigCall))
(assert (! (and (= |v_#Ultimate.meminit_#sizeOfFieldsInParam_12_fresh_1| 4) (= (* main_~n~0_4 4) |v_#Ultimate.meminit_#productInParam_12_fresh_1|) (= |v_#Ultimate.meminit_#ptr.offsetInParam_12_fresh_1| |main_#t~malloc16.offset_25|) (= main_~n~0_4 |v_#Ultimate.meminit_#amountOfFieldsInParam_12_fresh_1|) (= |#Ultimate.meminit_#ptr.base_26| |main_#t~malloc16.base_25|)) :named ssa_26_LocVarAssigCall))
(assert (! (= |old(#memory_int#1)_26| |#memory_int#1_23|) :named ssa_26_OldVarAssigCall))
(assert (! (and (= (store |#memory_int#1_26| |#Ultimate.meminit_#ptr.base_26| v_ArrVal_44_fresh_1) |#memory_int#1_27|) (= ((as const (Array Int Int)) 0) v_ArrVal_44_fresh_1)) :named ssa_27))
(assert (! true :named ssa_28_return))
(assert (! (and (= main_~i~1_29 0) (= main_~a0~0.base_29 |main_#t~malloc16.base_25|) (= main_~a0~0.offset_29 |main_#t~malloc16.offset_25|)) :named ssa_29))
(assert (! (and (= (store |#memory_int#1_27| main_~a0~0.base_29 v_ArrVal_46_fresh_1) |#memory_int#1_30|) (< main_~i~1_29 main_~n~0_4) (= (select (select |#memory_int#1_27| main_~a~0.base_25) (+ main_~a~0.offset_25 (* main_~i~1_29 4))) v_ArrVal_45_fresh_1) (= (store (select |#memory_int#1_27| main_~a0~0.base_29) (+ main_~a0~0.offset_29 (* main_~i~1_29 4)) v_ArrVal_45_fresh_1) v_ArrVal_46_fresh_1) (= main_~i~1_30 (+ main_~i~1_29 1))) :named ssa_30))
(assert (! (<= main_~n~0_4 main_~i~1_30) :named ssa_31))
(assert (! (= |old(#memory_int#1)_32| |#memory_int#1_32|) :named ssa_32_GlobVarAssigCall))
(assert (! (and (= main_~a~0.base_25 |upsweep_#in~a.base_32|) (= |upsweep_#in~a.offset_32| main_~a~0.offset_25) (= main_~n~0_4 |upsweep_#in~n_32|)) :named ssa_32_LocVarAssigCall))
(assert (! (= |old(#memory_int#1)_32| |#memory_int#1_30|) :named ssa_32_OldVarAssigCall))
(assert (! (and (= upsweep_~a.offset_33 |upsweep_#in~a.offset_32|) (= upsweep_~space~0_33 1) (= upsweep_~n_33 |upsweep_#in~n_32|) (= |upsweep_#in~a.base_32| upsweep_~a.base_33)) :named ssa_33))
(assert (! (and (= upsweep_~space~0_33 (+ upsweep_~left~0_34 1)) (< upsweep_~space~0_33 upsweep_~n_33)) :named ssa_34))
(assert (! (and (= (+ (select (select |#memory_int#1_32| upsweep_~a.base_33) (+ (* upsweep_~left~0_34 4) upsweep_~a.offset_33)) (select (select |#memory_int#1_32| upsweep_~a.base_33) (+ (* upsweep_~left~0_34 4) upsweep_~a.offset_33 (* upsweep_~space~0_33 4)))) v_ArrVal_48_fresh_1) (< upsweep_~left~0_34 upsweep_~n_33) (= (store |#memory_int#1_32| upsweep_~a.base_33 v_ArrVal_47_fresh_1) |#memory_int#1_35|) (= (+ (* 2 upsweep_~space~0_33) upsweep_~left~0_34) upsweep_~left~0_35) (= (store (select |#memory_int#1_32| upsweep_~a.base_33) (+ (* upsweep_~left~0_34 4) upsweep_~a.offset_33 (* upsweep_~space~0_33 4)) (+ (select (select |#memory_int#1_32| upsweep_~a.base_33) (+ (* upsweep_~left~0_34 4) upsweep_~a.offset_33)) (select (select |#memory_int#1_32| upsweep_~a.base_33) (+ (* upsweep_~left~0_34 4) upsweep_~a.offset_33 (* upsweep_~space~0_33 4))))) v_ArrVal_47_fresh_1)) :named ssa_35))
(assert (! (<= upsweep_~n_33 upsweep_~left~0_35) :named ssa_36))
(assert (! (= (* 2 upsweep_~space~0_33) upsweep_~space~0_37) :named ssa_37))
(assert (! (<= upsweep_~n_33 upsweep_~space~0_37) :named ssa_38))
(assert (! (= |upsweep_#res_39| upsweep_~space~0_37) :named ssa_39))
(assert (! (= |main_#t~ret19_40| |upsweep_#res_39|) :named ssa_40_return))
(assert (! (and (<= 0 (+ |main_#t~ret19_40| 2147483648)) (<= |main_#t~ret19_40| 2147483647) (= |main_#t~ret19_40| main_~space~1_41)) :named ssa_41))
(assert (! (= |old(#memory_int#1)_42| |#memory_int#1_42|) :named ssa_42_GlobVarAssigCall))
(assert (! (and (= |downsweep_#in~a.base_42| main_~a~0.base_25) (= main_~n~0_4 |downsweep_#in~n_42|) (= |downsweep_#in~space_42| main_~space~1_41) (= main_~a~0.offset_25 |downsweep_#in~a.offset_42|)) :named ssa_42_LocVarAssigCall))
(assert (! (= |old(#memory_int#1)_42| |#memory_int#1_35|) :named ssa_42_OldVarAssigCall))
(assert (! (and (= (store (select |#memory_int#1_42| downsweep_~a.base_43) (+ downsweep_~a.offset_43 (- 4) (* downsweep_~n_43 4)) v_ArrVal_49_fresh_1) v_ArrVal_50_fresh_1) (= downsweep_~space_43 (ite (and (not (= (mod |downsweep_#in~space_42| 2) 0)) (< |downsweep_#in~space_42| 0)) (+ (div |downsweep_#in~space_42| 2) 1) (div |downsweep_#in~space_42| 2))) (= downsweep_~a.base_43 |downsweep_#in~a.base_42|) (= downsweep_~a.offset_43 |downsweep_#in~a.offset_42|) (= downsweep_~n_43 |downsweep_#in~n_42|) (= v_ArrVal_49_fresh_1 0) (= (store |#memory_int#1_42| downsweep_~a.base_43 v_ArrVal_50_fresh_1) |#memory_int#1_43|)) :named ssa_43))
(assert (! (<= downsweep_~space_43 0) :named ssa_44))
(assert (! true :named ssa_45))
(assert (! true :named ssa_46_return))
(assert (! true :named ssa_47_GlobVarAssigCall))
(assert (! (and (= main_~a0~0.offset_29 |check_#in~a0.offset_47|) (= main_~a0~0.base_29 |check_#in~a0.base_47|) (= |check_#in~a.offset_47| main_~a~0.offset_25) (= main_~n~0_4 |check_#in~n_47|) (= |check_#in~a.base_47| main_~a~0.base_25)) :named ssa_47_LocVarAssigCall))
(assert (! true :named ssa_47_OldVarAssigCall))
(assert (! (and (= |check_#in~a.offset_47| check_~a.offset_48) (= |check_#in~a0.offset_47| check_~a0.offset_48) (= check_~a.base_48 |check_#in~a.base_47|) (= check_~i~0_48 0) (= check_~a0.base_48 |check_#in~a0.base_47|) (= check_~sum~0_48 0) (= check_~n_48 |check_#in~n_47|)) :named ssa_48))
(assert (! (and (= |check_#t~mem10_49| (select (select |#memory_int#1_43| check_~a.base_48) (+ (* check_~i~0_48 4) check_~a.offset_48))) (< check_~i~0_48 check_~n_48)) :named ssa_49))
(assert (! true :named ssa_50_GlobVarAssigCall))
(assert (! (= (ite (= check_~sum~0_48 |check_#t~mem10_49|) 1 0) |__VERIFIER_assert_#in~cond_50|) :named ssa_50_LocVarAssigCall))
(assert (! true :named ssa_50_OldVarAssigCall))
(assert (! (= __VERIFIER_assert_~cond_51 |__VERIFIER_assert_#in~cond_50|) :named ssa_51))
(assert (! (= __VERIFIER_assert_~cond_51 0) :named ssa_52))
(assert (! true :named ssa_53))
(check-sat)
(get-interpolants (and ssa_0_LocVarAssigCall ssa_precond ssa_0_GlobVarAssigCall ssa_0_OldVarAssigCall ssa_2_return ssa_1) (and ssa_3_OldVarAssigCall ssa_3_LocVarAssigCall ssa_3_GlobVarAssigCall) ssa_4 (and ssa_5_LocVarAssigCall ssa_5_GlobVarAssigCall ssa_7 ssa_6 ssa_8 ssa_5_OldVarAssigCall ssa_9_return) (and ssa_13 ssa_10_GlobVarAssigCall ssa_10_OldVarAssigCall ssa_12 ssa_11 ssa_10_LocVarAssigCall ssa_14_return) ssa_15 (and ssa_19 ssa_16_OldVarAssigCall ssa_16_LocVarAssigCall ssa_20_return ssa_16_GlobVarAssigCall ssa_18 ssa_17) ssa_21 (and ssa_22_OldVarAssigCall ssa_22_LocVarAssigCall ssa_24_return ssa_22_GlobVarAssigCall ssa_23) ssa_25 (and ssa_27 ssa_26_GlobVarAssigCall ssa_26_LocVarAssigCall ssa_28_return ssa_26_OldVarAssigCall) ssa_29 ssa_30 ssa_31 (and ssa_34 ssa_32_LocVarAssigCall ssa_40_return ssa_32_OldVarAssigCall ssa_39 ssa_37 ssa_38 ssa_32_GlobVarAssigCall ssa_36 ssa_33 ssa_35) ssa_41 (and ssa_44 ssa_45 ssa_42_LocVarAssigCall ssa_43 ssa_42_GlobVarAssigCall ssa_42_OldVarAssigCall ssa_46_return) (and ssa_47_GlobVarAssigCall ssa_47_OldVarAssigCall ssa_47_LocVarAssigCall) ssa_48 ssa_49 (and ssa_50_GlobVarAssigCall ssa_50_OldVarAssigCall ssa_50_LocVarAssigCall) ssa_51 ssa_52 (and ssa_53 ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-2| () (Array Int (Array Int Int)))
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#0)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (= (select |#length_-2| 2) 17) (= (select |#valid_-2| 1) 1) (= (select |#valid_-2| 2) 1) (< 0 |#StackHeapBarrier_-1|) (= (select |#length_-2| 3) 12) (= (select |#valid_-2| 0) 0) (= (select |#valid_-2| 3) 1) (= (select (select |#memory_int#0_-2| 1) 1) 0) (= (select (select |#memory_int#0_-2| 1) 0) 48) (= (select |#length_-2| 1) 2)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! true :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun main_~n~0_-2 () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |assume_abort_if_not_#in~cond_-1| (ite (and (< main_~n~0_-2 1073741824) (<= 0 main_~n~0_-2)) 1 0)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun main_~n~0_-2 () Int)
(declare-fun |is_pow2_#in~x_-1| () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun is_pow2_~x_0 () Int)
(declare-fun is_pow2_~x_2 () Int)
(declare-fun |is_pow2_#res_2| () Int)
(declare-fun |main_#t~ret14_3| () Int)
(declare-fun |is_pow2_#res_3| () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (= |is_pow2_#in~x_-1| is_pow2_~x_0) :named ssa_0))
(assert (! (or (<= (mod is_pow2_~x_0 4294967296) 1) (not (= (mod is_pow2_~x_0 2) 0))) :named ssa_1))
(assert (! (= (ite (= (mod is_pow2_~x_0 4294967296) 1) 1 0) |is_pow2_#res_2|) :named ssa_2))
(assert (! (= |is_pow2_#res_2| |main_#t~ret14_3|) :named ssa_3_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |is_pow2_#in~x_-1| main_~n~0_-2) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |main_#t~ret14_-2| () Int)
(declare-fun |main_#t~ret14_-1| () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |assume_abort_if_not_#in~cond_-1| |main_#t~ret14_-2|) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |main_#t~malloc15.offset_-2| () Int)
(declare-fun main_~n~0_-2 () Int)
(declare-fun |main_#t~malloc15.base_-2| () Int)
(declare-fun |old(#memory_int#1)_-1| () (Array Int (Array Int Int)))
(declare-fun |main_#t~malloc15.offset_-1| () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun |#Ultimate.meminit_#ptr.base_-1| () Int)
(declare-fun |main_#t~malloc15.base_-1| () Int)
(declare-fun |v_#Ultimate.meminit_#productInParam_3_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#ptr.offsetInParam_3_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#sizeOfFieldsInParam_3_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#amountOfFieldsInParam_3_fresh_1| () Int)
(declare-fun |#memory_int#1_-1| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_0| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_51_fresh_1 () (Array Int Int))
(assert (! (= |#memory_int#1_-1| |old(#memory_int#1)_-1|) :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (= ((as const (Array Int Int)) 0) v_ArrVal_51_fresh_1) (= |#memory_int#1_0| (store |#memory_int#1_-1| |#Ultimate.meminit_#ptr.base_-1| v_ArrVal_51_fresh_1))) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (and (= |#Ultimate.meminit_#ptr.base_-1| |main_#t~malloc15.base_-2|) (= |v_#Ultimate.meminit_#productInParam_3_fresh_1| (* main_~n~0_-2 4)) (= |v_#Ultimate.meminit_#sizeOfFieldsInParam_3_fresh_1| 4) (= |v_#Ultimate.meminit_#ptr.offsetInParam_3_fresh_1| |main_#t~malloc15.offset_-2|) (= main_~n~0_-2 |v_#Ultimate.meminit_#amountOfFieldsInParam_3_fresh_1|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! (= |old(#memory_int#1)_-1| |#memory_int#1_-2|) :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |main_#t~malloc16.offset_-2| () Int)
(declare-fun main_~n~0_-2 () Int)
(declare-fun |main_#t~malloc16.base_-2| () Int)
(declare-fun |old(#memory_int#1)_-1| () (Array Int (Array Int Int)))
(declare-fun |main_#t~malloc16.offset_-1| () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun |#Ultimate.meminit_#ptr.base_-1| () Int)
(declare-fun |main_#t~malloc16.base_-1| () Int)
(declare-fun |v_#Ultimate.meminit_#ptr.offsetInParam_4_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#productInParam_4_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#sizeOfFieldsInParam_4_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#amountOfFieldsInParam_4_fresh_1| () Int)
(declare-fun |#memory_int#1_-1| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_0| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_52_fresh_1 () (Array Int Int))
(assert (! (= |#memory_int#1_-1| |old(#memory_int#1)_-1|) :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (= |#memory_int#1_0| (store |#memory_int#1_-1| |#Ultimate.meminit_#ptr.base_-1| v_ArrVal_52_fresh_1)) (= ((as const (Array Int Int)) 0) v_ArrVal_52_fresh_1)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (and (= |v_#Ultimate.meminit_#sizeOfFieldsInParam_4_fresh_1| 4) (= |main_#t~malloc16.offset_-2| |v_#Ultimate.meminit_#ptr.offsetInParam_4_fresh_1|) (= |v_#Ultimate.meminit_#productInParam_4_fresh_1| (* main_~n~0_-2 4)) (= main_~n~0_-2 |v_#Ultimate.meminit_#amountOfFieldsInParam_4_fresh_1|) (= |#Ultimate.meminit_#ptr.base_-1| |main_#t~malloc16.base_-2|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! (= |old(#memory_int#1)_-1| |#memory_int#1_-2|) :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun main_~a~0.base_-2 () Int)
(declare-fun main_~n~0_-2 () Int)
(declare-fun main_~a~0.offset_-2 () Int)
(declare-fun |old(#memory_int#1)_-1| () (Array Int (Array Int Int)))
(declare-fun |upsweep_#in~n_-1| () Int)
(declare-fun main_~a~0.base_-1 () Int)
(declare-fun |upsweep_#in~a.offset_-1| () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun main_~a~0.offset_-1 () Int)
(declare-fun |upsweep_#in~a.base_-1| () Int)
(declare-fun |#memory_int#1_-1| () (Array Int (Array Int Int)))
(declare-fun upsweep_~space~0_0 () Int)
(declare-fun upsweep_~n_0 () Int)
(declare-fun upsweep_~a.base_0 () Int)
(declare-fun upsweep_~a.offset_0 () Int)
(declare-fun upsweep_~left~0_1 () Int)
(declare-fun upsweep_~left~0_2 () Int)
(declare-fun |upsweep_#t~mem6_2| () Int)
(declare-fun |upsweep_#t~mem5_2| () Int)
(declare-fun upsweep_~right~0_2 () Int)
(declare-fun |#memory_int#1_2| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_53_fresh_1 () (Array Int Int))
(declare-fun v_ArrVal_54_fresh_1 () Int)
(declare-fun upsweep_~left~0_3 () Int)
(declare-fun upsweep_~left~0_4 () Int)
(declare-fun upsweep_~space~0_4 () Int)
(declare-fun upsweep_~n_5 () Int)
(declare-fun upsweep_~space~0_6 () Int)
(declare-fun |upsweep_#res_6| () Int)
(declare-fun |main_#t~ret19_7| () Int)
(declare-fun |upsweep_#res_7| () Int)
(assert (! (= |#memory_int#1_-1| |old(#memory_int#1)_-1|) :named ssa_precond))
(assert (! (not (<= 2 |main_#t~ret19_7|)) :named ssa_postcond))
(assert (! (and (= upsweep_~a.offset_0 |upsweep_#in~a.offset_-1|) (= upsweep_~space~0_0 1) (= upsweep_~n_0 |upsweep_#in~n_-1|) (= |upsweep_#in~a.base_-1| upsweep_~a.base_0)) :named ssa_0))
(assert (! (and (= upsweep_~space~0_0 (+ upsweep_~left~0_1 1)) (< upsweep_~space~0_0 upsweep_~n_0)) :named ssa_1))
(assert (! (and (= (+ (select (select |#memory_int#1_-1| upsweep_~a.base_0) (+ (* upsweep_~left~0_1 4) upsweep_~a.offset_0)) (select (select |#memory_int#1_-1| upsweep_~a.base_0) (+ (* upsweep_~left~0_1 4) upsweep_~a.offset_0 (* upsweep_~space~0_0 4)))) v_ArrVal_54_fresh_1) (< upsweep_~left~0_1 upsweep_~n_0) (= (+ (* 2 upsweep_~space~0_0) upsweep_~left~0_1) upsweep_~left~0_2) (= (store (select |#memory_int#1_-1| upsweep_~a.base_0) (+ (* upsweep_~left~0_1 4) upsweep_~a.offset_0 (* upsweep_~space~0_0 4)) (+ (select (select |#memory_int#1_-1| upsweep_~a.base_0) (+ (* upsweep_~left~0_1 4) upsweep_~a.offset_0)) (select (select |#memory_int#1_-1| upsweep_~a.base_0) (+ (* upsweep_~left~0_1 4) upsweep_~a.offset_0 (* upsweep_~space~0_0 4))))) v_ArrVal_53_fresh_1) (= |#memory_int#1_2| (store |#memory_int#1_-1| upsweep_~a.base_0 v_ArrVal_53_fresh_1))) :named ssa_2))
(assert (! (<= upsweep_~n_0 upsweep_~left~0_2) :named ssa_3))
(assert (! (= (* 2 upsweep_~space~0_0) upsweep_~space~0_4) :named ssa_4))
(assert (! (<= upsweep_~n_0 upsweep_~space~0_4) :named ssa_5))
(assert (! (= |upsweep_#res_6| upsweep_~space~0_4) :named ssa_6))
(assert (! (= |main_#t~ret19_7| |upsweep_#res_6|) :named ssa_7_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (and (= main_~a~0.base_-2 |upsweep_#in~a.base_-1|) (= |upsweep_#in~a.offset_-1| main_~a~0.offset_-2) (= main_~n~0_-2 |upsweep_#in~n_-1|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! (= |old(#memory_int#1)_-1| |#memory_int#1_-2|) :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 ssa_3 ssa_4 ssa_5 ssa_6 (and ssa_7_return ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun main_~space~1_-2 () Int)
(declare-fun main_~a~0.base_-2 () Int)
(declare-fun main_~n~0_-2 () Int)
(declare-fun main_~a~0.offset_-2 () Int)
(declare-fun |old(#memory_int#1)_-1| () (Array Int (Array Int Int)))
(declare-fun |downsweep_#in~a.offset_-1| () Int)
(declare-fun |downsweep_#in~space_-1| () Int)
(declare-fun main_~a~0.base_-1 () Int)
(declare-fun |downsweep_#in~n_-1| () Int)
(declare-fun |downsweep_#in~a.base_-1| () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun main_~a~0.offset_-1 () Int)
(declare-fun main_~space~1_-1 () Int)
(declare-fun |#memory_int#1_-1| () (Array Int (Array Int Int)))
(declare-fun downsweep_~n_0 () Int)
(declare-fun downsweep_~space_0 () Int)
(declare-fun downsweep_~a.offset_0 () Int)
(declare-fun downsweep_~a.base_0 () Int)
(declare-fun |#memory_int#1_0| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_56_fresh_1 () (Array Int Int))
(declare-fun v_ArrVal_55_fresh_1 () Int)
(declare-fun downsweep_~space_1 () Int)
(assert (! (= |#memory_int#1_-1| |old(#memory_int#1)_-1|) :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= downsweep_~space_0 (ite (and (not (= (mod |downsweep_#in~space_-1| 2) 0)) (< |downsweep_#in~space_-1| 0)) (+ (div |downsweep_#in~space_-1| 2) 1) (div |downsweep_#in~space_-1| 2))) (= downsweep_~a.base_0 |downsweep_#in~a.base_-1|) (= downsweep_~a.offset_0 |downsweep_#in~a.offset_-1|) (= (store (select |#memory_int#1_-1| downsweep_~a.base_0) (+ downsweep_~a.offset_0 (- 4) (* downsweep_~n_0 4)) v_ArrVal_55_fresh_1) v_ArrVal_56_fresh_1) (= downsweep_~n_0 |downsweep_#in~n_-1|) (= v_ArrVal_55_fresh_1 0) (= (store |#memory_int#1_-1| downsweep_~a.base_0 v_ArrVal_56_fresh_1) |#memory_int#1_0|)) :named ssa_0))
(assert (! (<= downsweep_~space_0 0) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (<= 2 main_~space~1_-2) :named ssa_-2_PendingContext))
(assert (! (and (= |downsweep_#in~a.base_-1| main_~a~0.base_-2) (= main_~n~0_-2 |downsweep_#in~n_-1|) (= |downsweep_#in~space_-1| main_~space~1_-2) (= main_~a~0.offset_-2 |downsweep_#in~a.offset_-1|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! (= |old(#memory_int#1)_-1| |#memory_int#1_-2|) :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(exit)
