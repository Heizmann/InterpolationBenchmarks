(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-30T23:56:51+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id zonotope_3.c_AllErrorsAtOnce_Iteration1)
(declare-fun ~someBinaryArithmeticFLOAToperation (Real Real) Real)
(declare-fun ~someUnaryFLOAToperation (Real) Real)
(declare-fun ~someBinaryFLOATComparisonOperation (Real Real) Bool)
(declare-fun ~convertINTToFLOAT (Int) Real)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c___VERIFIER_nondet_float_#res| () Real)
(declare-fun |c___VERIFIER_nondet_float_#res_primed| () Real)
(declare-fun |c_f_#in~x| () Real)
(declare-fun |c_f_#in~x_primed| () Real)
(declare-fun |c_f_#res| () Real)
(declare-fun |c_f_#res_primed| () Real)
(declare-fun c_f_~x () Real)
(declare-fun c_f_~x_primed () Real)
(declare-fun |c_g_#in~x| () Real)
(declare-fun |c_g_#in~x_primed| () Real)
(declare-fun |c_g_#res| () Real)
(declare-fun |c_g_#res_primed| () Real)
(declare-fun c_g_~x () Real)
(declare-fun c_g_~x_primed () Real)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_assume_abort_if_not_#in~cond| () Int)
(declare-fun |c_assume_abort_if_not_#in~cond_primed| () Int)
(declare-fun c_assume_abort_if_not_~cond () Int)
(declare-fun c_assume_abort_if_not_~cond_primed () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~ret4| () Real)
(declare-fun |c_main_#t~ret4_primed| () Real)
(declare-fun |c_main_#t~ret5| () Real)
(declare-fun |c_main_#t~ret5_primed| () Real)
(declare-fun |c_main_#t~ret6| () Real)
(declare-fun |c_main_#t~ret6_primed| () Real)
(declare-fun |c_main_#t~ret7| () Real)
(declare-fun |c_main_#t~ret7_primed| () Real)
(declare-fun |c_main_#t~nondet8| () Real)
(declare-fun |c_main_#t~nondet8_primed| () Real)
(declare-fun |c_main_#t~ret9| () Real)
(declare-fun |c_main_#t~ret9_primed| () Real)
(declare-fun |c_main_#t~ret10| () Real)
(declare-fun |c_main_#t~ret10_primed| () Real)
(declare-fun |c_main_#t~ret11| () Real)
(declare-fun |c_main_#t~ret11_primed| () Real)
(declare-fun |c_main_#t~ret12| () Real)
(declare-fun |c_main_#t~ret12_primed| () Real)
(declare-fun |c_main_#t~post13| () Int)
(declare-fun |c_main_#t~post13_primed| () Int)
(declare-fun c_main_~i~0 () Int)
(declare-fun c_main_~i~0_primed () Int)
(declare-fun c_main_~x~0 () Real)
(declare-fun c_main_~x~0_primed () Real)
(declare-fun c_main_~y~0 () Real)
(declare-fun c_main_~y~0_primed () Real)
(declare-fun c_main_~z~0 () Real)
(declare-fun c_main_~z~0_primed () Real)
(declare-fun c_main_~t~0 () Real)
(declare-fun c_main_~t~0_primed () Real)
(declare-fun c_main_~u~0 () Real)
(declare-fun c_main_~u~0_primed () Real)
(declare-fun c_main_~v~0 () Real)
(declare-fun c_main_~v~0_primed () Real)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret14| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret14_primed| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond_primed| () Int)
(declare-fun c___VERIFIER_assert_~cond () Int)
(declare-fun c___VERIFIER_assert_~cond_primed () Int)
(declare-fun |c___assert_fail_#in~0.base| () Int)
(declare-fun |c___assert_fail_#in~0.base_primed| () Int)
(declare-fun |c___assert_fail_#in~0.offset| () Int)
(declare-fun |c___assert_fail_#in~0.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~1.base| () Int)
(declare-fun |c___assert_fail_#in~1.base_primed| () Int)
(declare-fun |c___assert_fail_#in~1.offset| () Int)
(declare-fun |c___assert_fail_#in~1.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~2| () Int)
(declare-fun |c___assert_fail_#in~2_primed| () Int)
(declare-fun |c___assert_fail_#in~3.base| () Int)
(declare-fun |c___assert_fail_#in~3.base_primed| () Int)
(declare-fun |c___assert_fail_#in~3.offset| () Int)
(declare-fun |c___assert_fail_#in~3.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_7 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_8 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_12 () Bool)
(declare-fun c_aux_v_~someBinaryFLOATComparisonOperation_11 () Bool)
(declare-fun c_aux_v_f_~x_2 () Real)
(declare-fun c_aux_v_g_~x_2 () Real)
(declare-fun c_aux_v_main_~y~0_4 () Real)
(declare-fun c_aux_v_main_~z~0_4 () Real)
(declare-fun |c_aux_v_main_#t~ret12_4| () Real)
(declare-fun c_aux_v_main_~u~0_6 () Real)
(declare-fun c_aux_v_main_~y~0_5 () Real)
(declare-fun c_aux_v_main_~z~0_5 () Real)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret14_3| () Int)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun main_~v~0_4 () Real)
(declare-fun main_~x~0_4 () Real)
(declare-fun main_~z~0_4 () Real)
(declare-fun main_~t~0_4 () Real)
(declare-fun main_~i~0_4 () Int)
(declare-fun main_~y~0_4 () Real)
(declare-fun main_~u~0_4 () Real)
(declare-fun |f_#in~x_5| () Real)
(declare-fun |f_#res_6| () Real)
(declare-fun |main_#t~ret4_7| () Real)
(declare-fun |f_#res_7| () Real)
(declare-fun |main_#t~ret4_8| () Real)
(declare-fun v_main_~y~0_6_fresh_1 () Real)
(declare-fun |g_#in~x_9| () Real)
(declare-fun |g_#res_10| () Real)
(declare-fun |main_#t~ret5_11| () Real)
(declare-fun |g_#res_11| () Real)
(declare-fun |main_#t~ret5_12| () Real)
(declare-fun v_main_~z~0_6_fresh_1 () Real)
(declare-fun |f_#in~x_13| () Real)
(declare-fun |f_#res_14| () Real)
(declare-fun |main_#t~ret6_15| () Real)
(declare-fun |f_#res_15| () Real)
(declare-fun |main_#t~ret6_16| () Real)
(declare-fun v_main_~u~0_7_fresh_1 () Real)
(declare-fun |g_#in~x_17| () Real)
(declare-fun |g_#res_18| () Real)
(declare-fun |main_#t~ret7_19| () Real)
(declare-fun |g_#res_19| () Real)
(declare-fun |main_#t~ret7_20| () Real)
(declare-fun main_~v~0_20 () Real)
(declare-fun main_~i~0_20 () Int)
(declare-fun main_~t~0_22 () Real)
(declare-fun |__VERIFIER_assert_#in~cond_23| () Int)
(declare-fun v_~someBinaryFLOATComparisonOperation_13_fresh_1 () Bool)
(declare-fun v_~someBinaryFLOATComparisonOperation_14_fresh_1 () Bool)
(declare-fun __VERIFIER_assert_~cond_24 () Int)
(declare-fun __VERIFIER_assert_~cond_25 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! true :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! true :named ssa_0_OldVarAssigCall))
(assert (! (and (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#length_-1| 2) 13) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! true :named ssa_4))
(assert (! true :named ssa_5_GlobVarAssigCall))
(assert (! (= |f_#in~x_5| 0.0) :named ssa_5_LocVarAssigCall))
(assert (! true :named ssa_5_OldVarAssigCall))
(assert (! true :named ssa_6))
(assert (! (= |main_#t~ret4_7| |f_#res_6|) :named ssa_7_return))
(assert (! (= v_main_~y~0_6_fresh_1 |main_#t~ret4_7|) :named ssa_8))
(assert (! true :named ssa_9_GlobVarAssigCall))
(assert (! (= |g_#in~x_9| 0.0) :named ssa_9_LocVarAssigCall))
(assert (! true :named ssa_9_OldVarAssigCall))
(assert (! true :named ssa_10))
(assert (! (= |main_#t~ret5_11| |g_#res_10|) :named ssa_11_return))
(assert (! (= v_main_~z~0_6_fresh_1 |main_#t~ret5_11|) :named ssa_12))
(assert (! true :named ssa_13_GlobVarAssigCall))
(assert (! (= |f_#in~x_13| (/ 3.0 4.0)) :named ssa_13_LocVarAssigCall))
(assert (! true :named ssa_13_OldVarAssigCall))
(assert (! true :named ssa_14))
(assert (! (= |main_#t~ret6_15| |f_#res_14|) :named ssa_15_return))
(assert (! (= v_main_~u~0_7_fresh_1 |main_#t~ret6_15|) :named ssa_16))
(assert (! true :named ssa_17_GlobVarAssigCall))
(assert (! (= |g_#in~x_17| (/ 1.0 4.0)) :named ssa_17_LocVarAssigCall))
(assert (! true :named ssa_17_OldVarAssigCall))
(assert (! true :named ssa_18))
(assert (! (= |main_#t~ret7_19| |g_#res_18|) :named ssa_19_return))
(assert (! (and (= main_~v~0_20 |main_#t~ret7_19|) (= main_~i~0_20 1)) :named ssa_20))
(assert (! false :named ssa_21))
(assert (! true :named ssa_22))
(assert (! true :named ssa_23_GlobVarAssigCall))
(assert (! (= |__VERIFIER_assert_#in~cond_23| (ite (and v_~someBinaryFLOATComparisonOperation_14_fresh_1 v_~someBinaryFLOATComparisonOperation_13_fresh_1) 1 0)) :named ssa_23_LocVarAssigCall))
(assert (! true :named ssa_23_OldVarAssigCall))
(assert (! (= __VERIFIER_assert_~cond_24 |__VERIFIER_assert_#in~cond_23|) :named ssa_24))
(assert (! (= __VERIFIER_assert_~cond_24 0) :named ssa_25))
(assert (! true :named ssa_26))
(check-sat)
(get-interpolants (and ssa_0_LocVarAssigCall ssa_precond ssa_0_GlobVarAssigCall ssa_0_OldVarAssigCall ssa_2_return ssa_1) (and ssa_3_OldVarAssigCall ssa_3_LocVarAssigCall ssa_3_GlobVarAssigCall) ssa_4 (and ssa_5_LocVarAssigCall ssa_5_GlobVarAssigCall ssa_6 ssa_7_return ssa_5_OldVarAssigCall) ssa_8 (and ssa_11_return ssa_10 ssa_9_LocVarAssigCall ssa_9_OldVarAssigCall ssa_9_GlobVarAssigCall) ssa_12 (and ssa_14 ssa_13_LocVarAssigCall ssa_13_OldVarAssigCall ssa_13_GlobVarAssigCall ssa_15_return) ssa_16 (and ssa_17_LocVarAssigCall ssa_17_GlobVarAssigCall ssa_17_OldVarAssigCall ssa_19_return ssa_18) ssa_20 ssa_21 ssa_22 (and ssa_23_OldVarAssigCall ssa_23_LocVarAssigCall ssa_23_GlobVarAssigCall) ssa_24 ssa_25 (and ssa_26 ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#length_-1| 2) 13) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! true :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |main_#t~ret4_1| () Real)
(declare-fun |f_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret4_1| |f_#res_0|) :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| 0.0) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |main_#t~ret5_1| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret5_1| |g_#res_0|) :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| 0.0) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |f_#in~x_-1| () Real)
(declare-fun |f_#res_0| () Real)
(declare-fun |main_#t~ret6_1| () Real)
(declare-fun |f_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret6_1| |f_#res_0|) :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |f_#in~x_-1| (/ 3.0 4.0)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |g_#in~x_-1| () Real)
(declare-fun |g_#res_0| () Real)
(declare-fun |main_#t~ret7_1| () Real)
(declare-fun |g_#res_1| () Real)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! true :named ssa_0))
(assert (! (= |main_#t~ret7_1| |g_#res_0|) :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |g_#in~x_-1| (/ 1.0 4.0)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(exit)
