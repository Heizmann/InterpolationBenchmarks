(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-31T00:18:24+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id duplets.c_AllErrorsAtOnce_Iteration13)
(define-fun ~initToZeroAtPointerBaseAddress~int ((in0 (Array Int (Array Int Int))) (in1 Int)) (Array Int (Array Int Int)) (store in0 in1 ((as const (Array Int Int)) 0)))
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#1)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#1)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#1| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#1_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#2)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#2)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#2| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#2_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#3)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#3)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#3| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#3_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c_finddup_#in~a.base| () Int)
(declare-fun |c_finddup_#in~a.base_primed| () Int)
(declare-fun |c_finddup_#in~a.offset| () Int)
(declare-fun |c_finddup_#in~a.offset_primed| () Int)
(declare-fun |c_finddup_#in~n| () Int)
(declare-fun |c_finddup_#in~n_primed| () Int)
(declare-fun |c_finddup_#in~_i.base| () Int)
(declare-fun |c_finddup_#in~_i.base_primed| () Int)
(declare-fun |c_finddup_#in~_i.offset| () Int)
(declare-fun |c_finddup_#in~_i.offset_primed| () Int)
(declare-fun |c_finddup_#in~_j.base| () Int)
(declare-fun |c_finddup_#in~_j.base_primed| () Int)
(declare-fun |c_finddup_#in~_j.offset| () Int)
(declare-fun |c_finddup_#in~_j.offset_primed| () Int)
(declare-fun |c_finddup_#res| () Int)
(declare-fun |c_finddup_#res_primed| () Int)
(declare-fun |c_finddup_#t~mem8| () Int)
(declare-fun |c_finddup_#t~mem8_primed| () Int)
(declare-fun |c_finddup_#t~mem9| () Int)
(declare-fun |c_finddup_#t~mem9_primed| () Int)
(declare-fun |c_finddup_#t~post10| () Int)
(declare-fun |c_finddup_#t~post10_primed| () Int)
(declare-fun |c_finddup_#t~post11| () Int)
(declare-fun |c_finddup_#t~post11_primed| () Int)
(declare-fun c_finddup_~a.base () Int)
(declare-fun c_finddup_~a.base_primed () Int)
(declare-fun c_finddup_~a.offset () Int)
(declare-fun c_finddup_~a.offset_primed () Int)
(declare-fun c_finddup_~n () Int)
(declare-fun c_finddup_~n_primed () Int)
(declare-fun c_finddup_~_i.base () Int)
(declare-fun c_finddup_~_i.base_primed () Int)
(declare-fun c_finddup_~_i.offset () Int)
(declare-fun c_finddup_~_i.offset_primed () Int)
(declare-fun c_finddup_~_j.base () Int)
(declare-fun c_finddup_~_j.base_primed () Int)
(declare-fun c_finddup_~_j.offset () Int)
(declare-fun c_finddup_~_j.offset_primed () Int)
(declare-fun c_finddup_~i~1 () Int)
(declare-fun c_finddup_~i~1_primed () Int)
(declare-fun c_finddup_~j~1 () Int)
(declare-fun c_finddup_~j~1_primed () Int)
(declare-fun |c_write~init~int#3_#value| () Int)
(declare-fun |c_write~init~int#3_#value_primed| () Int)
(declare-fun |c_write~init~int#3_#ptr.base| () Int)
(declare-fun |c_write~init~int#3_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#3_#ptr.offset| () Int)
(declare-fun |c_write~init~int#3_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#3_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#3_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_read~int#3_#ptr.base| () Int)
(declare-fun |c_read~int#3_#ptr.base_primed| () Int)
(declare-fun |c_read~int#3_#ptr.offset| () Int)
(declare-fun |c_read~int#3_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#3_#sizeOfReadType| () Int)
(declare-fun |c_read~int#3_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#3_#value| () Int)
(declare-fun |c_read~int#3_#value_primed| () Int)
(declare-fun |c_read~int#2_#ptr.base| () Int)
(declare-fun |c_read~int#2_#ptr.base_primed| () Int)
(declare-fun |c_read~int#2_#ptr.offset| () Int)
(declare-fun |c_read~int#2_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#2_#sizeOfReadType| () Int)
(declare-fun |c_read~int#2_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#2_#value| () Int)
(declare-fun |c_read~int#2_#value_primed| () Int)
(declare-fun |c_read~int#1_#ptr.base| () Int)
(declare-fun |c_read~int#1_#ptr.base_primed| () Int)
(declare-fun |c_read~int#1_#ptr.offset| () Int)
(declare-fun |c_read~int#1_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#1_#sizeOfReadType| () Int)
(declare-fun |c_read~int#1_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#1_#value| () Int)
(declare-fun |c_read~int#1_#value_primed| () Int)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~nondet12| () Int)
(declare-fun |c_main_#t~nondet12_primed| () Int)
(declare-fun |c_main_#t~malloc13.base| () Int)
(declare-fun |c_main_#t~malloc13.base_primed| () Int)
(declare-fun |c_main_#t~malloc13.offset| () Int)
(declare-fun |c_main_#t~malloc13.offset_primed| () Int)
(declare-fun |c_main_#t~ret14| () Int)
(declare-fun |c_main_#t~ret14_primed| () Int)
(declare-fun |c_main_#t~mem15| () Int)
(declare-fun |c_main_#t~mem15_primed| () Int)
(declare-fun |c_main_#t~mem16| () Int)
(declare-fun |c_main_#t~mem16_primed| () Int)
(declare-fun |c_main_#t~short17| () Bool)
(declare-fun |c_main_#t~short17_primed| () Bool)
(declare-fun |c_main_#t~mem18| () Int)
(declare-fun |c_main_#t~mem18_primed| () Int)
(declare-fun |c_main_#t~mem19| () Int)
(declare-fun |c_main_#t~mem19_primed| () Int)
(declare-fun |c_main_#t~short20| () Bool)
(declare-fun |c_main_#t~short20_primed| () Bool)
(declare-fun |c_main_#t~mem21| () Int)
(declare-fun |c_main_#t~mem21_primed| () Int)
(declare-fun |c_main_#t~mem22| () Int)
(declare-fun |c_main_#t~mem22_primed| () Int)
(declare-fun |c_main_#t~mem23| () Int)
(declare-fun |c_main_#t~mem23_primed| () Int)
(declare-fun |c_main_#t~mem25| () Int)
(declare-fun |c_main_#t~mem25_primed| () Int)
(declare-fun |c_main_#t~mem24| () Int)
(declare-fun |c_main_#t~mem24_primed| () Int)
(declare-fun |c_main_#t~mem26| () Int)
(declare-fun |c_main_#t~mem26_primed| () Int)
(declare-fun c_main_~n~0 () Int)
(declare-fun c_main_~n~0_primed () Int)
(declare-fun c_main_~a~0.base () Int)
(declare-fun c_main_~a~0.base_primed () Int)
(declare-fun c_main_~a~0.offset () Int)
(declare-fun c_main_~a~0.offset_primed () Int)
(declare-fun |c_main_~#i~2.base| () Int)
(declare-fun |c_main_~#i~2.base_primed| () Int)
(declare-fun |c_main_~#i~2.offset| () Int)
(declare-fun |c_main_~#i~2.offset_primed| () Int)
(declare-fun |c_main_~#j~2.base| () Int)
(declare-fun |c_main_~#j~2.base_primed| () Int)
(declare-fun |c_main_~#j~2.offset| () Int)
(declare-fun |c_main_~#j~2.offset_primed| () Int)
(declare-fun c_main_~r~0 () Int)
(declare-fun c_main_~r~0_primed () Int)
(declare-fun |c_calloc_#in~nmemb| () Int)
(declare-fun |c_calloc_#in~nmemb_primed| () Int)
(declare-fun |c_calloc_#in~size| () Int)
(declare-fun |c_calloc_#in~size_primed| () Int)
(declare-fun |c_calloc_#res.base| () Int)
(declare-fun |c_calloc_#res.base_primed| () Int)
(declare-fun |c_calloc_#res.offset| () Int)
(declare-fun |c_calloc_#res.offset_primed| () Int)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_#Ultimate.allocOnStack_~size| () Int)
(declare-fun |c_#Ultimate.allocOnStack_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocOnStack_#res.base| () Int)
(declare-fun |c_#Ultimate.allocOnStack_#res.base_primed| () Int)
(declare-fun |c_#Ultimate.allocOnStack_#res.offset| () Int)
(declare-fun |c_#Ultimate.allocOnStack_#res.offset_primed| () Int)
(declare-fun |c_write~int#1_#value| () Int)
(declare-fun |c_write~int#1_#value_primed| () Int)
(declare-fun |c_write~int#1_#ptr.base| () Int)
(declare-fun |c_write~int#1_#ptr.base_primed| () Int)
(declare-fun |c_write~int#1_#ptr.offset| () Int)
(declare-fun |c_write~int#1_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#1_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#1_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_write~int#2_#value| () Int)
(declare-fun |c_write~int#2_#value_primed| () Int)
(declare-fun |c_write~int#2_#ptr.base| () Int)
(declare-fun |c_write~int#2_#ptr.base_primed| () Int)
(declare-fun |c_write~int#2_#ptr.offset| () Int)
(declare-fun |c_write~int#2_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#2_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#2_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_mkdup_#in~a.base| () Int)
(declare-fun |c_mkdup_#in~a.base_primed| () Int)
(declare-fun |c_mkdup_#in~a.offset| () Int)
(declare-fun |c_mkdup_#in~a.offset_primed| () Int)
(declare-fun |c_mkdup_#in~n| () Int)
(declare-fun |c_mkdup_#in~n_primed| () Int)
(declare-fun |c_mkdup_#t~nondet5| () Int)
(declare-fun |c_mkdup_#t~nondet5_primed| () Int)
(declare-fun |c_mkdup_#t~nondet6| () Int)
(declare-fun |c_mkdup_#t~nondet6_primed| () Int)
(declare-fun |c_mkdup_#t~nondet7| () Int)
(declare-fun |c_mkdup_#t~nondet7_primed| () Int)
(declare-fun c_mkdup_~a.base () Int)
(declare-fun c_mkdup_~a.base_primed () Int)
(declare-fun c_mkdup_~a.offset () Int)
(declare-fun c_mkdup_~a.offset_primed () Int)
(declare-fun c_mkdup_~n () Int)
(declare-fun c_mkdup_~n_primed () Int)
(declare-fun c_mkdup_~i~0 () Int)
(declare-fun c_mkdup_~i~0_primed () Int)
(declare-fun c_mkdup_~j~0 () Int)
(declare-fun c_mkdup_~j~0_primed () Int)
(declare-fun c_mkdup_~x~0 () Int)
(declare-fun c_mkdup_~x~0_primed () Int)
(declare-fun |c_#Ultimate.meminit_#ptr.base| () Int)
(declare-fun |c_#Ultimate.meminit_#ptr.base_primed| () Int)
(declare-fun |c_#Ultimate.meminit_#ptr.offset| () Int)
(declare-fun |c_#Ultimate.meminit_#ptr.offset_primed| () Int)
(declare-fun |c_#Ultimate.meminit_#amountOfFields| () Int)
(declare-fun |c_#Ultimate.meminit_#amountOfFields_primed| () Int)
(declare-fun |c_#Ultimate.meminit_#sizeOfFields| () Int)
(declare-fun |c_#Ultimate.meminit_#sizeOfFields_primed| () Int)
(declare-fun |c_#Ultimate.meminit_#product| () Int)
(declare-fun |c_#Ultimate.meminit_#product_primed| () Int)
(declare-fun |c_free_#in~0.base| () Int)
(declare-fun |c_free_#in~0.base_primed| () Int)
(declare-fun |c_free_#in~0.offset| () Int)
(declare-fun |c_free_#in~0.offset_primed| () Int)
(declare-fun |c_write~init~int#2_#value| () Int)
(declare-fun |c_write~init~int#2_#value_primed| () Int)
(declare-fun |c_write~init~int#2_#ptr.base| () Int)
(declare-fun |c_write~init~int#2_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#2_#ptr.offset| () Int)
(declare-fun |c_write~init~int#2_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#2_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#2_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_write~init~int#1_#value| () Int)
(declare-fun |c_write~init~int#1_#value_primed| () Int)
(declare-fun |c_write~init~int#1_#ptr.base| () Int)
(declare-fun |c_write~init~int#1_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#1_#ptr.offset| () Int)
(declare-fun |c_write~init~int#1_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#1_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#1_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_assume_abort_if_not_#in~cond| () Int)
(declare-fun |c_assume_abort_if_not_#in~cond_primed| () Int)
(declare-fun c_assume_abort_if_not_~cond () Int)
(declare-fun c_assume_abort_if_not_~cond_primed () Int)
(declare-fun |c_write~int#3_#value| () Int)
(declare-fun |c_write~int#3_#value_primed| () Int)
(declare-fun |c_write~int#3_#ptr.base| () Int)
(declare-fun |c_write~int#3_#ptr.base_primed| () Int)
(declare-fun |c_write~int#3_#ptr.offset| () Int)
(declare-fun |c_write~int#3_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#3_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#3_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_~size| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_#res.base| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_#res.base_primed| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_#res.offset| () Int)
(declare-fun |c_#Ultimate.allocOnHeap_#res.offset_primed| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res_primed| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret27| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret27_primed| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond| () Int)
(declare-fun |c___VERIFIER_assert_#in~cond_primed| () Int)
(declare-fun c___VERIFIER_assert_~cond () Int)
(declare-fun c___VERIFIER_assert_~cond_primed () Int)
(declare-fun |c___assert_fail_#in~1.base| () Int)
(declare-fun |c___assert_fail_#in~1.base_primed| () Int)
(declare-fun |c___assert_fail_#in~1.offset| () Int)
(declare-fun |c___assert_fail_#in~1.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~2.base| () Int)
(declare-fun |c___assert_fail_#in~2.base_primed| () Int)
(declare-fun |c___assert_fail_#in~2.offset| () Int)
(declare-fun |c___assert_fail_#in~2.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~3| () Int)
(declare-fun |c___assert_fail_#in~3_primed| () Int)
(declare-fun |c___assert_fail_#in~4.base| () Int)
(declare-fun |c___assert_fail_#in~4.base_primed| () Int)
(declare-fun |c___assert_fail_#in~4.offset| () Int)
(declare-fun |c___assert_fail_#in~4.offset_primed| () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun |c_aux_v_main_#t~mem15_3| () Int)
(declare-fun |c_aux_v_main_#t~mem16_3| () Int)
(declare-fun |c_aux_v_main_#t~mem18_3| () Int)
(declare-fun |c_aux_v_main_#t~mem19_3| () Int)
(declare-fun |c_aux_v_main_#t~mem24_3| () Int)
(declare-fun |c_aux_v_main_#t~mem23_3| () Int)
(declare-fun c_aux_v_mkdup_~x~0_2 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_2| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_2| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_2| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_2| () Int)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret27_3| () Int)
(declare-fun c_aux_v_mkdup_~x~0_3 () Int)
(declare-fun c_aux_v_mkdup_~x~0_4 () Int)
(declare-fun c_aux_v_ArrVal_1 () Int)
(declare-fun c_aux_v_ArrVal_2 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_3| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_3| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_3| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_3| () Int)
(declare-fun c_aux_v_ArrVal_3 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_5 () Int)
(declare-fun c_aux_v_ArrVal_4 () Int)
(declare-fun c_aux_v_ArrVal_6 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_5 () Int)
(declare-fun c_aux_v_ArrVal_8 () Int)
(declare-fun c_aux_v_ArrVal_9 () Int)
(declare-fun c_aux_v_ArrVal_10 () Int)
(declare-fun c_aux_v_ArrVal_7 () Int)
(declare-fun c_aux_v_ArrVal_11 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_6 () Int)
(declare-fun c_aux_v_ArrVal_14 () Int)
(declare-fun c_aux_v_ArrVal_13 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_12 () Int)
(declare-fun c_aux_v_ArrVal_15 () Int)
(declare-fun c_aux_v_ArrVal_16 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_4| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_4| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_4| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_4| () Int)
(declare-fun c_aux_v_ArrVal_17 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_19 () Int)
(declare-fun c_aux_v_mkdup_~x~0_7 () Int)
(declare-fun c_aux_v_ArrVal_20 () Int)
(declare-fun c_aux_v_ArrVal_18 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_24 () Int)
(declare-fun c_aux_v_ArrVal_21 () Int)
(declare-fun c_aux_v_ArrVal_22 () Int)
(declare-fun c_aux_v_ArrVal_23 () Int)
(declare-fun c_aux_v_ArrVal_25 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_28 () Int)
(declare-fun c_aux_v_mkdup_~x~0_8 () Int)
(declare-fun c_aux_v_ArrVal_26 () Int)
(declare-fun c_aux_v_ArrVal_27 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_29 () Int)
(declare-fun c_aux_v_ArrVal_30 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_5| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_5| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_5| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_5| () Int)
(declare-fun c_aux_v_ArrVal_31 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_9 () Int)
(declare-fun c_aux_v_ArrVal_32 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_33 () Int)
(declare-fun c_aux_v_ArrVal_34 () Int)
(declare-fun c_aux_v_ArrVal_35 () Int)
(declare-fun c_aux_v_ArrVal_36 () Int)
(declare-fun c_aux_v_ArrVal_37 () Int)
(declare-fun c_aux_v_ArrVal_38 () Int)
(declare-fun c_aux_v_ArrVal_39 () Int)
(declare-fun c_aux_v_ArrVal_40 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_42 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_41 () Int)
(declare-fun c_aux_v_ArrVal_43 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_46 () Int)
(declare-fun c_aux_v_ArrVal_45 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_44 () Int)
(declare-fun c_aux_v_mkdup_~x~0_10 () Int)
(declare-fun c_aux_v_ArrVal_50 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_47 () Int)
(declare-fun c_aux_v_ArrVal_49 () Int)
(declare-fun c_aux_v_ArrVal_48 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_51 () Int)
(declare-fun c_aux_v_ArrVal_52 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_6| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_6| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_6| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_6| () Int)
(declare-fun c_aux_v_ArrVal_53 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_56 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_54 () Int)
(declare-fun c_aux_v_ArrVal_55 () Int)
(declare-fun c_aux_v_mkdup_~x~0_11 () Int)
(declare-fun c_aux_v_ArrVal_57 () Int)
(declare-fun c_aux_v_ArrVal_58 () Int)
(declare-fun c_aux_v_ArrVal_59 () Int)
(declare-fun c_aux_v_ArrVal_60 () Int)
(declare-fun c_aux_v_ArrVal_61 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_62 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_64 () Int)
(declare-fun c_aux_v_mkdup_~x~0_12 () Int)
(declare-fun c_aux_v_ArrVal_63 () Int)
(declare-fun c_aux_v_ArrVal_65 () Int)
(declare-fun c_aux_v_ArrVal_66 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_7| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_7| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_7| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_7| () Int)
(declare-fun c_aux_v_ArrVal_67 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_70 () Int)
(declare-fun c_aux_v_ArrVal_68 () Int)
(declare-fun c_aux_v_ArrVal_69 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_13 () Int)
(declare-fun c_aux_v_ArrVal_71 () Int)
(declare-fun c_aux_v_ArrVal_72 () Int)
(declare-fun c_aux_v_ArrVal_73 () Int)
(declare-fun c_aux_v_ArrVal_74 () Int)
(declare-fun c_aux_v_ArrVal_75 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_78 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_76 () Int)
(declare-fun c_aux_v_ArrVal_77 () Int)
(declare-fun c_aux_v_mkdup_~x~0_14 () Int)
(declare-fun c_aux_v_ArrVal_80 () Int)
(declare-fun c_aux_v_ArrVal_79 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_8| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_8| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_8| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_8| () Int)
(declare-fun c_aux_v_ArrVal_81 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_15 () Int)
(declare-fun c_aux_v_ArrVal_82 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_83 () Int)
(declare-fun c_aux_v_ArrVal_84 () Int)
(declare-fun c_aux_v_ArrVal_86 () Int)
(declare-fun c_aux_v_ArrVal_87 () Int)
(declare-fun c_aux_v_ArrVal_88 () Int)
(declare-fun c_aux_v_ArrVal_85 () Int)
(declare-fun c_aux_v_ArrVal_91 () Int)
(declare-fun c_aux_v_ArrVal_89 () Int)
(declare-fun c_aux_v_ArrVal_92 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_90 () (Array Int Int))
(declare-fun |c_aux_v_main_#t~mem15_4| () Int)
(declare-fun c_aux_v_ArrVal_93 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_95 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_16 () Int)
(declare-fun c_aux_v_ArrVal_94 () Int)
(declare-fun c_aux_v_ArrVal_96 () Int)
(declare-fun c_aux_v_ArrVal_98 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_97 () Int)
(declare-fun c_aux_v_ArrVal_99 () Int)
(declare-fun c_aux_v_ArrVal_100 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_102 () Int)
(declare-fun c_aux_v_ArrVal_101 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_9| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_9| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_9| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_9| () Int)
(declare-fun c_aux_v_ArrVal_103 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_104 () Int)
(declare-fun c_aux_v_ArrVal_105 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_17 () Int)
(declare-fun c_aux_v_ArrVal_106 () Int)
(declare-fun c_aux_v_ArrVal_110 () Int)
(declare-fun c_aux_v_ArrVal_109 () Int)
(declare-fun c_aux_v_ArrVal_108 () Int)
(declare-fun c_aux_v_ArrVal_107 () Int)
(declare-fun c_aux_v_ArrVal_113 () Int)
(declare-fun c_aux_v_ArrVal_111 () Int)
(declare-fun c_aux_v_ArrVal_112 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_114 () (Array Int Int))
(declare-fun |c_aux_v_main_#t~mem15_5| () Int)
(declare-fun |c_aux_v_main_#t~mem16_4| () Int)
(declare-fun c_aux_v_ArrVal_115 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_18 () Int)
(declare-fun c_aux_v_ArrVal_118 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_117 () Int)
(declare-fun c_aux_v_ArrVal_116 () Int)
(declare-fun c_aux_v_ArrVal_121 () Int)
(declare-fun c_aux_v_ArrVal_120 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_122 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_119 () Int)
(declare-fun c_aux_v_ArrVal_124 () Int)
(declare-fun c_aux_v_ArrVal_123 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_10| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_10| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_10| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_10| () Int)
(declare-fun c_aux_v_ArrVal_125 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_19 () Int)
(declare-fun c_aux_v_ArrVal_126 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_128 () Int)
(declare-fun c_aux_v_ArrVal_127 () Int)
(declare-fun c_aux_v_ArrVal_132 () Int)
(declare-fun c_aux_v_ArrVal_131 () Int)
(declare-fun c_aux_v_ArrVal_130 () Int)
(declare-fun c_aux_v_ArrVal_129 () Int)
(declare-fun c_aux_v_ArrVal_133 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_136 () Int)
(declare-fun c_aux_v_ArrVal_135 () Int)
(declare-fun c_aux_v_mkdup_~x~0_20 () Int)
(declare-fun c_aux_v_ArrVal_134 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_137 () Int)
(declare-fun c_aux_v_ArrVal_138 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_11| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_11| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_11| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_11| () Int)
(declare-fun c_aux_v_ArrVal_139 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_141 () Int)
(declare-fun c_aux_v_ArrVal_140 () Int)
(declare-fun c_aux_v_ArrVal_142 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_21 () Int)
(declare-fun c_aux_v_ArrVal_146 () Int)
(declare-fun c_aux_v_ArrVal_145 () Int)
(declare-fun c_aux_v_ArrVal_144 () Int)
(declare-fun c_aux_v_ArrVal_143 () Int)
(declare-fun c_aux_v_ArrVal_147 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_148 () Int)
(declare-fun c_aux_v_ArrVal_150 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_22 () Int)
(declare-fun c_aux_v_ArrVal_149 () Int)
(declare-fun c_aux_v_ArrVal_152 () Int)
(declare-fun c_aux_v_ArrVal_151 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_12| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_12| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_12| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_12| () Int)
(declare-fun c_aux_v_ArrVal_153 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_156 () Int)
(declare-fun c_aux_v_ArrVal_155 () Int)
(declare-fun c_aux_v_ArrVal_154 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_23 () Int)
(declare-fun c_aux_v_ArrVal_159 () Int)
(declare-fun c_aux_v_ArrVal_158 () Int)
(declare-fun c_aux_v_ArrVal_157 () Int)
(declare-fun c_aux_v_ArrVal_160 () Int)
(declare-fun c_aux_v_ArrVal_162 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_163 () Int)
(declare-fun c_aux_v_ArrVal_164 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_161 () Int)
(declare-fun |c_aux_v_main_#t~mem15_6| () Int)
(declare-fun |c_aux_v_main_#t~mem16_5| () Int)
(declare-fun |c_aux_v_main_#t~mem18_4| () Int)
(declare-fun |c_aux_v_main_#t~mem19_4| () Int)
(declare-fun c_aux_v_ArrVal_165 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_168 () Int)
(declare-fun c_aux_v_ArrVal_166 () Int)
(declare-fun c_aux_v_ArrVal_167 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_24 () Int)
(declare-fun c_aux_v_ArrVal_169 () Int)
(declare-fun c_aux_v_ArrVal_170 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_172 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_171 () Int)
(declare-fun c_aux_v_ArrVal_174 () Int)
(declare-fun c_aux_v_ArrVal_173 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_13| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_13| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_13| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_13| () Int)
(declare-fun c_aux_v_ArrVal_175 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_178 () Int)
(declare-fun c_aux_v_ArrVal_176 () Int)
(declare-fun c_aux_v_ArrVal_177 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_25 () Int)
(declare-fun c_aux_v_ArrVal_179 () Int)
(declare-fun c_aux_v_ArrVal_182 () Int)
(declare-fun c_aux_v_ArrVal_181 () Int)
(declare-fun c_aux_v_ArrVal_180 () Int)
(declare-fun c_aux_v_ArrVal_184 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_185 () Int)
(declare-fun c_aux_v_ArrVal_186 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_183 () Int)
(declare-fun |c_aux_v_main_#t~mem15_7| () Int)
(declare-fun |c_aux_v_main_#t~mem16_6| () Int)
(declare-fun |c_aux_v_main_#t~mem18_5| () Int)
(declare-fun c_aux_v_ArrVal_187 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_26 () Int)
(declare-fun c_aux_v_ArrVal_188 () Int)
(declare-fun c_aux_v_ArrVal_189 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_190 () Int)
(declare-fun c_aux_v_ArrVal_192 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_194 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_193 () Int)
(declare-fun c_aux_v_ArrVal_191 () Int)
(declare-fun c_aux_v_ArrVal_196 () Int)
(declare-fun c_aux_v_ArrVal_195 () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#amountOfFieldsInParam_14| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#productInParam_14| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#ptr.offsetInParam_14| () Int)
(declare-fun |c_aux_v_#Ultimate.meminit_#sizeOfFieldsInParam_14| () Int)
(declare-fun c_aux_v_ArrVal_197 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_27 () Int)
(declare-fun c_aux_v_ArrVal_200 () Int)
(declare-fun c_aux_v_ArrVal_199 () Int)
(declare-fun c_aux_v_ArrVal_198 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_203 () Int)
(declare-fun c_aux_v_ArrVal_202 () Int)
(declare-fun c_aux_v_ArrVal_201 () Int)
(declare-fun c_aux_v_ArrVal_204 () Int)
(declare-fun c_aux_v_ArrVal_206 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_208 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_207 () Int)
(declare-fun c_aux_v_ArrVal_205 () Int)
(declare-fun |c_aux_v_main_#t~mem15_8| () Int)
(declare-fun c_aux_v_ArrVal_209 () (Array Int Int))
(declare-fun c_aux_v_mkdup_~x~0_28 () Int)
(declare-fun c_aux_v_ArrVal_211 () Int)
(declare-fun c_aux_v_ArrVal_210 () Int)
(declare-fun c_aux_v_ArrVal_212 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_216 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_213 () Int)
(declare-fun c_aux_v_ArrVal_214 () (Array Int Int))
(declare-fun c_aux_v_ArrVal_215 () Int)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#memory_int#2_-1| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_-1| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#3_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#0)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-1| () (Array Int Int))
(declare-fun |old(#length)_-1| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#1)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#3)_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |old(#valid)_3| () (Array Int Int))
(declare-fun |old(#length)_3| () (Array Int Int))
(declare-fun |old(#memory_int#2)_3| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#1)_3| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#3)_3| () (Array Int (Array Int Int)))
(declare-fun |#valid_3| () (Array Int Int))
(declare-fun |#length_3| () (Array Int Int))
(declare-fun |#memory_int#2_3| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_3| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#3_3| () (Array Int (Array Int Int)))
(declare-fun main_~n~0_4 () Int)
(declare-fun |main_#t~nondet12_4| () Int)
(declare-fun main_~n~0_5 () Int)
(declare-fun |assume_abort_if_not_#in~cond_5| () Int)
(declare-fun assume_abort_if_not_~cond_6 () Int)
(declare-fun assume_abort_if_not_~cond_7 () Int)
(declare-fun |#valid_10| () (Array Int Int))
(declare-fun |main_#t~malloc13.base_10| () Int)
(declare-fun |main_#t~malloc13.offset_10| () Int)
(declare-fun |#length_10| () (Array Int Int))
(declare-fun v_ArrVal_218_fresh_1 () Int)
(declare-fun v_ArrVal_217_fresh_1 () Int)
(declare-fun |old(#memory_int#2)_11| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#2_11| () (Array Int (Array Int Int)))
(declare-fun |main_#t~malloc13.base_11| () Int)
(declare-fun |main_#t~malloc13.offset_11| () Int)
(declare-fun main_~n~0_11 () Int)
(declare-fun |#Ultimate.meminit_#ptr.base_11| () Int)
(declare-fun |v_#Ultimate.meminit_#amountOfFieldsInParam_15_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#productInParam_15_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#ptr.offsetInParam_15_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#sizeOfFieldsInParam_15_fresh_1| () Int)
(declare-fun |#memory_int#2_12| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_219_fresh_1 () (Array Int Int))
(declare-fun main_~a~0.base_14 () Int)
(declare-fun |main_#t~malloc13.base_14| () Int)
(declare-fun |main_#t~malloc13.offset_14| () Int)
(declare-fun main_~a~0.offset_14 () Int)
(declare-fun |old(#memory_int#2)_15| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#2_15| () (Array Int (Array Int Int)))
(declare-fun |mkdup_#in~a.base_15| () Int)
(declare-fun |mkdup_#in~n_15| () Int)
(declare-fun main_~a~0.base_15 () Int)
(declare-fun |mkdup_#in~a.offset_15| () Int)
(declare-fun main_~n~0_15 () Int)
(declare-fun main_~a~0.offset_15 () Int)
(declare-fun mkdup_~n_16 () Int)
(declare-fun |mkdup_#t~nondet5_16| () Int)
(declare-fun |mkdup_#t~nondet6_16| () Int)
(declare-fun mkdup_~a.offset_16 () Int)
(declare-fun mkdup_~j~0_16 () Int)
(declare-fun mkdup_~a.base_16 () Int)
(declare-fun mkdup_~i~0_16 () Int)
(declare-fun mkdup_~n_17 () Int)
(declare-fun |assume_abort_if_not_#in~cond_17| () Int)
(declare-fun mkdup_~i~0_17 () Int)
(declare-fun assume_abort_if_not_~cond_18 () Int)
(declare-fun assume_abort_if_not_~cond_19 () Int)
(declare-fun mkdup_~n_22 () Int)
(declare-fun mkdup_~j~0_22 () Int)
(declare-fun |assume_abort_if_not_#in~cond_22| () Int)
(declare-fun assume_abort_if_not_~cond_23 () Int)
(declare-fun assume_abort_if_not_~cond_24 () Int)
(declare-fun mkdup_~j~0_27 () Int)
(declare-fun |assume_abort_if_not_#in~cond_27| () Int)
(declare-fun mkdup_~i~0_27 () Int)
(declare-fun assume_abort_if_not_~cond_28 () Int)
(declare-fun assume_abort_if_not_~cond_29 () Int)
(declare-fun mkdup_~a.offset_32 () Int)
(declare-fun |mkdup_#t~nondet7_32| () Int)
(declare-fun |#memory_int#2_32| () (Array Int (Array Int Int)))
(declare-fun mkdup_~j~0_32 () Int)
(declare-fun mkdup_~a.base_32 () Int)
(declare-fun mkdup_~i~0_32 () Int)
(declare-fun v_mkdup_~x~0_29_fresh_1 () Int)
(declare-fun v_ArrVal_221_fresh_1 () Int)
(declare-fun v_ArrVal_220_fresh_1 () Int)
(declare-fun v_ArrVal_222_fresh_1 () (Array Int Int))
(declare-fun |main_~#j~2.offset_34| () Int)
(declare-fun |main_~#i~2.offset_34| () Int)
(declare-fun |#valid_34| () (Array Int Int))
(declare-fun |main_~#j~2.base_34| () Int)
(declare-fun |#length_34| () (Array Int Int))
(declare-fun |main_~#i~2.base_34| () Int)
(declare-fun v_ArrVal_225_fresh_1 () Int)
(declare-fun v_ArrVal_224_fresh_1 () Int)
(declare-fun v_ArrVal_223_fresh_1 () Int)
(declare-fun v_ArrVal_226_fresh_1 () Int)
(declare-fun |old(#memory_int#1)_35| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#3)_35| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_35| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#3_35| () (Array Int (Array Int Int)))
(declare-fun |main_~#i~2.offset_35| () Int)
(declare-fun |finddup_#in~_i.offset_35| () Int)
(declare-fun main_~a~0.base_35 () Int)
(declare-fun |main_~#j~2.base_35| () Int)
(declare-fun |finddup_#in~a.offset_35| () Int)
(declare-fun |finddup_#in~_j.offset_35| () Int)
(declare-fun |finddup_#in~_i.base_35| () Int)
(declare-fun |finddup_#in~_j.base_35| () Int)
(declare-fun |main_~#j~2.offset_35| () Int)
(declare-fun |finddup_#in~a.base_35| () Int)
(declare-fun main_~n~0_35 () Int)
(declare-fun |main_~#i~2.base_35| () Int)
(declare-fun main_~a~0.offset_35 () Int)
(declare-fun |finddup_#in~n_35| () Int)
(declare-fun finddup_~n_36 () Int)
(declare-fun finddup_~a.base_36 () Int)
(declare-fun finddup_~_j.offset_36 () Int)
(declare-fun finddup_~_j.base_36 () Int)
(declare-fun finddup_~i~1_36 () Int)
(declare-fun finddup_~_i.base_36 () Int)
(declare-fun finddup_~j~1_36 () Int)
(declare-fun finddup_~a.offset_36 () Int)
(declare-fun finddup_~_i.offset_36 () Int)
(declare-fun finddup_~j~1_37 () Int)
(declare-fun |finddup_#t~mem9_38| () Int)
(declare-fun |finddup_#t~mem8_38| () Int)
(declare-fun |finddup_#t~post10_39| () Int)
(declare-fun finddup_~j~1_39 () Int)
(declare-fun |finddup_#t~mem9_39| () Int)
(declare-fun |finddup_#t~mem8_39| () Int)
(declare-fun |finddup_#t~mem9_40| () Int)
(declare-fun |finddup_#t~mem8_40| () Int)
(declare-fun |finddup_#t~post10_41| () Int)
(declare-fun finddup_~j~1_41 () Int)
(declare-fun |finddup_#t~mem9_41| () Int)
(declare-fun |finddup_#t~mem8_41| () Int)
(declare-fun finddup_~j~1_42 () Int)
(declare-fun |finddup_#t~post11_43| () Int)
(declare-fun finddup_~i~1_43 () Int)
(declare-fun finddup_~j~1_44 () Int)
(declare-fun |finddup_#t~mem9_45| () Int)
(declare-fun |finddup_#t~mem8_45| () Int)
(declare-fun finddup_~_j.offset_46 () Int)
(declare-fun finddup_~_j.base_46 () Int)
(declare-fun finddup_~i~1_46 () Int)
(declare-fun finddup_~_i.base_46 () Int)
(declare-fun finddup_~j~1_46 () Int)
(declare-fun finddup_~_i.offset_46 () Int)
(declare-fun |finddup_#res_46| () Int)
(declare-fun |finddup_#t~mem9_46| () Int)
(declare-fun |#memory_int#1_46| () (Array Int (Array Int Int)))
(declare-fun |finddup_#t~mem8_46| () Int)
(declare-fun |#memory_int#3_46| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_228_fresh_1 () (Array Int Int))
(declare-fun v_ArrVal_230_fresh_1 () (Array Int Int))
(declare-fun v_ArrVal_229_fresh_1 () Int)
(declare-fun v_ArrVal_227_fresh_1 () Int)
(declare-fun |main_#t~ret14_48| () Int)
(declare-fun |finddup_#res_48| () Int)
(declare-fun |main_#t~ret14_49| () Int)
(declare-fun main_~r~0_49 () Int)
(declare-fun |__VERIFIER_assert_#in~cond_50| () Int)
(declare-fun main_~r~0_50 () Int)
(declare-fun __VERIFIER_assert_~cond_51 () Int)
(declare-fun __VERIFIER_assert_~cond_52 () Int)
(declare-fun |main_#t~short17_55| () Bool)
(declare-fun |v_main_#t~mem15_9_fresh_1| () Int)
(declare-fun |main_#t~short17_56| () Bool)
(declare-fun |v_main_#t~mem16_7_fresh_1| () Int)
(declare-fun |__VERIFIER_assert_#in~cond_57| () Int)
(declare-fun |main_#t~short17_57| () Bool)
(declare-fun __VERIFIER_assert_~cond_58 () Int)
(declare-fun __VERIFIER_assert_~cond_59 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! true :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! true :named ssa_0_OldVarAssigCall))
(assert (! (and (= (select |#length_-1| 1) 2) (= (select |#valid_-1| 2) 1) (< 0 |#StackHeapBarrier_-1|) (= (select |#length_-1| 2) 10) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 3) 12) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! (and (= |old(#valid)_3| |#valid_3|) (= |old(#memory_int#3)_3| |#memory_int#3_3|) (= |old(#memory_int#2)_3| |#memory_int#2_3|) (= |#length_3| |old(#length)_3|) (= |old(#memory_int#1)_3| |#memory_int#1_3|)) :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! (and (= |old(#length)_3| |#length_-1|) (= |#valid_-1| |old(#valid)_3|) (= |old(#memory_int#2)_3| |#memory_int#2_-1|) (= |old(#memory_int#3)_3| |#memory_int#3_-1|) (= |old(#memory_int#1)_3| |#memory_int#1_-1|)) :named ssa_3_OldVarAssigCall))
(assert (! (and (<= main_~n~0_4 2147483647) (<= 0 (+ main_~n~0_4 2147483648))) :named ssa_4))
(assert (! true :named ssa_5_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_5| (ite (and (<= 0 main_~n~0_4) (< main_~n~0_4 1073741824)) 1 0)) :named ssa_5_LocVarAssigCall))
(assert (! true :named ssa_5_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_5| assume_abort_if_not_~cond_6) :named ssa_6))
(assert (! (not (= assume_abort_if_not_~cond_6 0)) :named ssa_7))
(assert (! true :named ssa_8))
(assert (! true :named ssa_9_return))
(assert (! (and (not (= 0 |main_#t~malloc13.base_10|)) (< |main_#t~malloc13.base_10| |#StackHeapBarrier_-1|) (= |main_#t~malloc13.offset_10| 0) (= (select |#valid_3| |main_#t~malloc13.base_10|) 0) (= v_ArrVal_218_fresh_1 1) (= v_ArrVal_217_fresh_1 (* 4 (mod main_~n~0_4 1073741824))) (= |#valid_10| (store |#valid_3| |main_#t~malloc13.base_10| v_ArrVal_218_fresh_1)) (= (store |#length_3| |main_#t~malloc13.base_10| v_ArrVal_217_fresh_1) |#length_10|)) :named ssa_10))
(assert (! (= |old(#memory_int#2)_11| |#memory_int#2_11|) :named ssa_11_GlobVarAssigCall))
(assert (! (and (= main_~n~0_4 |v_#Ultimate.meminit_#amountOfFieldsInParam_15_fresh_1|) (= |v_#Ultimate.meminit_#productInParam_15_fresh_1| (* main_~n~0_4 4)) (= |v_#Ultimate.meminit_#ptr.offsetInParam_15_fresh_1| |main_#t~malloc13.offset_10|) (= |v_#Ultimate.meminit_#sizeOfFieldsInParam_15_fresh_1| 4) (= |#Ultimate.meminit_#ptr.base_11| |main_#t~malloc13.base_10|)) :named ssa_11_LocVarAssigCall))
(assert (! (= |old(#memory_int#2)_11| |#memory_int#2_3|) :named ssa_11_OldVarAssigCall))
(assert (! (and (= (store |#memory_int#2_11| |#Ultimate.meminit_#ptr.base_11| v_ArrVal_219_fresh_1) |#memory_int#2_12|) (= ((as const (Array Int Int)) 0) v_ArrVal_219_fresh_1)) :named ssa_12))
(assert (! true :named ssa_13_return))
(assert (! (and (= main_~a~0.offset_14 |main_#t~malloc13.offset_10|) (= main_~a~0.base_14 |main_#t~malloc13.base_10|)) :named ssa_14))
(assert (! (= |old(#memory_int#2)_15| |#memory_int#2_15|) :named ssa_15_GlobVarAssigCall))
(assert (! (and (= main_~n~0_4 |mkdup_#in~n_15|) (= main_~a~0.base_14 |mkdup_#in~a.base_15|) (= |mkdup_#in~a.offset_15| main_~a~0.offset_14)) :named ssa_15_LocVarAssigCall))
(assert (! (= |old(#memory_int#2)_15| |#memory_int#2_12|) :named ssa_15_OldVarAssigCall))
(assert (! (and (<= 0 (+ mkdup_~j~0_16 2147483648)) (<= mkdup_~j~0_16 2147483647) (= mkdup_~a.offset_16 |mkdup_#in~a.offset_15|) (= mkdup_~a.base_16 |mkdup_#in~a.base_15|) (<= 0 (+ mkdup_~i~0_16 2147483648)) (<= mkdup_~i~0_16 2147483647) (= |mkdup_#in~n_15| mkdup_~n_16)) :named ssa_16))
(assert (! true :named ssa_17_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_17| (ite (and (<= 0 mkdup_~i~0_16) (< mkdup_~i~0_16 mkdup_~n_16)) 1 0)) :named ssa_17_LocVarAssigCall))
(assert (! true :named ssa_17_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_17| assume_abort_if_not_~cond_18) :named ssa_18))
(assert (! (not (= assume_abort_if_not_~cond_18 0)) :named ssa_19))
(assert (! true :named ssa_20))
(assert (! true :named ssa_21_return))
(assert (! true :named ssa_22_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_22| (ite (and (<= 0 mkdup_~j~0_16) (< mkdup_~j~0_16 mkdup_~n_16)) 1 0)) :named ssa_22_LocVarAssigCall))
(assert (! true :named ssa_22_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_22| assume_abort_if_not_~cond_23) :named ssa_23))
(assert (! (not (= assume_abort_if_not_~cond_23 0)) :named ssa_24))
(assert (! true :named ssa_25))
(assert (! true :named ssa_26_return))
(assert (! true :named ssa_27_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_27| (ite (not (= mkdup_~i~0_16 mkdup_~j~0_16)) 1 0)) :named ssa_27_LocVarAssigCall))
(assert (! true :named ssa_27_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_27| assume_abort_if_not_~cond_28) :named ssa_28))
(assert (! (not (= assume_abort_if_not_~cond_28 0)) :named ssa_29))
(assert (! true :named ssa_30))
(assert (! true :named ssa_31_return))
(assert (! (and (= |#memory_int#2_32| (store |#memory_int#2_15| mkdup_~a.base_16 v_ArrVal_222_fresh_1)) (= v_ArrVal_222_fresh_1 (store (store (select |#memory_int#2_15| mkdup_~a.base_16) (+ (* mkdup_~i~0_16 4) mkdup_~a.offset_16) v_ArrVal_221_fresh_1) (+ mkdup_~a.offset_16 (* mkdup_~j~0_16 4)) v_ArrVal_220_fresh_1)) (<= 0 (+ v_mkdup_~x~0_29_fresh_1 2147483648)) (= v_ArrVal_220_fresh_1 v_mkdup_~x~0_29_fresh_1) (= v_ArrVal_221_fresh_1 v_mkdup_~x~0_29_fresh_1) (<= v_mkdup_~x~0_29_fresh_1 2147483647)) :named ssa_32))
(assert (! true :named ssa_33_return))
(assert (! (and (= |main_~#i~2.offset_34| 0) (= v_ArrVal_226_fresh_1 1) (= (select |#valid_10| |main_~#i~2.base_34|) 0) (= v_ArrVal_224_fresh_1 1) (= |main_~#j~2.offset_34| 0) (not (= |main_~#j~2.base_34| 0)) (< |#StackHeapBarrier_-1| |main_~#j~2.base_34|) (= |#valid_34| (store (store |#valid_10| |main_~#i~2.base_34| v_ArrVal_224_fresh_1) |main_~#j~2.base_34| v_ArrVal_226_fresh_1)) (not (= |main_~#i~2.base_34| 0)) (= v_ArrVal_223_fresh_1 4) (= (select (store |#valid_10| |main_~#i~2.base_34| v_ArrVal_224_fresh_1) |main_~#j~2.base_34|) 0) (< |#StackHeapBarrier_-1| |main_~#i~2.base_34|) (= v_ArrVal_225_fresh_1 4) (= |#length_34| (store (store |#length_10| |main_~#i~2.base_34| v_ArrVal_223_fresh_1) |main_~#j~2.base_34| v_ArrVal_225_fresh_1))) :named ssa_34))
(assert (! (and (= |old(#memory_int#3)_35| |#memory_int#3_35|) (= |old(#memory_int#1)_35| |#memory_int#1_35|)) :named ssa_35_GlobVarAssigCall))
(assert (! (and (= |main_~#i~2.base_34| |finddup_#in~_i.base_35|) (= |main_~#i~2.offset_34| |finddup_#in~_i.offset_35|) (= |finddup_#in~a.offset_35| main_~a~0.offset_14) (= |finddup_#in~a.base_35| main_~a~0.base_14) (= |finddup_#in~_j.base_35| |main_~#j~2.base_34|) (= main_~n~0_4 |finddup_#in~n_35|) (= |main_~#j~2.offset_34| |finddup_#in~_j.offset_35|)) :named ssa_35_LocVarAssigCall))
(assert (! (and (= |old(#memory_int#3)_35| |#memory_int#3_3|) (= |old(#memory_int#1)_35| |#memory_int#1_3|)) :named ssa_35_OldVarAssigCall))
(assert (! (and (= finddup_~a.base_36 |finddup_#in~a.base_35|) (= finddup_~_j.base_36 |finddup_#in~_j.base_35|) (= |finddup_#in~n_35| finddup_~n_36) (= |finddup_#in~_j.offset_35| finddup_~_j.offset_36) (= finddup_~i~1_36 0) (= finddup_~a.offset_36 |finddup_#in~a.offset_35|) (= finddup_~_i.offset_36 |finddup_#in~_i.offset_35|) (= |finddup_#in~_i.base_35| finddup_~_i.base_36)) :named ssa_36))
(assert (! (and (< finddup_~i~1_36 finddup_~n_36) (= finddup_~j~1_37 (+ finddup_~i~1_36 1))) :named ssa_37))
(assert (! (and (< finddup_~j~1_37 finddup_~n_36) (= |finddup_#t~mem9_38| (select (select |#memory_int#2_32| finddup_~a.base_36) (+ (* finddup_~j~1_37 4) finddup_~a.offset_36))) (= |finddup_#t~mem8_38| (select (select |#memory_int#2_32| finddup_~a.base_36) (+ finddup_~a.offset_36 (* finddup_~i~1_36 4))))) :named ssa_38))
(assert (! (and (not (= |finddup_#t~mem8_38| |finddup_#t~mem9_38|)) (= finddup_~j~1_39 (+ finddup_~j~1_37 1))) :named ssa_39))
(assert (! (and (< finddup_~j~1_39 finddup_~n_36) (= |finddup_#t~mem9_40| (select (select |#memory_int#2_32| finddup_~a.base_36) (+ (* finddup_~j~1_39 4) finddup_~a.offset_36))) (= |finddup_#t~mem8_40| (select (select |#memory_int#2_32| finddup_~a.base_36) (+ finddup_~a.offset_36 (* finddup_~i~1_36 4))))) :named ssa_40))
(assert (! (and (not (= |finddup_#t~mem8_40| |finddup_#t~mem9_40|)) (= finddup_~j~1_41 (+ finddup_~j~1_39 1))) :named ssa_41))
(assert (! (<= finddup_~n_36 finddup_~j~1_41) :named ssa_42))
(assert (! (= finddup_~i~1_43 (+ finddup_~i~1_36 1)) :named ssa_43))
(assert (! (and (< finddup_~i~1_43 finddup_~n_36) (= finddup_~j~1_44 (+ finddup_~i~1_43 1))) :named ssa_44))
(assert (! (and (< finddup_~j~1_44 finddup_~n_36) (= |finddup_#t~mem9_45| (select (select |#memory_int#2_32| finddup_~a.base_36) (+ (* finddup_~j~1_44 4) finddup_~a.offset_36))) (= |finddup_#t~mem8_45| (select (select |#memory_int#2_32| finddup_~a.base_36) (+ finddup_~a.offset_36 (* finddup_~i~1_43 4))))) :named ssa_45))
(assert (! (and (= (store |#memory_int#3_35| finddup_~_j.base_36 v_ArrVal_228_fresh_1) |#memory_int#3_46|) (= v_ArrVal_227_fresh_1 finddup_~i~1_43) (= v_ArrVal_228_fresh_1 (store (select |#memory_int#3_35| finddup_~_j.base_36) finddup_~_j.offset_36 finddup_~j~1_44)) (= v_ArrVal_230_fresh_1 (store (select |#memory_int#1_35| finddup_~_i.base_36) finddup_~_i.offset_36 v_ArrVal_227_fresh_1)) (= (store |#memory_int#1_35| finddup_~_i.base_36 v_ArrVal_230_fresh_1) |#memory_int#1_46|) (= |finddup_#res_46| 1) (= |finddup_#t~mem8_45| |finddup_#t~mem9_45|) (= v_ArrVal_229_fresh_1 finddup_~j~1_44)) :named ssa_46))
(assert (! true :named ssa_47))
(assert (! (= |main_#t~ret14_48| |finddup_#res_46|) :named ssa_48_return))
(assert (! (and (= main_~r~0_49 |main_#t~ret14_48|) (<= |main_#t~ret14_48| 2147483647) (<= 0 (+ |main_#t~ret14_48| 2147483648))) :named ssa_49))
(assert (! true :named ssa_50_GlobVarAssigCall))
(assert (! (= main_~r~0_49 |__VERIFIER_assert_#in~cond_50|) :named ssa_50_LocVarAssigCall))
(assert (! true :named ssa_50_OldVarAssigCall))
(assert (! (= __VERIFIER_assert_~cond_51 |__VERIFIER_assert_#in~cond_50|) :named ssa_51))
(assert (! (not (= __VERIFIER_assert_~cond_51 0)) :named ssa_52))
(assert (! true :named ssa_53))
(assert (! true :named ssa_54_return))
(assert (! (and (or (and (<= 0 |v_main_#t~mem15_9_fresh_1|) |main_#t~short17_55|) (and (< |v_main_#t~mem15_9_fresh_1| 0) (not |main_#t~short17_55|))) (= (select (select |#memory_int#1_46| |main_~#i~2.base_34|) |main_~#i~2.offset_34|) |v_main_#t~mem15_9_fresh_1|)) :named ssa_55))
(assert (! (and (= (select (select |#memory_int#1_46| |main_~#i~2.base_34|) |main_~#i~2.offset_34|) |v_main_#t~mem16_7_fresh_1|) |main_#t~short17_55| (or (and (< |v_main_#t~mem16_7_fresh_1| main_~n~0_4) |main_#t~short17_56|) (and (not |main_#t~short17_56|) (<= main_~n~0_4 |v_main_#t~mem16_7_fresh_1|)))) :named ssa_56))
(assert (! true :named ssa_57_GlobVarAssigCall))
(assert (! (= |__VERIFIER_assert_#in~cond_57| (ite |main_#t~short17_56| 1 0)) :named ssa_57_LocVarAssigCall))
(assert (! true :named ssa_57_OldVarAssigCall))
(assert (! (= __VERIFIER_assert_~cond_58 |__VERIFIER_assert_#in~cond_57|) :named ssa_58))
(assert (! (= __VERIFIER_assert_~cond_58 0) :named ssa_59))
(assert (! true :named ssa_60))
(check-sat)
(get-interpolants (and ssa_0_LocVarAssigCall ssa_precond ssa_0_GlobVarAssigCall ssa_0_OldVarAssigCall ssa_2_return ssa_1) (and ssa_3_OldVarAssigCall ssa_3_LocVarAssigCall ssa_3_GlobVarAssigCall) ssa_4 (and ssa_5_LocVarAssigCall ssa_5_GlobVarAssigCall ssa_7 ssa_6 ssa_8 ssa_5_OldVarAssigCall ssa_9_return) ssa_10 (and ssa_11_LocVarAssigCall ssa_13_return ssa_12 ssa_11_OldVarAssigCall ssa_11_GlobVarAssigCall) ssa_14 (and ssa_20 ssa_17_LocVarAssigCall ssa_22_OldVarAssigCall ssa_16 ssa_15_LocVarAssigCall ssa_17_GlobVarAssigCall ssa_25 ssa_15_GlobVarAssigCall ssa_31_return ssa_22_LocVarAssigCall ssa_26_return ssa_22_GlobVarAssigCall ssa_19 ssa_27_GlobVarAssigCall ssa_17_OldVarAssigCall ssa_32 ssa_27_OldVarAssigCall ssa_28 ssa_29 ssa_33_return ssa_18 ssa_23 ssa_21_return ssa_30 ssa_27_LocVarAssigCall ssa_15_OldVarAssigCall ssa_24) ssa_34 (and ssa_35_LocVarAssigCall ssa_44 ssa_40 ssa_45 ssa_46 ssa_35_GlobVarAssigCall ssa_47 ssa_39 ssa_43 ssa_37 ssa_38 ssa_48_return ssa_36 ssa_35_OldVarAssigCall ssa_41 ssa_42) ssa_49 (and ssa_50_GlobVarAssigCall ssa_53 ssa_50_OldVarAssigCall ssa_54_return ssa_50_LocVarAssigCall ssa_51 ssa_52) ssa_55 ssa_56 (and ssa_57_OldVarAssigCall ssa_57_LocVarAssigCall ssa_57_GlobVarAssigCall) ssa_58 ssa_59 (and ssa_60 ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-2| () (Array Int (Array Int Int)))
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#3_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#0)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#3)_-2| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (= (select |#length_-2| 1) 2) (= (select |#valid_-2| 2) 1) (< 0 |#StackHeapBarrier_-1|) (= (select |#length_-2| 2) 10) (= (select |#valid_-2| 3) 1) (= (select |#valid_-2| 1) 1) (= (select (select |#memory_int#0_-2| 1) 1) 0) (= (select |#length_-2| 3) 12) (= (select (select |#memory_int#0_-2| 1) 0) 48) (= (select |#valid_-2| 0) 0)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! true :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#3_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#3)_-2| () (Array Int (Array Int Int)))
(declare-fun main_~n~0_-2 () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |assume_abort_if_not_#in~cond_-1| (ite (and (<= 0 main_~n~0_-2) (< main_~n~0_-2 1073741824)) 1 0)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#3_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#3)_-2| () (Array Int (Array Int Int)))
(declare-fun |main_#t~malloc13.base_-2| () Int)
(declare-fun |main_#t~malloc13.offset_-2| () Int)
(declare-fun main_~n~0_-2 () Int)
(declare-fun |old(#memory_int#2)_-1| () (Array Int (Array Int Int)))
(declare-fun |main_#t~malloc13.base_-1| () Int)
(declare-fun |main_#t~malloc13.offset_-1| () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun |#Ultimate.meminit_#ptr.base_-1| () Int)
(declare-fun |v_#Ultimate.meminit_#productInParam_2_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#ptr.offsetInParam_2_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#sizeOfFieldsInParam_2_fresh_1| () Int)
(declare-fun |v_#Ultimate.meminit_#amountOfFieldsInParam_2_fresh_1| () Int)
(declare-fun |#memory_int#2_-1| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#2_0| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_231_fresh_1 () (Array Int Int))
(assert (! (= |#memory_int#2_-1| |old(#memory_int#2)_-1|) :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (= (store |#memory_int#2_-1| |#Ultimate.meminit_#ptr.base_-1| v_ArrVal_231_fresh_1) |#memory_int#2_0|) (= ((as const (Array Int Int)) 0) v_ArrVal_231_fresh_1)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (and (= |v_#Ultimate.meminit_#ptr.offsetInParam_2_fresh_1| |main_#t~malloc13.offset_-2|) (= |v_#Ultimate.meminit_#productInParam_2_fresh_1| (* main_~n~0_-2 4)) (= |v_#Ultimate.meminit_#sizeOfFieldsInParam_2_fresh_1| 4) (= main_~n~0_-2 |v_#Ultimate.meminit_#amountOfFieldsInParam_2_fresh_1|) (= |#Ultimate.meminit_#ptr.base_-1| |main_#t~malloc13.base_-2|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! (= |old(#memory_int#2)_-1| |#memory_int#2_-2|) :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#3_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#3)_-2| () (Array Int (Array Int Int)))
(declare-fun main_~a~0.base_-2 () Int)
(declare-fun main_~n~0_-2 () Int)
(declare-fun main_~a~0.offset_-2 () Int)
(declare-fun |old(#memory_int#2)_-1| () (Array Int (Array Int Int)))
(declare-fun |mkdup_#in~a.base_-1| () Int)
(declare-fun |mkdup_#in~n_-1| () Int)
(declare-fun main_~a~0.base_-1 () Int)
(declare-fun |mkdup_#in~a.offset_-1| () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun main_~a~0.offset_-1 () Int)
(declare-fun |#memory_int#2_-1| () (Array Int (Array Int Int)))
(declare-fun mkdup_~n_0 () Int)
(declare-fun |mkdup_#t~nondet5_0| () Int)
(declare-fun |mkdup_#t~nondet6_0| () Int)
(declare-fun mkdup_~a.offset_0 () Int)
(declare-fun mkdup_~j~0_0 () Int)
(declare-fun mkdup_~a.base_0 () Int)
(declare-fun mkdup_~i~0_0 () Int)
(declare-fun mkdup_~n_1 () Int)
(declare-fun |assume_abort_if_not_#in~cond_1| () Int)
(declare-fun mkdup_~i~0_1 () Int)
(declare-fun assume_abort_if_not_~cond_2 () Int)
(declare-fun assume_abort_if_not_~cond_3 () Int)
(declare-fun mkdup_~n_6 () Int)
(declare-fun mkdup_~j~0_6 () Int)
(declare-fun |assume_abort_if_not_#in~cond_6| () Int)
(declare-fun assume_abort_if_not_~cond_7 () Int)
(declare-fun assume_abort_if_not_~cond_8 () Int)
(declare-fun mkdup_~j~0_11 () Int)
(declare-fun |assume_abort_if_not_#in~cond_11| () Int)
(declare-fun mkdup_~i~0_11 () Int)
(declare-fun assume_abort_if_not_~cond_12 () Int)
(declare-fun assume_abort_if_not_~cond_13 () Int)
(declare-fun mkdup_~a.offset_16 () Int)
(declare-fun |mkdup_#t~nondet7_16| () Int)
(declare-fun |#memory_int#2_16| () (Array Int (Array Int Int)))
(declare-fun mkdup_~j~0_16 () Int)
(declare-fun mkdup_~a.base_16 () Int)
(declare-fun mkdup_~i~0_16 () Int)
(declare-fun v_ArrVal_234_fresh_1 () Int)
(declare-fun v_ArrVal_233_fresh_1 () Int)
(declare-fun v_mkdup_~x~0_30_fresh_1 () Int)
(declare-fun v_ArrVal_232_fresh_1 () (Array Int Int))
(assert (! (= |#memory_int#2_-1| |old(#memory_int#2)_-1|) :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (<= 0 (+ mkdup_~j~0_0 2147483648)) (<= mkdup_~j~0_0 2147483647) (= mkdup_~a.offset_0 |mkdup_#in~a.offset_-1|) (= mkdup_~a.base_0 |mkdup_#in~a.base_-1|) (<= 0 (+ mkdup_~i~0_0 2147483648)) (<= mkdup_~i~0_0 2147483647) (= |mkdup_#in~n_-1| mkdup_~n_0)) :named ssa_0))
(assert (! true :named ssa_1_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_1| (ite (and (<= 0 mkdup_~i~0_0) (< mkdup_~i~0_0 mkdup_~n_0)) 1 0)) :named ssa_1_LocVarAssigCall))
(assert (! true :named ssa_1_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_1| assume_abort_if_not_~cond_2) :named ssa_2))
(assert (! (not (= assume_abort_if_not_~cond_2 0)) :named ssa_3))
(assert (! true :named ssa_4))
(assert (! true :named ssa_5_return))
(assert (! true :named ssa_6_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_6| (ite (and (<= 0 mkdup_~j~0_0) (< mkdup_~j~0_0 mkdup_~n_0)) 1 0)) :named ssa_6_LocVarAssigCall))
(assert (! true :named ssa_6_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_6| assume_abort_if_not_~cond_7) :named ssa_7))
(assert (! (not (= assume_abort_if_not_~cond_7 0)) :named ssa_8))
(assert (! true :named ssa_9))
(assert (! true :named ssa_10_return))
(assert (! true :named ssa_11_GlobVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_11| (ite (not (= mkdup_~i~0_0 mkdup_~j~0_0)) 1 0)) :named ssa_11_LocVarAssigCall))
(assert (! true :named ssa_11_OldVarAssigCall))
(assert (! (= |assume_abort_if_not_#in~cond_11| assume_abort_if_not_~cond_12) :named ssa_12))
(assert (! (not (= assume_abort_if_not_~cond_12 0)) :named ssa_13))
(assert (! true :named ssa_14))
(assert (! true :named ssa_15_return))
(assert (! (and (= v_ArrVal_234_fresh_1 v_mkdup_~x~0_30_fresh_1) (<= v_mkdup_~x~0_30_fresh_1 2147483647) (= v_ArrVal_233_fresh_1 v_mkdup_~x~0_30_fresh_1) (= (store |#memory_int#2_-1| mkdup_~a.base_0 v_ArrVal_232_fresh_1) |#memory_int#2_16|) (= v_ArrVal_232_fresh_1 (store (store (select |#memory_int#2_-1| mkdup_~a.base_0) (+ (* mkdup_~i~0_0 4) mkdup_~a.offset_0) v_mkdup_~x~0_30_fresh_1) (+ mkdup_~a.offset_0 (* mkdup_~j~0_0 4)) v_mkdup_~x~0_30_fresh_1)) (<= 0 (+ v_mkdup_~x~0_30_fresh_1 2147483648))) :named ssa_16))
(assert (! true :named ssa_17_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (and (= main_~n~0_-2 |mkdup_#in~n_-1|) (= main_~a~0.base_-2 |mkdup_#in~a.base_-1|) (= |mkdup_#in~a.offset_-1| main_~a~0.offset_-2)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! (= |old(#memory_int#2)_-1| |#memory_int#2_-2|) :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_1_GlobVarAssigCall ssa_5_return ssa_3 ssa_1_OldVarAssigCall ssa_4 ssa_1_LocVarAssigCall ssa_2) (and ssa_7 ssa_10_return ssa_8 ssa_9 ssa_6_OldVarAssigCall ssa_6_GlobVarAssigCall ssa_6_LocVarAssigCall) (and ssa_13 ssa_11_LocVarAssigCall ssa_14 ssa_12 ssa_11_OldVarAssigCall ssa_11_GlobVarAssigCall ssa_15_return) ssa_16 (and ssa_-2_PendingContext ssa_17_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun mkdup_~n_-2 () Int)
(declare-fun mkdup_~i~0_-2 () Int)
(declare-fun mkdup_~n_-1 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun mkdup_~i~0_-1 () Int)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |assume_abort_if_not_#in~cond_-1| (ite (and (<= 0 mkdup_~i~0_-2) (< mkdup_~i~0_-2 mkdup_~n_-2)) 1 0)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun mkdup_~n_-2 () Int)
(declare-fun mkdup_~j~0_-2 () Int)
(declare-fun mkdup_~n_-1 () Int)
(declare-fun mkdup_~j~0_-1 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |assume_abort_if_not_#in~cond_-1| (ite (and (<= 0 mkdup_~j~0_-2) (< mkdup_~j~0_-2 mkdup_~n_-2)) 1 0)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun mkdup_~j~0_-2 () Int)
(declare-fun mkdup_~i~0_-2 () Int)
(declare-fun mkdup_~j~0_-1 () Int)
(declare-fun |assume_abort_if_not_#in~cond_-1| () Int)
(declare-fun mkdup_~i~0_-1 () Int)
(declare-fun assume_abort_if_not_~cond_0 () Int)
(declare-fun assume_abort_if_not_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (= |assume_abort_if_not_#in~cond_-1| assume_abort_if_not_~cond_0) :named ssa_0))
(assert (! (not (= assume_abort_if_not_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (= |assume_abort_if_not_#in~cond_-1| (ite (not (= mkdup_~i~0_-2 mkdup_~j~0_-2)) 1 0)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#3_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#3)_-2| () (Array Int (Array Int Int)))
(declare-fun |main_~#j~2.offset_-2| () Int)
(declare-fun |main_~#i~2.offset_-2| () Int)
(declare-fun main_~a~0.base_-2 () Int)
(declare-fun |main_~#j~2.base_-2| () Int)
(declare-fun main_~n~0_-2 () Int)
(declare-fun |main_~#i~2.base_-2| () Int)
(declare-fun main_~a~0.offset_-2 () Int)
(declare-fun |old(#memory_int#1)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#3)_-1| () (Array Int (Array Int Int)))
(declare-fun |main_~#i~2.offset_-1| () Int)
(declare-fun |finddup_#in~_i.offset_-1| () Int)
(declare-fun main_~a~0.base_-1 () Int)
(declare-fun |main_~#j~2.base_-1| () Int)
(declare-fun |finddup_#in~a.offset_-1| () Int)
(declare-fun |finddup_#in~_j.offset_-1| () Int)
(declare-fun |finddup_#in~_i.base_-1| () Int)
(declare-fun |finddup_#in~_j.base_-1| () Int)
(declare-fun |main_~#j~2.offset_-1| () Int)
(declare-fun |finddup_#in~a.base_-1| () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun |main_~#i~2.base_-1| () Int)
(declare-fun main_~a~0.offset_-1 () Int)
(declare-fun |finddup_#in~n_-1| () Int)
(declare-fun |#memory_int#1_-1| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#3_-1| () (Array Int (Array Int Int)))
(declare-fun finddup_~n_0 () Int)
(declare-fun finddup_~a.base_0 () Int)
(declare-fun finddup_~_j.offset_0 () Int)
(declare-fun finddup_~_j.base_0 () Int)
(declare-fun finddup_~i~1_0 () Int)
(declare-fun finddup_~_i.base_0 () Int)
(declare-fun finddup_~j~1_0 () Int)
(declare-fun finddup_~a.offset_0 () Int)
(declare-fun finddup_~_i.offset_0 () Int)
(declare-fun finddup_~j~1_1 () Int)
(declare-fun |finddup_#t~mem9_2| () Int)
(declare-fun |finddup_#t~mem8_2| () Int)
(declare-fun |finddup_#t~post10_3| () Int)
(declare-fun finddup_~j~1_3 () Int)
(declare-fun |finddup_#t~mem9_3| () Int)
(declare-fun |finddup_#t~mem8_3| () Int)
(declare-fun |finddup_#t~mem9_4| () Int)
(declare-fun |finddup_#t~mem8_4| () Int)
(declare-fun |finddup_#t~post10_5| () Int)
(declare-fun finddup_~j~1_5 () Int)
(declare-fun |finddup_#t~mem9_5| () Int)
(declare-fun |finddup_#t~mem8_5| () Int)
(declare-fun finddup_~j~1_6 () Int)
(declare-fun |finddup_#t~post11_7| () Int)
(declare-fun finddup_~i~1_7 () Int)
(declare-fun finddup_~j~1_8 () Int)
(declare-fun |finddup_#t~mem9_9| () Int)
(declare-fun |finddup_#t~mem8_9| () Int)
(declare-fun finddup_~_j.offset_10 () Int)
(declare-fun finddup_~_j.base_10 () Int)
(declare-fun finddup_~i~1_10 () Int)
(declare-fun finddup_~_i.base_10 () Int)
(declare-fun finddup_~j~1_10 () Int)
(declare-fun finddup_~_i.offset_10 () Int)
(declare-fun |finddup_#res_10| () Int)
(declare-fun |finddup_#t~mem9_10| () Int)
(declare-fun |#memory_int#1_10| () (Array Int (Array Int Int)))
(declare-fun |finddup_#t~mem8_10| () Int)
(declare-fun |#memory_int#3_10| () (Array Int (Array Int Int)))
(declare-fun v_ArrVal_238_fresh_1 () (Array Int Int))
(declare-fun v_ArrVal_235_fresh_1 () Int)
(declare-fun v_ArrVal_236_fresh_1 () (Array Int Int))
(declare-fun v_ArrVal_237_fresh_1 () Int)
(declare-fun |main_#t~ret14_12| () Int)
(declare-fun |finddup_#res_12| () Int)
(assert (! (and (= |#memory_int#1_-1| |old(#memory_int#1)_-1|) (= |#memory_int#3_-1| |old(#memory_int#3)_-1|)) :named ssa_precond))
(assert (! (not (<= (+ 2 (select (select |#memory_int#1_10| |main_~#i~2.base_-2|) |main_~#i~2.offset_-2|)) main_~n~0_-2)) :named ssa_postcond))
(assert (! (and (= finddup_~a.base_0 |finddup_#in~a.base_-1|) (= finddup_~_j.base_0 |finddup_#in~_j.base_-1|) (= |finddup_#in~n_-1| finddup_~n_0) (= |finddup_#in~_j.offset_-1| finddup_~_j.offset_0) (= finddup_~i~1_0 0) (= finddup_~a.offset_0 |finddup_#in~a.offset_-1|) (= finddup_~_i.offset_0 |finddup_#in~_i.offset_-1|) (= |finddup_#in~_i.base_-1| finddup_~_i.base_0)) :named ssa_0))
(assert (! (and (< finddup_~i~1_0 finddup_~n_0) (= finddup_~j~1_1 (+ finddup_~i~1_0 1))) :named ssa_1))
(assert (! (and (< finddup_~j~1_1 finddup_~n_0) (= |finddup_#t~mem9_2| (select (select |#memory_int#2_-2| finddup_~a.base_0) (+ (* finddup_~j~1_1 4) finddup_~a.offset_0))) (= |finddup_#t~mem8_2| (select (select |#memory_int#2_-2| finddup_~a.base_0) (+ finddup_~a.offset_0 (* finddup_~i~1_0 4))))) :named ssa_2))
(assert (! (and (not (= |finddup_#t~mem8_2| |finddup_#t~mem9_2|)) (= finddup_~j~1_3 (+ finddup_~j~1_1 1))) :named ssa_3))
(assert (! (and (< finddup_~j~1_3 finddup_~n_0) (= |finddup_#t~mem9_4| (select (select |#memory_int#2_-2| finddup_~a.base_0) (+ (* finddup_~j~1_3 4) finddup_~a.offset_0))) (= |finddup_#t~mem8_4| (select (select |#memory_int#2_-2| finddup_~a.base_0) (+ finddup_~a.offset_0 (* finddup_~i~1_0 4))))) :named ssa_4))
(assert (! (and (not (= |finddup_#t~mem8_4| |finddup_#t~mem9_4|)) (= finddup_~j~1_5 (+ finddup_~j~1_3 1))) :named ssa_5))
(assert (! (<= finddup_~n_0 finddup_~j~1_5) :named ssa_6))
(assert (! (= finddup_~i~1_7 (+ finddup_~i~1_0 1)) :named ssa_7))
(assert (! (and (< finddup_~i~1_7 finddup_~n_0) (= finddup_~j~1_8 (+ finddup_~i~1_7 1))) :named ssa_8))
(assert (! (and (< finddup_~j~1_8 finddup_~n_0) (= |finddup_#t~mem9_9| (select (select |#memory_int#2_-2| finddup_~a.base_0) (+ (* finddup_~j~1_8 4) finddup_~a.offset_0))) (= |finddup_#t~mem8_9| (select (select |#memory_int#2_-2| finddup_~a.base_0) (+ finddup_~a.offset_0 (* finddup_~i~1_7 4))))) :named ssa_9))
(assert (! (and (= v_ArrVal_236_fresh_1 (store (select |#memory_int#3_-1| finddup_~_j.base_0) finddup_~_j.offset_0 finddup_~j~1_8)) (= (store |#memory_int#3_-1| finddup_~_j.base_0 v_ArrVal_236_fresh_1) |#memory_int#3_10|) (= v_ArrVal_238_fresh_1 (store (select |#memory_int#1_-1| finddup_~_i.base_0) finddup_~_i.offset_0 v_ArrVal_235_fresh_1)) (= v_ArrVal_237_fresh_1 finddup_~j~1_8) (= v_ArrVal_235_fresh_1 finddup_~i~1_7) (= |finddup_#res_10| 1) (= (store |#memory_int#1_-1| finddup_~_i.base_0 v_ArrVal_238_fresh_1) |#memory_int#1_10|) (= |finddup_#t~mem8_9| |finddup_#t~mem9_9|)) :named ssa_10))
(assert (! true :named ssa_11))
(assert (! (= |main_#t~ret14_12| |finddup_#res_10|) :named ssa_12_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (and (= |main_~#i~2.base_-2| |finddup_#in~_i.base_-1|) (= |main_~#i~2.offset_-2| |finddup_#in~_i.offset_-1|) (= |finddup_#in~a.offset_-1| main_~a~0.offset_-2) (= |finddup_#in~a.base_-1| main_~a~0.base_-2) (= |finddup_#in~_j.base_-1| |main_~#j~2.base_-2|) (= main_~n~0_-2 |finddup_#in~n_-1|) (= |main_~#j~2.offset_-2| |finddup_#in~_j.offset_-1|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! (and (= |old(#memory_int#3)_-1| |#memory_int#3_-2|) (= |old(#memory_int#1)_-1| |#memory_int#1_-2|)) :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 ssa_3 ssa_4 ssa_5 ssa_6 ssa_7 ssa_8 ssa_9 ssa_10 ssa_11 (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_12_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#valid_-2| () (Array Int Int))
(declare-fun |#length_-2| () (Array Int Int))
(declare-fun |#memory_int#2_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#1_-2| () (Array Int (Array Int Int)))
(declare-fun |#memory_int#3_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#valid)_-2| () (Array Int Int))
(declare-fun |old(#length)_-2| () (Array Int Int))
(declare-fun |old(#memory_int#2)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#1)_-2| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int#3)_-2| () (Array Int (Array Int Int)))
(declare-fun |main_~#i~2.offset_-2| () Int)
(declare-fun main_~n~0_-2 () Int)
(declare-fun |main_~#i~2.base_-2| () Int)
(declare-fun main_~r~0_-2 () Int)
(declare-fun |__VERIFIER_assert_#in~cond_-1| () Int)
(declare-fun main_~r~0_-1 () Int)
(declare-fun __VERIFIER_assert_~cond_0 () Int)
(declare-fun __VERIFIER_assert_~cond_1 () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= (+ 2 (select (select |#memory_int#1_-2| |main_~#i~2.base_-2|) |main_~#i~2.offset_-2|)) main_~n~0_-2)) :named ssa_postcond))
(assert (! (= __VERIFIER_assert_~cond_0 |__VERIFIER_assert_#in~cond_-1|) :named ssa_0))
(assert (! (not (= __VERIFIER_assert_~cond_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (<= (+ 2 (select (select |#memory_int#1_-2| |main_~#i~2.base_-2|) |main_~#i~2.offset_-2|)) main_~n~0_-2) :named ssa_-2_PendingContext))
(assert (! (= main_~r~0_-2 |__VERIFIER_assert_#in~cond_-1|) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(exit)
