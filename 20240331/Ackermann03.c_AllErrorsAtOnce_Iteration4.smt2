(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-option :produce-interpolants true)
(set-option :interpolant-check-mode true)
(set-option :proof-transformation LU)
(set-logic ALL)
(set-info :source |SMT script generated on 2024-03-31T00:14:54+01:00 by Ultimate (https://ultimate.informatik.uni-freiburg.de/)|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(set-info :ultimate-id Ackermann03.c_AllErrorsAtOnce_Iteration4)
(declare-fun |c_old(#valid)| () (Array Int Int))
(declare-fun |c_old(#valid)_primed| () (Array Int Int))
(declare-fun |c_#valid| () (Array Int Int))
(declare-fun |c_#valid_primed| () (Array Int Int))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun |c_old(#memory_int#0)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int#0)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int#0_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#StackHeapBarrier)| () Int)
(declare-fun |c_old(#StackHeapBarrier)_primed| () Int)
(declare-fun |c_#StackHeapBarrier| () Int)
(declare-fun |c_#StackHeapBarrier_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_~size| () Int)
(declare-fun |c_#Ultimate.allocInit_~size_primed| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase| () Int)
(declare-fun |c_#Ultimate.allocInit_ptrBase_primed| () Int)
(declare-fun |c_read~int#0_#ptr.base| () Int)
(declare-fun |c_read~int#0_#ptr.base_primed| () Int)
(declare-fun |c_read~int#0_#ptr.offset| () Int)
(declare-fun |c_read~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType| () Int)
(declare-fun |c_read~int#0_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int#0_#value| () Int)
(declare-fun |c_read~int#0_#value_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~nondet7| () Int)
(declare-fun |c_main_#t~nondet7_primed| () Int)
(declare-fun |c_main_#t~nondet8| () Int)
(declare-fun |c_main_#t~nondet8_primed| () Int)
(declare-fun |c_main_#t~ret9| () Int)
(declare-fun |c_main_#t~ret9_primed| () Int)
(declare-fun c_main_~m~0 () Int)
(declare-fun c_main_~m~0_primed () Int)
(declare-fun c_main_~n~0 () Int)
(declare-fun c_main_~n~0_primed () Int)
(declare-fun c_main_~result~0 () Int)
(declare-fun c_main_~result~0_primed () Int)
(declare-fun |c_write~int#0_#value| () Int)
(declare-fun |c_write~int#0_#value_primed| () Int)
(declare-fun |c_write~int#0_#ptr.base| () Int)
(declare-fun |c_write~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~int#0_#ptr.offset| () Int)
(declare-fun |c_write~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res_primed| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret10| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret10_primed| () Int)
(declare-fun |c_ackermann_#in~m| () Int)
(declare-fun |c_ackermann_#in~m_primed| () Int)
(declare-fun |c_ackermann_#in~n| () Int)
(declare-fun |c_ackermann_#in~n_primed| () Int)
(declare-fun |c_ackermann_#res| () Int)
(declare-fun |c_ackermann_#res_primed| () Int)
(declare-fun |c_ackermann_#t~ret4| () Int)
(declare-fun |c_ackermann_#t~ret4_primed| () Int)
(declare-fun |c_ackermann_#t~ret5| () Int)
(declare-fun |c_ackermann_#t~ret5_primed| () Int)
(declare-fun |c_ackermann_#t~ret6| () Int)
(declare-fun |c_ackermann_#t~ret6_primed| () Int)
(declare-fun c_ackermann_~m () Int)
(declare-fun c_ackermann_~m_primed () Int)
(declare-fun c_ackermann_~n () Int)
(declare-fun c_ackermann_~n_primed () Int)
(declare-fun |c___assert_fail_#in~0.base| () Int)
(declare-fun |c___assert_fail_#in~0.base_primed| () Int)
(declare-fun |c___assert_fail_#in~0.offset| () Int)
(declare-fun |c___assert_fail_#in~0.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~1.base| () Int)
(declare-fun |c___assert_fail_#in~1.base_primed| () Int)
(declare-fun |c___assert_fail_#in~1.offset| () Int)
(declare-fun |c___assert_fail_#in~1.offset_primed| () Int)
(declare-fun |c___assert_fail_#in~2| () Int)
(declare-fun |c___assert_fail_#in~2_primed| () Int)
(declare-fun |c___assert_fail_#in~3.base| () Int)
(declare-fun |c___assert_fail_#in~3.base_primed| () Int)
(declare-fun |c___assert_fail_#in~3.offset| () Int)
(declare-fun |c___assert_fail_#in~3.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#value| () Int)
(declare-fun |c_write~init~int#0_#value_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.base| () Int)
(declare-fun |c_write~init~int#0_#ptr.base_primed| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset| () Int)
(declare-fun |c_write~init~int#0_#ptr.offset_primed| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType| () Int)
(declare-fun |c_write~init~int#0_#sizeOfWrittenType_primed| () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.base_primed () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset () Int)
(declare-fun c_ULTIMATE.dealloc_~addr.offset_primed () Int)
(declare-fun |c_aux_v_ULTIMATE.start_#t~ret10_3| () Int)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(declare-fun |main_#t~nondet7_4| () Int)
(declare-fun main_~m~0_4 () Int)
(declare-fun main_~n~0_5 () Int)
(declare-fun |main_#t~nondet8_5| () Int)
(declare-fun main_~m~0_7 () Int)
(declare-fun |ackermann_#in~m_7| () Int)
(declare-fun main_~n~0_7 () Int)
(declare-fun |ackermann_#in~n_7| () Int)
(declare-fun ackermann_~n_8 () Int)
(declare-fun ackermann_~m_8 () Int)
(declare-fun ackermann_~n_11 () Int)
(declare-fun |ackermann_#in~m_11| () Int)
(declare-fun |ackermann_#in~n_11| () Int)
(declare-fun ackermann_~m_11 () Int)
(declare-fun ackermann_~n_12 () Int)
(declare-fun ackermann_~m_12 () Int)
(declare-fun ackermann_~n_15 () Int)
(declare-fun |ackermann_#in~m_15| () Int)
(declare-fun |ackermann_#in~n_15| () Int)
(declare-fun ackermann_~m_15 () Int)
(declare-fun ackermann_~n_16 () Int)
(declare-fun ackermann_~m_16 () Int)
(declare-fun ackermann_~n_18 () Int)
(declare-fun |ackermann_#in~m_19| () Int)
(declare-fun |ackermann_#in~n_19| () Int)
(declare-fun ackermann_~m_19 () Int)
(declare-fun ackermann_~n_20 () Int)
(declare-fun ackermann_~m_20 () Int)
(declare-fun |ackermann_#res_21| () Int)
(declare-fun ackermann_~n_21 () Int)
(declare-fun ackermann_~m_21 () Int)
(declare-fun |ackermann_#res_23| () Int)
(declare-fun |ackermann_#t~ret4_23| () Int)
(declare-fun |ackermann_#res_24| () Int)
(declare-fun |ackermann_#t~ret4_24| () Int)
(declare-fun |ackermann_#res_26| () Int)
(declare-fun |ackermann_#t~ret5_26| () Int)
(declare-fun |ackermann_#t~ret5_28| () Int)
(declare-fun |ackermann_#in~m_28| () Int)
(declare-fun |ackermann_#in~n_28| () Int)
(declare-fun ackermann_~m_28 () Int)
(declare-fun ackermann_~n_29 () Int)
(declare-fun ackermann_~m_29 () Int)
(declare-fun |ackermann_#res_30| () Int)
(declare-fun ackermann_~n_30 () Int)
(declare-fun ackermann_~m_30 () Int)
(declare-fun |ackermann_#res_32| () Int)
(declare-fun |ackermann_#t~ret6_32| () Int)
(declare-fun |ackermann_#res_33| () Int)
(declare-fun |ackermann_#t~ret6_33| () Int)
(declare-fun |ackermann_#t~ret5_33| () Int)
(declare-fun |ackermann_#res_35| () Int)
(declare-fun |ackermann_#t~ret5_35| () Int)
(declare-fun |ackermann_#t~ret5_37| () Int)
(declare-fun |ackermann_#in~m_37| () Int)
(declare-fun |ackermann_#in~n_37| () Int)
(declare-fun ackermann_~m_37 () Int)
(declare-fun ackermann_~n_38 () Int)
(declare-fun ackermann_~m_38 () Int)
(declare-fun |ackermann_#res_39| () Int)
(declare-fun ackermann_~n_39 () Int)
(declare-fun ackermann_~m_39 () Int)
(declare-fun |ackermann_#res_41| () Int)
(declare-fun |ackermann_#t~ret6_41| () Int)
(declare-fun |ackermann_#res_42| () Int)
(declare-fun |ackermann_#t~ret6_42| () Int)
(declare-fun |ackermann_#t~ret5_42| () Int)
(declare-fun |ackermann_#res_44| () Int)
(declare-fun |main_#t~ret9_44| () Int)
(declare-fun main_~result~0_45 () Int)
(declare-fun |main_#t~ret9_45| () Int)
(declare-fun main_~result~0_46 () Int)
(declare-fun main_~m~0_46 () Int)
(declare-fun main_~n~0_46 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! true :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! true :named ssa_0_OldVarAssigCall))
(assert (! (and (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= 14 (select |#length_-1| 2)) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_1))
(assert (! true :named ssa_2_return))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! true :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (<= main_~m~0_4 2147483647) (<= 0 (+ main_~m~0_4 2147483648))) :named ssa_4))
(assert (! (and (<= main_~n~0_5 2147483647) (<= 0 (+ main_~n~0_5 2147483648)) (<= main_~m~0_4 3) (<= 0 main_~m~0_4)) :named ssa_5))
(assert (! (and (<= 0 main_~n~0_5) (<= main_~n~0_5 23)) :named ssa_6))
(assert (! true :named ssa_7_GlobVarAssigCall))
(assert (! (and (= main_~n~0_5 |ackermann_#in~n_7|) (= main_~m~0_4 |ackermann_#in~m_7|)) :named ssa_7_LocVarAssigCall))
(assert (! true :named ssa_7_OldVarAssigCall))
(assert (! (and (= ackermann_~n_8 |ackermann_#in~n_7|) (= ackermann_~m_8 |ackermann_#in~m_7|)) :named ssa_8))
(assert (! (not (= ackermann_~m_8 0)) :named ssa_9))
(assert (! (not (= ackermann_~n_8 0)) :named ssa_10))
(assert (! true :named ssa_11_GlobVarAssigCall))
(assert (! (and (= ackermann_~n_8 (+ |ackermann_#in~n_11| 1)) (= |ackermann_#in~m_11| ackermann_~m_8)) :named ssa_11_LocVarAssigCall))
(assert (! true :named ssa_11_OldVarAssigCall))
(assert (! (and (= ackermann_~n_12 |ackermann_#in~n_11|) (= ackermann_~m_12 |ackermann_#in~m_11|)) :named ssa_12))
(assert (! (not (= ackermann_~m_12 0)) :named ssa_13))
(assert (! (not (= ackermann_~n_12 0)) :named ssa_14))
(assert (! true :named ssa_15_GlobVarAssigCall))
(assert (! (and (= ackermann_~n_12 (+ |ackermann_#in~n_15| 1)) (= |ackermann_#in~m_15| ackermann_~m_12)) :named ssa_15_LocVarAssigCall))
(assert (! true :named ssa_15_OldVarAssigCall))
(assert (! (and (= ackermann_~n_16 |ackermann_#in~n_15|) (= ackermann_~m_16 |ackermann_#in~m_15|)) :named ssa_16))
(assert (! (not (= ackermann_~m_16 0)) :named ssa_17))
(assert (! (= ackermann_~n_16 0) :named ssa_18))
(assert (! true :named ssa_19_GlobVarAssigCall))
(assert (! (and (= ackermann_~m_16 (+ |ackermann_#in~m_19| 1)) (= |ackermann_#in~n_19| 1)) :named ssa_19_LocVarAssigCall))
(assert (! true :named ssa_19_OldVarAssigCall))
(assert (! (and (= ackermann_~n_20 |ackermann_#in~n_19|) (= ackermann_~m_20 |ackermann_#in~m_19|)) :named ssa_20))
(assert (! (and (= |ackermann_#res_21| (+ ackermann_~n_20 1)) (= ackermann_~m_20 0)) :named ssa_21))
(assert (! true :named ssa_22))
(assert (! (= |ackermann_#res_21| |ackermann_#t~ret4_23|) :named ssa_23_return))
(assert (! (and (<= 0 (+ |ackermann_#t~ret4_23| 2147483648)) (<= |ackermann_#t~ret4_23| 2147483647) (= |ackermann_#res_24| |ackermann_#t~ret4_23|)) :named ssa_24))
(assert (! true :named ssa_25))
(assert (! (= |ackermann_#res_24| |ackermann_#t~ret5_26|) :named ssa_26_return))
(assert (! (and (<= 0 (+ |ackermann_#t~ret5_26| 2147483648)) (<= |ackermann_#t~ret5_26| 2147483647)) :named ssa_27))
(assert (! true :named ssa_28_GlobVarAssigCall))
(assert (! (and (= (+ |ackermann_#in~m_28| 1) ackermann_~m_12) (= |ackermann_#in~n_28| |ackermann_#t~ret5_26|)) :named ssa_28_LocVarAssigCall))
(assert (! true :named ssa_28_OldVarAssigCall))
(assert (! (and (= ackermann_~n_29 |ackermann_#in~n_28|) (= ackermann_~m_29 |ackermann_#in~m_28|)) :named ssa_29))
(assert (! (and (= |ackermann_#res_30| (+ ackermann_~n_29 1)) (= ackermann_~m_29 0)) :named ssa_30))
(assert (! true :named ssa_31))
(assert (! (= |ackermann_#res_30| |ackermann_#t~ret6_32|) :named ssa_32_return))
(assert (! (and (= |ackermann_#res_33| |ackermann_#t~ret6_32|) (<= |ackermann_#t~ret6_32| 2147483647) (<= 0 (+ |ackermann_#t~ret6_32| 2147483648))) :named ssa_33))
(assert (! true :named ssa_34))
(assert (! (= |ackermann_#res_33| |ackermann_#t~ret5_35|) :named ssa_35_return))
(assert (! (and (<= 0 (+ |ackermann_#t~ret5_35| 2147483648)) (<= |ackermann_#t~ret5_35| 2147483647)) :named ssa_36))
(assert (! true :named ssa_37_GlobVarAssigCall))
(assert (! (and (= (+ |ackermann_#in~m_37| 1) ackermann_~m_8) (= |ackermann_#in~n_37| |ackermann_#t~ret5_35|)) :named ssa_37_LocVarAssigCall))
(assert (! true :named ssa_37_OldVarAssigCall))
(assert (! (and (= ackermann_~n_38 |ackermann_#in~n_37|) (= ackermann_~m_38 |ackermann_#in~m_37|)) :named ssa_38))
(assert (! (and (= |ackermann_#res_39| (+ ackermann_~n_38 1)) (= ackermann_~m_38 0)) :named ssa_39))
(assert (! true :named ssa_40))
(assert (! (= |ackermann_#res_39| |ackermann_#t~ret6_41|) :named ssa_41_return))
(assert (! (and (= |ackermann_#res_42| |ackermann_#t~ret6_41|) (<= |ackermann_#t~ret6_41| 2147483647) (<= 0 (+ |ackermann_#t~ret6_41| 2147483648))) :named ssa_42))
(assert (! true :named ssa_43))
(assert (! (= |main_#t~ret9_44| |ackermann_#res_42|) :named ssa_44_return))
(assert (! (and (<= 0 (+ |main_#t~ret9_44| 2147483648)) (= main_~result~0_45 |main_#t~ret9_44|) (<= |main_#t~ret9_44| 2147483647)) :named ssa_45))
(assert (! (and (= main_~n~0_5 2) (= main_~m~0_4 2) (not (= 7 main_~result~0_45))) :named ssa_46))
(assert (! true :named ssa_47))
(check-sat)
(get-interpolants (and ssa_0_LocVarAssigCall ssa_precond ssa_0_GlobVarAssigCall ssa_0_OldVarAssigCall ssa_2_return ssa_1) (and ssa_3_OldVarAssigCall ssa_3_LocVarAssigCall ssa_3_GlobVarAssigCall) ssa_4 ssa_5 ssa_6 (and ssa_13 ssa_27 ssa_20 ssa_19_GlobVarAssigCall ssa_31 ssa_16 ssa_15_LocVarAssigCall ssa_34 ssa_7_LocVarAssigCall ssa_11_LocVarAssigCall ssa_40 ssa_10 ssa_14 ssa_8 ssa_9 ssa_25 ssa_15_GlobVarAssigCall ssa_37_LocVarAssigCall ssa_26_return ssa_19_OldVarAssigCall ssa_7_OldVarAssigCall ssa_32_return ssa_39 ssa_43 ssa_38 ssa_12 ssa_41_return ssa_11_OldVarAssigCall ssa_28_OldVarAssigCall ssa_19_LocVarAssigCall ssa_37_GlobVarAssigCall ssa_22 ssa_36 ssa_35_return ssa_29 ssa_21 ssa_11_GlobVarAssigCall ssa_18 ssa_23_return ssa_30 ssa_17 ssa_28_GlobVarAssigCall ssa_33 ssa_7_GlobVarAssigCall ssa_28_LocVarAssigCall ssa_44_return ssa_15_OldVarAssigCall ssa_42 ssa_24 ssa_37_OldVarAssigCall) ssa_45 ssa_46 (and ssa_47 ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |#memory_int#0_-1| () (Array Int (Array Int Int)))
(declare-fun |#StackHeapBarrier_-1| () Int)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#valid_-1| () (Array Int Int))
(assert (! true :named ssa_precond))
(assert (! (not true) :named ssa_postcond))
(assert (! (and (< 0 |#StackHeapBarrier_-1|) (= 12 (select |#length_-1| 3)) (= (select |#valid_-1| 3) 1) (= (select |#valid_-1| 2) 1) (= (select |#valid_-1| 1) 1) (= (select (select |#memory_int#0_-1| 1) 1) 0) (= (select |#length_-1| 1) 2) (= 14 (select |#length_-1| 2)) (= (select (select |#memory_int#0_-1| 1) 0) 48) (= (select |#valid_-1| 0) 0)) :named ssa_0))
(assert (! true :named ssa_1_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! true :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_1_return ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun main_~m~0_-2 () Int)
(declare-fun main_~n~0_-2 () Int)
(declare-fun main_~m~0_-1 () Int)
(declare-fun |ackermann_#in~m_-1| () Int)
(declare-fun main_~n~0_-1 () Int)
(declare-fun |ackermann_#in~n_-1| () Int)
(declare-fun ackermann_~n_0 () Int)
(declare-fun ackermann_~m_0 () Int)
(declare-fun ackermann_~n_3 () Int)
(declare-fun |ackermann_#in~m_3| () Int)
(declare-fun |ackermann_#in~n_3| () Int)
(declare-fun ackermann_~m_3 () Int)
(declare-fun ackermann_~n_4 () Int)
(declare-fun ackermann_~m_4 () Int)
(declare-fun ackermann_~n_7 () Int)
(declare-fun |ackermann_#in~m_7| () Int)
(declare-fun |ackermann_#in~n_7| () Int)
(declare-fun ackermann_~m_7 () Int)
(declare-fun ackermann_~n_8 () Int)
(declare-fun ackermann_~m_8 () Int)
(declare-fun ackermann_~n_10 () Int)
(declare-fun |ackermann_#in~m_11| () Int)
(declare-fun |ackermann_#in~n_11| () Int)
(declare-fun ackermann_~m_11 () Int)
(declare-fun ackermann_~n_12 () Int)
(declare-fun ackermann_~m_12 () Int)
(declare-fun |ackermann_#res_13| () Int)
(declare-fun ackermann_~n_13 () Int)
(declare-fun ackermann_~m_13 () Int)
(declare-fun |ackermann_#res_15| () Int)
(declare-fun |ackermann_#t~ret4_15| () Int)
(declare-fun |ackermann_#res_16| () Int)
(declare-fun |ackermann_#t~ret4_16| () Int)
(declare-fun |ackermann_#res_18| () Int)
(declare-fun |ackermann_#t~ret5_18| () Int)
(declare-fun |ackermann_#t~ret5_20| () Int)
(declare-fun |ackermann_#in~m_20| () Int)
(declare-fun |ackermann_#in~n_20| () Int)
(declare-fun ackermann_~m_20 () Int)
(declare-fun ackermann_~n_21 () Int)
(declare-fun ackermann_~m_21 () Int)
(declare-fun |ackermann_#res_22| () Int)
(declare-fun ackermann_~n_22 () Int)
(declare-fun ackermann_~m_22 () Int)
(declare-fun |ackermann_#res_24| () Int)
(declare-fun |ackermann_#t~ret6_24| () Int)
(declare-fun |ackermann_#res_25| () Int)
(declare-fun |ackermann_#t~ret6_25| () Int)
(declare-fun |ackermann_#t~ret5_25| () Int)
(declare-fun |ackermann_#res_27| () Int)
(declare-fun |ackermann_#t~ret5_27| () Int)
(declare-fun |ackermann_#t~ret5_29| () Int)
(declare-fun |ackermann_#in~m_29| () Int)
(declare-fun |ackermann_#in~n_29| () Int)
(declare-fun ackermann_~m_29 () Int)
(declare-fun ackermann_~n_30 () Int)
(declare-fun ackermann_~m_30 () Int)
(declare-fun |ackermann_#res_31| () Int)
(declare-fun ackermann_~n_31 () Int)
(declare-fun ackermann_~m_31 () Int)
(declare-fun |ackermann_#res_33| () Int)
(declare-fun |ackermann_#t~ret6_33| () Int)
(declare-fun |ackermann_#res_34| () Int)
(declare-fun |ackermann_#t~ret6_34| () Int)
(declare-fun |ackermann_#t~ret5_34| () Int)
(declare-fun |ackermann_#res_36| () Int)
(declare-fun |main_#t~ret9_36| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= main_~m~0_-2 1)) :named ssa_postcond))
(assert (! (and (= ackermann_~n_0 |ackermann_#in~n_-1|) (= ackermann_~m_0 |ackermann_#in~m_-1|)) :named ssa_0))
(assert (! (not (= ackermann_~m_0 0)) :named ssa_1))
(assert (! (not (= ackermann_~n_0 0)) :named ssa_2))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! (and (= ackermann_~n_0 (+ |ackermann_#in~n_3| 1)) (= |ackermann_#in~m_3| ackermann_~m_0)) :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (= ackermann_~n_4 |ackermann_#in~n_3|) (= ackermann_~m_4 |ackermann_#in~m_3|)) :named ssa_4))
(assert (! (not (= ackermann_~m_4 0)) :named ssa_5))
(assert (! (not (= ackermann_~n_4 0)) :named ssa_6))
(assert (! true :named ssa_7_GlobVarAssigCall))
(assert (! (and (= ackermann_~n_4 (+ |ackermann_#in~n_7| 1)) (= |ackermann_#in~m_7| ackermann_~m_4)) :named ssa_7_LocVarAssigCall))
(assert (! true :named ssa_7_OldVarAssigCall))
(assert (! (and (= ackermann_~n_8 |ackermann_#in~n_7|) (= ackermann_~m_8 |ackermann_#in~m_7|)) :named ssa_8))
(assert (! (not (= ackermann_~m_8 0)) :named ssa_9))
(assert (! (= ackermann_~n_8 0) :named ssa_10))
(assert (! true :named ssa_11_GlobVarAssigCall))
(assert (! (and (= ackermann_~m_8 (+ |ackermann_#in~m_11| 1)) (= |ackermann_#in~n_11| 1)) :named ssa_11_LocVarAssigCall))
(assert (! true :named ssa_11_OldVarAssigCall))
(assert (! (and (= ackermann_~n_12 |ackermann_#in~n_11|) (= ackermann_~m_12 |ackermann_#in~m_11|)) :named ssa_12))
(assert (! (and (= |ackermann_#res_13| (+ ackermann_~n_12 1)) (= ackermann_~m_12 0)) :named ssa_13))
(assert (! true :named ssa_14))
(assert (! (= |ackermann_#res_13| |ackermann_#t~ret4_15|) :named ssa_15_return))
(assert (! (and (<= 0 (+ |ackermann_#t~ret4_15| 2147483648)) (<= |ackermann_#t~ret4_15| 2147483647) (= |ackermann_#res_16| |ackermann_#t~ret4_15|)) :named ssa_16))
(assert (! true :named ssa_17))
(assert (! (= |ackermann_#res_16| |ackermann_#t~ret5_18|) :named ssa_18_return))
(assert (! (and (<= 0 (+ |ackermann_#t~ret5_18| 2147483648)) (<= |ackermann_#t~ret5_18| 2147483647)) :named ssa_19))
(assert (! true :named ssa_20_GlobVarAssigCall))
(assert (! (and (= (+ |ackermann_#in~m_20| 1) ackermann_~m_4) (= |ackermann_#in~n_20| |ackermann_#t~ret5_18|)) :named ssa_20_LocVarAssigCall))
(assert (! true :named ssa_20_OldVarAssigCall))
(assert (! (and (= ackermann_~n_21 |ackermann_#in~n_20|) (= ackermann_~m_21 |ackermann_#in~m_20|)) :named ssa_21))
(assert (! (and (= |ackermann_#res_22| (+ ackermann_~n_21 1)) (= ackermann_~m_21 0)) :named ssa_22))
(assert (! true :named ssa_23))
(assert (! (= |ackermann_#res_22| |ackermann_#t~ret6_24|) :named ssa_24_return))
(assert (! (and (= |ackermann_#res_25| |ackermann_#t~ret6_24|) (<= |ackermann_#t~ret6_24| 2147483647) (<= 0 (+ |ackermann_#t~ret6_24| 2147483648))) :named ssa_25))
(assert (! true :named ssa_26))
(assert (! (= |ackermann_#res_25| |ackermann_#t~ret5_27|) :named ssa_27_return))
(assert (! (and (<= 0 (+ |ackermann_#t~ret5_27| 2147483648)) (<= |ackermann_#t~ret5_27| 2147483647)) :named ssa_28))
(assert (! true :named ssa_29_GlobVarAssigCall))
(assert (! (and (= (+ |ackermann_#in~m_29| 1) ackermann_~m_0) (= |ackermann_#in~n_29| |ackermann_#t~ret5_27|)) :named ssa_29_LocVarAssigCall))
(assert (! true :named ssa_29_OldVarAssigCall))
(assert (! (and (= ackermann_~n_30 |ackermann_#in~n_29|) (= ackermann_~m_30 |ackermann_#in~m_29|)) :named ssa_30))
(assert (! (and (= |ackermann_#res_31| (+ ackermann_~n_30 1)) (= ackermann_~m_30 0)) :named ssa_31))
(assert (! true :named ssa_32))
(assert (! (= |ackermann_#res_31| |ackermann_#t~ret6_33|) :named ssa_33_return))
(assert (! (and (= |ackermann_#res_34| |ackermann_#t~ret6_33|) (<= |ackermann_#t~ret6_33| 2147483647) (<= 0 (+ |ackermann_#t~ret6_33| 2147483648))) :named ssa_34))
(assert (! true :named ssa_35))
(assert (! (= |main_#t~ret9_36| |ackermann_#res_34|) :named ssa_36_return))
(assert (! true :named ssa_-2_PendingContext))
(assert (! (and (= main_~n~0_-2 |ackermann_#in~n_-1|) (= main_~m~0_-2 |ackermann_#in~m_-1|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_13 ssa_3_OldVarAssigCall ssa_18_return ssa_16 ssa_6 ssa_26 ssa_3_LocVarAssigCall ssa_7_LocVarAssigCall ssa_11_LocVarAssigCall ssa_27_return ssa_10 ssa_14 ssa_8 ssa_9 ssa_25 ssa_3_GlobVarAssigCall ssa_20_GlobVarAssigCall ssa_20_OldVarAssigCall ssa_24_return ssa_7_OldVarAssigCall ssa_19 ssa_20_LocVarAssigCall ssa_12 ssa_5 ssa_11_OldVarAssigCall ssa_4 ssa_22 ssa_21 ssa_11_GlobVarAssigCall ssa_23 ssa_17 ssa_7_GlobVarAssigCall ssa_15_return) ssa_28 (and ssa_29_OldVarAssigCall ssa_31 ssa_29_GlobVarAssigCall ssa_32 ssa_29_LocVarAssigCall ssa_33_return ssa_30) ssa_34 ssa_35 (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond ssa_36_return))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |ackermann_#in~m_-2| () Int)
(declare-fun ackermann_~m_-2 () Int)
(declare-fun ackermann_~n_-2 () Int)
(declare-fun ackermann_~n_-1 () Int)
(declare-fun |ackermann_#in~m_-1| () Int)
(declare-fun |ackermann_#in~n_-1| () Int)
(declare-fun ackermann_~m_-1 () Int)
(declare-fun ackermann_~n_0 () Int)
(declare-fun ackermann_~m_0 () Int)
(declare-fun ackermann_~n_3 () Int)
(declare-fun |ackermann_#in~m_3| () Int)
(declare-fun |ackermann_#in~n_3| () Int)
(declare-fun ackermann_~m_3 () Int)
(declare-fun ackermann_~n_4 () Int)
(declare-fun ackermann_~m_4 () Int)
(declare-fun ackermann_~n_6 () Int)
(declare-fun |ackermann_#in~m_7| () Int)
(declare-fun |ackermann_#in~n_7| () Int)
(declare-fun ackermann_~m_7 () Int)
(declare-fun ackermann_~n_8 () Int)
(declare-fun ackermann_~m_8 () Int)
(declare-fun |ackermann_#res_9| () Int)
(declare-fun ackermann_~n_9 () Int)
(declare-fun ackermann_~m_9 () Int)
(declare-fun |ackermann_#res_11| () Int)
(declare-fun |ackermann_#t~ret4_11| () Int)
(declare-fun |ackermann_#res_12| () Int)
(declare-fun |ackermann_#t~ret4_12| () Int)
(declare-fun |ackermann_#res_14| () Int)
(declare-fun |ackermann_#t~ret5_14| () Int)
(declare-fun |ackermann_#t~ret5_16| () Int)
(declare-fun |ackermann_#in~m_16| () Int)
(declare-fun |ackermann_#in~n_16| () Int)
(declare-fun ackermann_~m_16 () Int)
(declare-fun ackermann_~n_17 () Int)
(declare-fun ackermann_~m_17 () Int)
(declare-fun |ackermann_#res_18| () Int)
(declare-fun ackermann_~n_18 () Int)
(declare-fun ackermann_~m_18 () Int)
(declare-fun |ackermann_#res_20| () Int)
(declare-fun |ackermann_#t~ret6_20| () Int)
(declare-fun |ackermann_#res_21| () Int)
(declare-fun |ackermann_#t~ret6_21| () Int)
(declare-fun |ackermann_#t~ret5_21| () Int)
(declare-fun |ackermann_#res_23| () Int)
(declare-fun |ackermann_#t~ret5_23| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= |ackermann_#in~m_-2| 1)) :named ssa_postcond))
(assert (! (and (= ackermann_~n_0 |ackermann_#in~n_-1|) (= ackermann_~m_0 |ackermann_#in~m_-1|)) :named ssa_0))
(assert (! (not (= ackermann_~m_0 0)) :named ssa_1))
(assert (! (not (= ackermann_~n_0 0)) :named ssa_2))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! (and (= ackermann_~n_0 (+ |ackermann_#in~n_3| 1)) (= |ackermann_#in~m_3| ackermann_~m_0)) :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (= ackermann_~n_4 |ackermann_#in~n_3|) (= ackermann_~m_4 |ackermann_#in~m_3|)) :named ssa_4))
(assert (! (not (= ackermann_~m_4 0)) :named ssa_5))
(assert (! (= ackermann_~n_4 0) :named ssa_6))
(assert (! true :named ssa_7_GlobVarAssigCall))
(assert (! (and (= ackermann_~m_4 (+ |ackermann_#in~m_7| 1)) (= |ackermann_#in~n_7| 1)) :named ssa_7_LocVarAssigCall))
(assert (! true :named ssa_7_OldVarAssigCall))
(assert (! (and (= ackermann_~n_8 |ackermann_#in~n_7|) (= ackermann_~m_8 |ackermann_#in~m_7|)) :named ssa_8))
(assert (! (and (= |ackermann_#res_9| (+ ackermann_~n_8 1)) (= ackermann_~m_8 0)) :named ssa_9))
(assert (! true :named ssa_10))
(assert (! (= |ackermann_#res_9| |ackermann_#t~ret4_11|) :named ssa_11_return))
(assert (! (and (<= 0 (+ |ackermann_#t~ret4_11| 2147483648)) (<= |ackermann_#t~ret4_11| 2147483647) (= |ackermann_#res_12| |ackermann_#t~ret4_11|)) :named ssa_12))
(assert (! true :named ssa_13))
(assert (! (= |ackermann_#res_12| |ackermann_#t~ret5_14|) :named ssa_14_return))
(assert (! (and (<= 0 (+ |ackermann_#t~ret5_14| 2147483648)) (<= |ackermann_#t~ret5_14| 2147483647)) :named ssa_15))
(assert (! true :named ssa_16_GlobVarAssigCall))
(assert (! (and (= (+ |ackermann_#in~m_16| 1) ackermann_~m_0) (= |ackermann_#in~n_16| |ackermann_#t~ret5_14|)) :named ssa_16_LocVarAssigCall))
(assert (! true :named ssa_16_OldVarAssigCall))
(assert (! (and (= ackermann_~n_17 |ackermann_#in~n_16|) (= ackermann_~m_17 |ackermann_#in~m_16|)) :named ssa_17))
(assert (! (and (= |ackermann_#res_18| (+ ackermann_~n_17 1)) (= ackermann_~m_17 0)) :named ssa_18))
(assert (! true :named ssa_19))
(assert (! (= |ackermann_#res_18| |ackermann_#t~ret6_20|) :named ssa_20_return))
(assert (! (and (= |ackermann_#res_21| |ackermann_#t~ret6_20|) (<= |ackermann_#t~ret6_20| 2147483647) (<= 0 (+ |ackermann_#t~ret6_20| 2147483648))) :named ssa_21))
(assert (! true :named ssa_22))
(assert (! (= |ackermann_#res_21| |ackermann_#t~ret5_23|) :named ssa_23_return))
(assert (! (= ackermann_~m_-2 |ackermann_#in~m_-2|) :named ssa_-2_PendingContext))
(assert (! (and (= ackermann_~n_-2 (+ |ackermann_#in~n_-1| 1)) (= |ackermann_#in~m_-1| ackermann_~m_-2)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_13 ssa_3_OldVarAssigCall ssa_11_return ssa_6 ssa_3_LocVarAssigCall ssa_7_LocVarAssigCall ssa_10 ssa_8 ssa_9 ssa_3_GlobVarAssigCall ssa_7_OldVarAssigCall ssa_12 ssa_5 ssa_4 ssa_7_GlobVarAssigCall ssa_14_return) ssa_15 (and ssa_19 ssa_16_OldVarAssigCall ssa_16_LocVarAssigCall ssa_20_return ssa_16_GlobVarAssigCall ssa_18 ssa_17) ssa_21 ssa_22 (and ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond ssa_23_return))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |ackermann_#in~m_-2| () Int)
(declare-fun ackermann_~m_-2 () Int)
(declare-fun ackermann_~n_-2 () Int)
(declare-fun ackermann_~n_-1 () Int)
(declare-fun |ackermann_#in~m_-1| () Int)
(declare-fun |ackermann_#in~n_-1| () Int)
(declare-fun ackermann_~m_-1 () Int)
(declare-fun ackermann_~n_0 () Int)
(declare-fun ackermann_~m_0 () Int)
(declare-fun ackermann_~n_2 () Int)
(declare-fun |ackermann_#in~m_3| () Int)
(declare-fun |ackermann_#in~n_3| () Int)
(declare-fun ackermann_~m_3 () Int)
(declare-fun ackermann_~n_4 () Int)
(declare-fun ackermann_~m_4 () Int)
(declare-fun |ackermann_#res_5| () Int)
(declare-fun ackermann_~n_5 () Int)
(declare-fun ackermann_~m_5 () Int)
(declare-fun |ackermann_#res_7| () Int)
(declare-fun |ackermann_#t~ret4_7| () Int)
(declare-fun |ackermann_#res_8| () Int)
(declare-fun |ackermann_#t~ret4_8| () Int)
(declare-fun |ackermann_#res_10| () Int)
(declare-fun |ackermann_#t~ret5_10| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= |ackermann_#in~m_-2| 1)) :named ssa_postcond))
(assert (! (and (= ackermann_~n_0 |ackermann_#in~n_-1|) (= ackermann_~m_0 |ackermann_#in~m_-1|)) :named ssa_0))
(assert (! (not (= ackermann_~m_0 0)) :named ssa_1))
(assert (! (= ackermann_~n_0 0) :named ssa_2))
(assert (! true :named ssa_3_GlobVarAssigCall))
(assert (! (and (= ackermann_~m_0 (+ |ackermann_#in~m_3| 1)) (= |ackermann_#in~n_3| 1)) :named ssa_3_LocVarAssigCall))
(assert (! true :named ssa_3_OldVarAssigCall))
(assert (! (and (= ackermann_~n_4 |ackermann_#in~n_3|) (= ackermann_~m_4 |ackermann_#in~m_3|)) :named ssa_4))
(assert (! (and (= |ackermann_#res_5| (+ ackermann_~n_4 1)) (= ackermann_~m_4 0)) :named ssa_5))
(assert (! true :named ssa_6))
(assert (! (= |ackermann_#res_5| |ackermann_#t~ret4_7|) :named ssa_7_return))
(assert (! (and (<= 0 (+ |ackermann_#t~ret4_7| 2147483648)) (<= |ackermann_#t~ret4_7| 2147483647) (= |ackermann_#res_8| |ackermann_#t~ret4_7|)) :named ssa_8))
(assert (! true :named ssa_9))
(assert (! (= |ackermann_#res_8| |ackermann_#t~ret5_10|) :named ssa_10_return))
(assert (! (= ackermann_~m_-2 |ackermann_#in~m_-2|) :named ssa_-2_PendingContext))
(assert (! (and (= ackermann_~n_-2 (+ |ackermann_#in~n_-1| 1)) (= |ackermann_#in~m_-1| ackermann_~m_-2)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_3_OldVarAssigCall ssa_6 ssa_3_LocVarAssigCall ssa_7_return ssa_3_GlobVarAssigCall ssa_5 ssa_4) ssa_8 ssa_9 (and ssa_10_return ssa_-2_PendingContext ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |ackermann_#in~m_-2| () Int)
(declare-fun ackermann_~m_-2 () Int)
(declare-fun |ackermann_#in~m_-1| () Int)
(declare-fun |ackermann_#in~n_-1| () Int)
(declare-fun ackermann_~m_-1 () Int)
(declare-fun ackermann_~n_0 () Int)
(declare-fun ackermann_~m_0 () Int)
(declare-fun |ackermann_#res_1| () Int)
(declare-fun ackermann_~n_1 () Int)
(declare-fun ackermann_~m_1 () Int)
(declare-fun |ackermann_#res_3| () Int)
(declare-fun |ackermann_#t~ret4_3| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= |ackermann_#in~m_-2| 1)) :named ssa_postcond))
(assert (! (and (= ackermann_~n_0 |ackermann_#in~n_-1|) (= ackermann_~m_0 |ackermann_#in~m_-1|)) :named ssa_0))
(assert (! (and (= |ackermann_#res_1| (+ ackermann_~n_0 1)) (= ackermann_~m_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! (= |ackermann_#res_1| |ackermann_#t~ret4_3|) :named ssa_3_return))
(assert (! (= ackermann_~m_-2 |ackermann_#in~m_-2|) :named ssa_-2_PendingContext))
(assert (! (and (= ackermann_~m_-2 (+ |ackermann_#in~m_-1| 1)) (= |ackermann_#in~n_-1| 1)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |ackermann_#in~m_-2| () Int)
(declare-fun |ackermann_#t~ret5_-2| () Int)
(declare-fun ackermann_~m_-2 () Int)
(declare-fun |ackermann_#t~ret5_-1| () Int)
(declare-fun |ackermann_#in~m_-1| () Int)
(declare-fun |ackermann_#in~n_-1| () Int)
(declare-fun ackermann_~m_-1 () Int)
(declare-fun ackermann_~n_0 () Int)
(declare-fun ackermann_~m_0 () Int)
(declare-fun |ackermann_#res_1| () Int)
(declare-fun ackermann_~n_1 () Int)
(declare-fun ackermann_~m_1 () Int)
(declare-fun |ackermann_#res_3| () Int)
(declare-fun |ackermann_#t~ret6_3| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= |ackermann_#in~m_-2| 1)) :named ssa_postcond))
(assert (! (and (= ackermann_~n_0 |ackermann_#in~n_-1|) (= ackermann_~m_0 |ackermann_#in~m_-1|)) :named ssa_0))
(assert (! (and (= |ackermann_#res_1| (+ ackermann_~n_0 1)) (= ackermann_~m_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! (= |ackermann_#res_1| |ackermann_#t~ret6_3|) :named ssa_3_return))
(assert (! (<= |ackermann_#in~m_-2| 1) :named ssa_-2_PendingContext))
(assert (! (and (= (+ |ackermann_#in~m_-1| 1) ackermann_~m_-2) (= |ackermann_#in~n_-1| |ackermann_#t~ret5_-2|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(echo "starting trace check")
(push 1)
(declare-fun |ackermann_#in~m_-2| () Int)
(declare-fun |ackermann_#t~ret5_-2| () Int)
(declare-fun ackermann_~m_-2 () Int)
(declare-fun |ackermann_#t~ret5_-1| () Int)
(declare-fun |ackermann_#in~m_-1| () Int)
(declare-fun |ackermann_#in~n_-1| () Int)
(declare-fun ackermann_~m_-1 () Int)
(declare-fun ackermann_~n_0 () Int)
(declare-fun ackermann_~m_0 () Int)
(declare-fun |ackermann_#res_1| () Int)
(declare-fun ackermann_~n_1 () Int)
(declare-fun ackermann_~m_1 () Int)
(declare-fun |ackermann_#res_3| () Int)
(declare-fun |ackermann_#t~ret6_3| () Int)
(assert (! true :named ssa_precond))
(assert (! (not (<= |ackermann_#in~m_-2| 1)) :named ssa_postcond))
(assert (! (and (= ackermann_~n_0 |ackermann_#in~n_-1|) (= ackermann_~m_0 |ackermann_#in~m_-1|)) :named ssa_0))
(assert (! (and (= |ackermann_#res_1| (+ ackermann_~n_0 1)) (= ackermann_~m_0 0)) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! (= |ackermann_#res_1| |ackermann_#t~ret6_3|) :named ssa_3_return))
(assert (! (<= |ackermann_#in~m_-2| 1) :named ssa_-2_PendingContext))
(assert (! (and (= (+ |ackermann_#in~m_-1| 1) ackermann_~m_-2) (= |ackermann_#in~n_-1| |ackermann_#t~ret5_-2|)) :named ssa_-2_LocVarAssignPendingContext))
(assert (! true :named ssa_-2_OldVarAssignPendingContext))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) ssa_1 ssa_2 (and ssa_-2_PendingContext ssa_3_return ssa_-2_LocVarAssignPendingContext ssa_-2_OldVarAssignPendingContext ssa_postcond))
(echo "finished trace check")
(pop 1)
(exit)
